comp 21 10 21 10 1 (hh hm ph pm n)
  0 cm 19 22
hcomp
  r=a 255        (0)
  (t255 holds the inital value passed into the A register, first ZPAQL instruction must thus be r=a 255)        (2)
  (         ifN t0 goto init_code)        (2)
  a=r 0        (2)
  a== 0        (4)
  jf 3        (6)
  lj 23        (8)
  (         if t254 goto cont_reading)        (11)
  a=r 254        (11)
  a== 0        (13)
  jt 3        (15)
  lj 70        (17)
  (         goto call_next)        (20)
  lj 1701        (20)
  (        :init_code:)        (23)
  (         t0 = 1024)        (23)
  a= 4        (23)
  a<<= 8        (25)
  r=a 0        (27)
  (         t252 = t0)        (29)
  r=a 252        (29)
  (         goto read_b_end~)        (31)
  lj 94        (31)
  (        :read_b:)        (34)
  (         t1 = t253 == 4294967294)        (34)
  c=0        (34)
  c--        (35)
  c--        (36)
  a=r 253        (37)
  a==c        (39)
  a=0        (40)
  jf 1        (41)
  a++        (43)
  r=a 1        (44)
  (         if t1 goto do_read_in)        (46)
  a== 0        (46)
  jt 3        (48)
  lj 65        (50)
  (         t255 = t253)        (53)
  a=r 253        (53)
  r=a 255        (55)
  (         t253 = 4294967294)        (57)
  a=0        (57)
  a--        (58)
  a--        (59)
  r=a 253        (60)
  (         goto cont_reading)        (62)
  lj 70        (62)
  (        :do_read_in:)        (65)
  (         t254 = 1)        (65)
  a= 1        (65)
  r=a 254        (67)
  (         halt)        (69)
  halt        (69)
  (        :cont_reading:)        (70)
  (         t254 = 0)        (70)
  a=0        (70)
  r=a 254        (71)
  (         t1 = t255)        (73)
  a=r 255        (73)
  r=a 1        (75)
  (         t2 = H[t0]〈〉)        (77)
  d=r 0        (77)
  a=*d        (79)
  r=a 2        (80)
  (         t0 = t0 - 1)        (82)
  a=r 0        (82)
  a--        (84)
  r=a 0        (85)
  (         t0 = H[t0]〈〉)        (87)
  d=a        (87)
  a=*d        (88)
  r=a 0        (89)
  (         goto find_label_ret_id)        (91)
  lj 1732        (91)
  (        :read_b_end~:)        (94)
  (                    20: def get32_hM〈addr〉:)        (94)
  (                    23: def set32_hM〈addr, value〉:)        (94)
  (                    32: def get32_pM〈addr〉:)        (94)
  (                    35: def set32_pM〈addr, value〉:)        (94)
  (                    45: def addr_alloc_pM〈size〉:)        (94)
  (                    78: def addr_alloc_pH〈size〉:)        (94)
  (                    108: def addr_alloc_hH〈size〉:)        (94)
  (         goto addr_alloc_hH_end~)        (94)
  lj 1035        (94)
  (        :addr_alloc_hH:)        (97)
  (         MarkTempVarStart)        (97)
  (Arg size at t0 + 1)        (97)
  (                    109:   start = n  # beginn after H[0]…H[n-1], each block is either of type free 〈0〉 or allocated 〈1〉, starting with 〈size, type〉)        (97)
  (         H[t0+2]〈start〉 = 1)        (97)
  a=r 0        (97)
  a+= 2        (99)
  d=a        (101)
  *d= 1        (102)
  (                    110:   if hH[start] == 0 and hH[start+1] == 0 and hH[start+2] == 0 and hH[start+3] == 0:  # first run)        (104)
  (         t5 = H[t0+2]〈start〉)        (104)
  a=*d        (104)
  r=a 5        (105)
  (         t4 = H[t5]〈〉 == 0)        (107)
  c=0        (107)
  d=a        (108)
  a=*d        (109)
  a==c        (110)
  a=0        (111)
  jf 1        (112)
  a++        (114)
  r=a 4        (115)
  (         t6 = H[t0+2]〈start〉 + 1)        (117)
  c= 1        (117)
  a=r 0        (119)
  a+= 2        (121)
  d=a        (123)
  a=*d        (124)
  a+=c        (125)
  r=a 6        (126)
  (         t5 = H[t6]〈〉 == 0)        (128)
  c=0        (128)
  d=a        (129)
  a=*d        (130)
  a==c        (131)
  a=0        (132)
  jf 1        (133)
  a++        (135)
  r=a 5        (136)
  (         t3 = t4 and t5)        (138)
  c=a        (138)
  a=r 4        (139)
  a== 0        (141)
  jt 1        (143)
  a=c        (145)
  r=a 3        (146)
  (         t5 = H[t0+2]〈start〉 + 2)        (148)
  c= 2        (148)
  a=r 0        (150)
  a+= 2        (152)
  d=a        (154)
  a=*d        (155)
  a+=c        (156)
  r=a 5        (157)
  (         t4 = H[t5]〈〉 == 0)        (159)
  c=0        (159)
  d=a        (160)
  a=*d        (161)
  a==c        (162)
  a=0        (163)
  jf 1        (164)
  a++        (166)
  r=a 4        (167)
  (         t2 = t3 and t4)        (169)
  c=a        (169)
  a=r 3        (170)
  a== 0        (172)
  jt 1        (174)
  a=c        (176)
  r=a 2        (177)
  (         t4 = H[t0+2]〈start〉 + 3)        (179)
  c= 3        (179)
  a=r 0        (181)
  a+= 2        (183)
  d=a        (185)
  a=*d        (186)
  a+=c        (187)
  r=a 4        (188)
  (         t3 = H[t4]〈〉 == 0)        (190)
  c=0        (190)
  d=a        (191)
  a=*d        (192)
  a==c        (193)
  a=0        (194)
  jf 1        (195)
  a++        (197)
  r=a 3        (198)
  (         t1 = t2 and t3)        (200)
  c=a        (200)
  a=r 2        (201)
  a== 0        (203)
  jt 1        (205)
  a=c        (207)
  r=a 1        (208)
  (         ifN t1 goto else_61)        (210)
  a== 0        (210)
  jf 3        (212)
  lj 368        (214)
  (                    111:     if len〈hH〉-start-4 < size:  # also 2 bytes for ending entry 〈0,0〉)        (217)
  (         t3 = 1024 - H[t0+2]〈start〉)        (217)
  a=r 0        (217)
  a+= 2        (219)
  d=a        (221)
  c=*d        (222)
  a= 4        (223)
  a<<= 8        (225)
  a-=c        (227)
  r=a 3        (228)
  (         t2 = t3 - 4)        (230)
  c= 4        (230)
  a-=c        (232)
  r=a 2        (233)
  (         t1 = t2 < H[t0+1]〈size〉)        (235)
  d--        (235)
  c=*d        (236)
  a<c        (237)
  a=0        (238)
  jf 1        (239)
  a++        (241)
  r=a 1        (242)
  (         ifN t1 goto else_64)        (244)
  a== 0        (244)
  jf 3        (246)
  lj 255        (248)
  (                    112:       error〈〉)        (251)
  (         error)        (251)
  error        (251)
  (         goto endif_65)        (252)
  lj 255        (252)
  (        :else_64:)        (255)
  (        :endif_65:)        (255)
  (                    113:     hH[start] = size)        (255)
  (         t1 = H[t0+2]〈start〉)        (255)
  a=r 0        (255)
  a+= 2        (257)
  d=a        (259)
  a=*d        (260)
  r=a 1        (261)
  (         H[t1]〈〉 = H[t0+1]〈size〉)        (263)
  d--        (263)
  c=*d        (264)
  d=r 1        (265)
  *d=c        (267)
  (                    114:     hH[start+1] = 1)        (268)
  (         t1 = H[t0+2]〈start〉 + 1)        (268)
  c= 1        (268)
  a=r 0        (270)
  a+= 2        (272)
  d=a        (274)
  a=*d        (275)
  a+=c        (276)
  r=a 1        (277)
  (         H[t1]〈〉 = 1)        (279)
  d=a        (279)
  *d= 1        (280)
  (                    115:     hH[start+size+2] = len〈hH〉-start-size-4)        (282)
  (         t3 = 1024 - H[t0+2]〈start〉)        (282)
  a=r 0        (282)
  a+= 2        (284)
  d=a        (286)
  c=*d        (287)
  a= 4        (288)
  a<<= 8        (290)
  a-=c        (292)
  r=a 3        (293)
  (         t2 = t3 - H[t0+1]〈size〉)        (295)
  d--        (295)
  c=*d        (296)
  a-=c        (297)
  r=a 2        (298)
  (         t1 = t2 - 4)        (300)
  c= 4        (300)
  a-=c        (302)
  r=a 1        (303)
  (         t3 = H[t0+2]〈start〉 + H[t0+1]〈size〉)        (305)
  c=*d        (305)
  d++        (306)
  a=*d        (307)
  a+=c        (308)
  r=a 3        (309)
  (         t2 = t3 + 2)        (311)
  c= 2        (311)
  a+=c        (313)
  r=a 2        (314)
  (         H[t2]〈〉 = t1)        (316)
  d=a        (316)
  a=r 1        (317)
  *d=a        (319)
  (                    116:     hH[start+size+3] = 0)        (320)
  (         t2 = H[t0+2]〈start〉 + H[t0+1]〈size〉)        (320)
  a=r 0        (320)
  a++        (322)
  d=a        (323)
  c=*d        (324)
  d++        (325)
  a=*d        (326)
  a+=c        (327)
  r=a 2        (328)
  (         t1 = t2 + 3)        (330)
  c= 3        (330)
  a+=c        (332)
  r=a 1        (333)
  (         H[t1]〈〉 = 0)        (335)
  d=a        (335)
  *d=0        (336)
  (                    117:     return start+2  # return pointer to first element)        (337)
  (         t1 = H[t0+2]〈start〉 + 2)        (337)
  c= 2        (337)
  a=r 0        (339)
  a+= 2        (341)
  d=a        (343)
  a=*d        (344)
  a+=c        (345)
  r=a 1        (346)
  (         t1 = t1)        (348)
  (         t2 = H[t0]〈〉)        (348)
  d=r 0        (348)
  a=*d        (350)
  r=a 2        (351)
  (         t0 = t0 - 1)        (353)
  a=r 0        (353)
  a--        (355)
  r=a 0        (356)
  (         t0 = H[t0]〈〉)        (358)
  d=a        (358)
  a=*d        (359)
  r=a 0        (360)
  (         goto find_label_ret_id)        (362)
  lj 1732        (362)
  (         goto endif_62)        (365)
  lj 368        (365)
  (        :else_61:)        (368)
  (        :endif_62:)        (368)
  (                    118:   pos = start)        (368)
  (         H[t0+3]〈pos〉 = H[t0+2]〈start〉)        (368)
  a=r 0        (368)
  a+= 2        (370)
  d=a        (372)
  c=*d        (373)
  d++        (374)
  *d=c        (375)
  (                    119:   while len〈hH〉-pos-4 >= size: # also needs 2 bytes for ending entry)        (376)
  (        :while_66:)        (376)
  (         t3 = 1024 - H[t0+3]〈pos〉)        (376)
  a=r 0        (376)
  a+= 3        (378)
  d=a        (380)
  c=*d        (381)
  a= 4        (382)
  a<<= 8        (384)
  a-=c        (386)
  r=a 3        (387)
  (         t2 = t3 - 4)        (389)
  c= 4        (389)
  a-=c        (391)
  r=a 2        (392)
  (         t1 = t2 >= H[t0+1]〈size〉)        (394)
  a=r 0        (394)
  a++        (396)
  d=a        (397)
  c=*d        (398)
  a=r 2        (399)
  a==c        (401)
  jt 4        (402)
  a>c        (404)
  a=0        (405)
  jf 2        (406)
  a= 1        (408)
  r=a 1        (410)
  (         ifN t1 goto whileend_68)        (412)
  a== 0        (412)
  jf 3        (414)
  lj 1017        (416)
  (                    121:     if hH[pos+1] == 0 and 〈hH[pos] == size or 〈hH[pos] > size and pos+3+hH[pos] < len〈hH〉 and hH[pos+3+hH[pos]] == 0〉 or hH[pos] >= size+2〉:  # found)        (419)
  (         t3 = H[t0+3]〈pos〉 + 1)        (419)
  c= 1        (419)
  a=r 0        (421)
  a+= 3        (423)
  d=a        (425)
  a=*d        (426)
  a+=c        (427)
  r=a 3        (428)
  (         t2 = H[t3]〈〉 == 0)        (430)
  c=0        (430)
  d=a        (431)
  a=*d        (432)
  a==c        (433)
  a=0        (434)
  jf 1        (435)
  a++        (437)
  r=a 2        (438)
  (         t6 = H[t0+3]〈pos〉)        (440)
  a=r 0        (440)
  a+= 3        (442)
  d=a        (444)
  a=*d        (445)
  r=a 6        (446)
  (         t5 = H[t6]〈〉 == H[t0+1]〈size〉)        (448)
  a=r 0        (448)
  a++        (450)
  d=a        (451)
  c=*d        (452)
  d=r 6        (453)
  a=*d        (455)
  a==c        (456)
  a=0        (457)
  jf 1        (458)
  a++        (460)
  r=a 5        (461)
  (         t9 = H[t0+3]〈pos〉)        (463)
  a=r 0        (463)
  a+= 3        (465)
  d=a        (467)
  a=*d        (468)
  r=a 9        (469)
  (         t8 = H[t9]〈〉 > H[t0+1]〈size〉)        (471)
  a=r 0        (471)
  a++        (473)
  d=a        (474)
  c=*d        (475)
  d=r 9        (476)
  a=*d        (478)
  a>c        (479)
  a=0        (480)
  jf 1        (481)
  a++        (483)
  r=a 8        (484)
  (         t11 = H[t0+3]〈pos〉 + 3)        (486)
  c= 3        (486)
  a=r 0        (488)
  a+= 3        (490)
  d=a        (492)
  a=*d        (493)
  a+=c        (494)
  r=a 11        (495)
  (         t12 = H[t0+3]〈pos〉)        (497)
  a=*d        (497)
  r=a 12        (498)
  (         t10 = t11 + H[t12]〈〉)        (500)
  d=a        (500)
  c=*d        (501)
  a=r 11        (502)
  a+=c        (504)
  r=a 10        (505)
  (         t9 = t10 < 1024)        (507)
  a= 4        (507)
  a<<= 8        (509)
  c=a        (511)
  a=r 10        (512)
  a<c        (514)
  a=0        (515)
  jf 1        (516)
  a++        (518)
  r=a 9        (519)
  (         t7 = t8 and t9)        (521)
  c=a        (521)
  a=r 8        (522)
  a== 0        (524)
  jt 1        (526)
  a=c        (528)
  r=a 7        (529)
  (         t10 = H[t0+3]〈pos〉 + 3)        (531)
  c= 3        (531)
  a=r 0        (533)
  a+= 3        (535)
  d=a        (537)
  a=*d        (538)
  a+=c        (539)
  r=a 10        (540)
  (         t11 = H[t0+3]〈pos〉)        (542)
  a=*d        (542)
  r=a 11        (543)
  (         t9 = t10 + H[t11]〈〉)        (545)
  d=a        (545)
  c=*d        (546)
  a=r 10        (547)
  a+=c        (549)
  r=a 9        (550)
  (         t8 = H[t9]〈〉 == 0)        (552)
  c=0        (552)
  d=a        (553)
  a=*d        (554)
  a==c        (555)
  a=0        (556)
  jf 1        (557)
  a++        (559)
  r=a 8        (560)
  (         t6 = t7 and t8)        (562)
  c=a        (562)
  a=r 7        (563)
  a== 0        (565)
  jt 1        (567)
  a=c        (569)
  r=a 6        (570)
  (         t4 = t5 or t6)        (572)
  c=a        (572)
  a=r 5        (573)
  a== 0        (575)
  jf 1        (577)
  a=c        (579)
  r=a 4        (580)
  (         t6 = H[t0+3]〈pos〉)        (582)
  a=r 0        (582)
  a+= 3        (584)
  d=a        (586)
  a=*d        (587)
  r=a 6        (588)
  (         t7 = H[t0+1]〈size〉 + 2)        (590)
  c= 2        (590)
  a=r 0        (592)
  a++        (594)
  d=a        (595)
  a=*d        (596)
  a+=c        (597)
  r=a 7        (598)
  (         t5 = H[t6]〈〉 >= t7)        (600)
  c=a        (600)
  d=r 6        (601)
  a=*d        (603)
  a==c        (604)
  jt 4        (605)
  a>c        (607)
  a=0        (608)
  jf 2        (609)
  a= 1        (611)
  r=a 5        (613)
  (         t3 = t4 or t5)        (615)
  c=a        (615)
  a=r 4        (616)
  a== 0        (618)
  jf 1        (620)
  a=c        (622)
  r=a 3        (623)
  (         t1 = t2 and t3)        (625)
  c=a        (625)
  a=r 2        (626)
  a== 0        (628)
  jt 1        (630)
  a=c        (632)
  r=a 1        (633)
  (         ifN t1 goto else_76)        (635)
  a== 0        (635)
  jf 3        (637)
  lj 989        (639)
  (                    122:       if hH[pos] > size: # handle rest)        (642)
  (         t2 = H[t0+3]〈pos〉)        (642)
  a=r 0        (642)
  a+= 3        (644)
  d=a        (646)
  a=*d        (647)
  r=a 2        (648)
  (         t1 = H[t2]〈〉 > H[t0+1]〈size〉)        (650)
  a=r 0        (650)
  a++        (652)
  d=a        (653)
  c=*d        (654)
  d=r 2        (655)
  a=*d        (657)
  a>c        (658)
  a=0        (659)
  jf 1        (660)
  a++        (662)
  r=a 1        (663)
  (         ifN t1 goto else_79)        (665)
  a== 0        (665)
  jf 3        (667)
  lj 928        (669)
  (                    123:         if pos+3+hH[pos] < len〈hH〉 and hH[pos+3+hH[pos]] == 0: # merge rest with next block)        (672)
  (         t4 = H[t0+3]〈pos〉 + 3)        (672)
  c= 3        (672)
  a=r 0        (674)
  a+= 3        (676)
  d=a        (678)
  a=*d        (679)
  a+=c        (680)
  r=a 4        (681)
  (         t5 = H[t0+3]〈pos〉)        (683)
  a=*d        (683)
  r=a 5        (684)
  (         t3 = t4 + H[t5]〈〉)        (686)
  d=a        (686)
  c=*d        (687)
  a=r 4        (688)
  a+=c        (690)
  r=a 3        (691)
  (         t2 = t3 < 1024)        (693)
  a= 4        (693)
  a<<= 8        (695)
  c=a        (697)
  a=r 3        (698)
  a<c        (700)
  a=0        (701)
  jf 1        (702)
  a++        (704)
  r=a 2        (705)
  (         t5 = H[t0+3]〈pos〉 + 3)        (707)
  c= 3        (707)
  a=r 0        (709)
  a+= 3        (711)
  d=a        (713)
  a=*d        (714)
  a+=c        (715)
  r=a 5        (716)
  (         t6 = H[t0+3]〈pos〉)        (718)
  a=*d        (718)
  r=a 6        (719)
  (         t4 = t5 + H[t6]〈〉)        (721)
  d=a        (721)
  c=*d        (722)
  a=r 5        (723)
  a+=c        (725)
  r=a 4        (726)
  (         t3 = H[t4]〈〉 == 0)        (728)
  c=0        (728)
  d=a        (729)
  a=*d        (730)
  a==c        (731)
  a=0        (732)
  jf 1        (733)
  a++        (735)
  r=a 3        (736)
  (         t1 = t2 and t3)        (738)
  c=a        (738)
  a=r 2        (739)
  a== 0        (741)
  jt 1        (743)
  a=c        (745)
  r=a 1        (746)
  (         ifN t1 goto else_83)        (748)
  a== 0        (748)
  jf 3        (750)
  lj 853        (752)
  (                    125:           hH[pos+2+size] = hH[pos]-size + hH[pos+2+hH[pos]]  # -2 〈this new free block's header〉 + 2 〈next header〉)        (755)
  (         t3 = H[t0+3]〈pos〉)        (755)
  a=r 0        (755)
  a+= 3        (757)
  d=a        (759)
  a=*d        (760)
  r=a 3        (761)
  (         t2 = H[t3]〈〉 - H[t0+1]〈size〉)        (763)
  a=r 0        (763)
  a++        (765)
  d=a        (766)
  c=*d        (767)
  d=r 3        (768)
  a=*d        (770)
  a-=c        (771)
  r=a 2        (772)
  (         t4 = H[t0+3]〈pos〉 + 2)        (774)
  c= 2        (774)
  a=r 0        (776)
  a+= 3        (778)
  d=a        (780)
  a=*d        (781)
  a+=c        (782)
  r=a 4        (783)
  (         t5 = H[t0+3]〈pos〉)        (785)
  a=*d        (785)
  r=a 5        (786)
  (         t3 = t4 + H[t5]〈〉)        (788)
  d=a        (788)
  c=*d        (789)
  a=r 4        (790)
  a+=c        (792)
  r=a 3        (793)
  (         t1 = t2 + H[t3]〈〉)        (795)
  d=a        (795)
  c=*d        (796)
  a=r 2        (797)
  a+=c        (799)
  r=a 1        (800)
  (         t3 = H[t0+3]〈pos〉 + 2)        (802)
  c= 2        (802)
  a=r 0        (804)
  a+= 3        (806)
  d=a        (808)
  a=*d        (809)
  a+=c        (810)
  r=a 3        (811)
  (         t2 = t3 + H[t0+1]〈size〉)        (813)
  a=r 0        (813)
  a++        (815)
  d=a        (816)
  c=*d        (817)
  a=r 3        (818)
  a+=c        (820)
  r=a 2        (821)
  (         H[t2]〈〉 = t1)        (823)
  d=a        (823)
  a=r 1        (824)
  *d=a        (826)
  (                    126:           hH[pos+3+size] = 0)        (827)
  (         t2 = H[t0+3]〈pos〉 + 3)        (827)
  c= 3        (827)
  a=r 0        (829)
  a+= 3        (831)
  d=a        (833)
  a=*d        (834)
  a+=c        (835)
  r=a 2        (836)
  (         t1 = t2 + H[t0+1]〈size〉)        (838)
  a=r 0        (838)
  a++        (840)
  d=a        (841)
  c=*d        (842)
  a=r 2        (843)
  a+=c        (845)
  r=a 1        (846)
  (         H[t1]〈〉 = 0)        (848)
  d=a        (848)
  *d=0        (849)
  (         goto endif_84)        (850)
  lj 925        (850)
  (        :else_83:)        (853)
  (                    128:           hH[pos+2+size] = hH[pos]-size-2 # 2 is this free block's header)        (853)
  (         t3 = H[t0+3]〈pos〉)        (853)
  a=r 0        (853)
  a+= 3        (855)
  d=a        (857)
  a=*d        (858)
  r=a 3        (859)
  (         t2 = H[t3]〈〉 - H[t0+1]〈size〉)        (861)
  a=r 0        (861)
  a++        (863)
  d=a        (864)
  c=*d        (865)
  d=r 3        (866)
  a=*d        (868)
  a-=c        (869)
  r=a 2        (870)
  (         t1 = t2 - 2)        (872)
  c= 2        (872)
  a-=c        (874)
  r=a 1        (875)
  (         t3 = H[t0+3]〈pos〉 + 2)        (877)
  c= 2        (877)
  a=r 0        (879)
  a+= 3        (881)
  d=a        (883)
  a=*d        (884)
  a+=c        (885)
  r=a 3        (886)
  (         t2 = t3 + H[t0+1]〈size〉)        (888)
  a=r 0        (888)
  a++        (890)
  d=a        (891)
  c=*d        (892)
  a=r 3        (893)
  a+=c        (895)
  r=a 2        (896)
  (         H[t2]〈〉 = t1)        (898)
  d=a        (898)
  a=r 1        (899)
  *d=a        (901)
  (                    129:           hH[pos+3+size] = 0)        (902)
  (         t2 = H[t0+3]〈pos〉 + 3)        (902)
  c= 3        (902)
  a=r 0        (904)
  a+= 3        (906)
  d=a        (908)
  a=*d        (909)
  a+=c        (910)
  r=a 2        (911)
  (         t1 = t2 + H[t0+1]〈size〉)        (913)
  a=r 0        (913)
  a++        (915)
  d=a        (916)
  c=*d        (917)
  a=r 2        (918)
  a+=c        (920)
  r=a 1        (921)
  (         H[t1]〈〉 = 0)        (923)
  d=a        (923)
  *d=0        (924)
  (        :endif_84:)        (925)
  (         goto endif_80)        (925)
  lj 928        (925)
  (        :else_79:)        (928)
  (        :endif_80:)        (928)
  (                    130:       hH[pos] = size)        (928)
  (         t1 = H[t0+3]〈pos〉)        (928)
  a=r 0        (928)
  a+= 3        (930)
  d=a        (932)
  a=*d        (933)
  r=a 1        (934)
  (         H[t1]〈〉 = H[t0+1]〈size〉)        (936)
  a=r 0        (936)
  a++        (938)
  d=a        (939)
  c=*d        (940)
  d=r 1        (941)
  *d=c        (943)
  (                    131:       hH[pos+1] = 1  # allocated)        (944)
  (         t1 = H[t0+3]〈pos〉 + 1)        (944)
  c= 1        (944)
  a=r 0        (946)
  a+= 3        (948)
  d=a        (950)
  a=*d        (951)
  a+=c        (952)
  r=a 1        (953)
  (         H[t1]〈〉 = 1)        (955)
  d=a        (955)
  *d= 1        (956)
  (                    132:       return pos+2  # return pointer to first element)        (958)
  (         t1 = H[t0+3]〈pos〉 + 2)        (958)
  c= 2        (958)
  a=r 0        (960)
  a+= 3        (962)
  d=a        (964)
  a=*d        (965)
  a+=c        (966)
  r=a 1        (967)
  (         t1 = t1)        (969)
  (         t2 = H[t0]〈〉)        (969)
  d=r 0        (969)
  a=*d        (971)
  r=a 2        (972)
  (         t0 = t0 - 1)        (974)
  a=r 0        (974)
  a--        (976)
  r=a 0        (977)
  (         t0 = H[t0]〈〉)        (979)
  d=a        (979)
  a=*d        (980)
  r=a 0        (981)
  (         goto find_label_ret_id)        (983)
  lj 1732        (983)
  (         goto endif_77)        (986)
  lj 989        (986)
  (        :else_76:)        (989)
  (        :endif_77:)        (989)
  (                    134:     pos += 2 + hH[pos])        (989)
  (         t2 = H[t0+3]〈pos〉)        (989)
  a=r 0        (989)
  a+= 3        (991)
  d=a        (993)
  a=*d        (994)
  r=a 2        (995)
  (         t1 = 2 + H[t2]〈〉)        (997)
  d=a        (997)
  c=*d        (998)
  a= 2        (999)
  a+=c        (1001)
  r=a 1        (1002)
  (         H[t0+3]〈pos〉 = H[t0+3]〈pos〉 + t1)        (1004)
  c=a        (1004)
  a=r 0        (1005)
  a+= 3        (1007)
  d=a        (1009)
  a=*d        (1010)
  a+=c        (1011)
  c=a        (1012)
  *d=c        (1013)
  (         goto while_66)        (1014)
  lj 376        (1014)
  (        :whileend_68:)        (1017)
  (                    135:   error〈〉)        (1017)
  (         error)        (1017)
  error        (1017)
  (insert return as it might not be done by the function:)        (1018)
  (         t2 = H[t0]〈〉)        (1018)
  d=r 0        (1018)
  a=*d        (1020)
  r=a 2        (1021)
  (         t0 = t0 - 1)        (1023)
  a=r 0        (1023)
  a--        (1025)
  r=a 0        (1026)
  (         t0 = H[t0]〈〉)        (1028)
  d=a        (1028)
  a=*d        (1029)
  r=a 0        (1030)
  (         goto find_label_ret_id)        (1032)
  lj 1732        (1032)
  (         MarkTempVarEnd)        (1035)
  (        :addr_alloc_hH_end~:)        (1035)
  (                    137: def addr_alloc_hM〈size〉:)        (1035)
  (                    169: def addr_free_pM〈addr〉:)        (1035)
  (                    191: def addr_free_pH〈addr〉:  # expects a valid reference to a used block)        (1035)
  (                    212: def addr_free_hH〈addr〉:  # expects a valid reference to a used block)        (1035)
  (         goto addr_free_hH_end~)        (1035)
  lj 1374        (1035)
  (        :addr_free_hH:)        (1038)
  (         MarkTempVarStart)        (1038)
  (Arg addr at t0 + 1)        (1038)
  (                    213:   last_free = NONE)        (1038)
  (         H[t0+2]〈last_free〉 = 4294967295)        (1038)
  a=r 0        (1038)
  a+= 2        (1040)
  d=a        (1042)
  *d=0        (1043)
  *d--        (1044)
  (                    214:   pos = n  # n is start)        (1045)
  (         H[t0+3]〈pos〉 = 1)        (1045)
  d++        (1045)
  *d= 1        (1046)
  (                    215:   addr -= 2  # addr showed to first element, not block start)        (1048)
  (         H[t0+1]〈addr〉 = H[t0+1]〈addr〉 - 2)        (1048)
  c= 2        (1048)
  a=r 0        (1050)
  a++        (1052)
  d=a        (1053)
  a=*d        (1054)
  a-=c        (1055)
  c=a        (1056)
  *d=c        (1057)
  (                    216:   hH[addr+1] = 0  # free)        (1058)
  (         t1 = H[t0+1]〈addr〉 + 1)        (1058)
  c= 1        (1058)
  a=*d        (1060)
  a+=c        (1061)
  r=a 1        (1062)
  (         H[t1]〈〉 = 0)        (1064)
  d=a        (1064)
  *d=0        (1065)
  (                    217:   while pos < addr:)        (1066)
  (        :while_141:)        (1066)
  (         t1 = H[t0+3]〈pos〉 < H[t0+1]〈addr〉)        (1066)
  a=r 0        (1066)
  a++        (1068)
  d=a        (1069)
  c=*d        (1070)
  a=r 0        (1071)
  a+= 3        (1073)
  d=a        (1075)
  a=*d        (1076)
  a<c        (1077)
  a=0        (1078)
  jf 1        (1079)
  a++        (1081)
  r=a 1        (1082)
  (         ifN t1 goto whileend_143)        (1084)
  a== 0        (1084)
  jf 3        (1086)
  lj 1160        (1088)
  (                    218:     if hH[pos+1] == 0:  # of type 'free'?)        (1091)
  (         t2 = H[t0+3]〈pos〉 + 1)        (1091)
  c= 1        (1091)
  a=*d        (1093)
  a+=c        (1094)
  r=a 2        (1095)
  (         t1 = H[t2]〈〉 == 0)        (1097)
  c=0        (1097)
  d=a        (1098)
  a=*d        (1099)
  a==c        (1100)
  a=0        (1101)
  jf 1        (1102)
  a++        (1104)
  r=a 1        (1105)
  (         ifN t1 goto else_146)        (1107)
  a== 0        (1107)
  jf 3        (1109)
  lj 1125        (1111)
  (                    219:       last_free = pos)        (1114)
  (         H[t0+2]〈last_free〉 = H[t0+3]〈pos〉)        (1114)
  a=r 0        (1114)
  a+= 3        (1116)
  d=a        (1118)
  c=*d        (1119)
  d--        (1120)
  *d=c        (1121)
  (         goto endif_147)        (1122)
  lj 1132        (1122)
  (        :else_146:)        (1125)
  (                    221:       last_free = NONE)        (1125)
  (         H[t0+2]〈last_free〉 = 4294967295)        (1125)
  a=r 0        (1125)
  a+= 2        (1127)
  d=a        (1129)
  *d=0        (1130)
  *d--        (1131)
  (        :endif_147:)        (1132)
  (                    222:     pos += 2 + hH[pos])        (1132)
  (         t2 = H[t0+3]〈pos〉)        (1132)
  a=r 0        (1132)
  a+= 3        (1134)
  d=a        (1136)
  a=*d        (1137)
  r=a 2        (1138)
  (         t1 = 2 + H[t2]〈〉)        (1140)
  d=a        (1140)
  c=*d        (1141)
  a= 2        (1142)
  a+=c        (1144)
  r=a 1        (1145)
  (         H[t0+3]〈pos〉 = H[t0+3]〈pos〉 + t1)        (1147)
  c=a        (1147)
  a=r 0        (1148)
  a+= 3        (1150)
  d=a        (1152)
  a=*d        (1153)
  a+=c        (1154)
  c=a        (1155)
  *d=c        (1156)
  (         goto while_141)        (1157)
  lj 1066        (1157)
  (        :whileend_143:)        (1160)
  (                    224:   if addr+3+hH[addr] < len〈hH〉 and hH[addr+3+hH[addr]] == 0: # merge with next block)        (1160)
  (         t4 = H[t0+1]〈addr〉 + 3)        (1160)
  c= 3        (1160)
  a=r 0        (1162)
  a++        (1164)
  d=a        (1165)
  a=*d        (1166)
  a+=c        (1167)
  r=a 4        (1168)
  (         t5 = H[t0+1]〈addr〉)        (1170)
  a=*d        (1170)
  r=a 5        (1171)
  (         t3 = t4 + H[t5]〈〉)        (1173)
  d=a        (1173)
  c=*d        (1174)
  a=r 4        (1175)
  a+=c        (1177)
  r=a 3        (1178)
  (         t2 = t3 < 1024)        (1180)
  a= 4        (1180)
  a<<= 8        (1182)
  c=a        (1184)
  a=r 3        (1185)
  a<c        (1187)
  a=0        (1188)
  jf 1        (1189)
  a++        (1191)
  r=a 2        (1192)
  (         t5 = H[t0+1]〈addr〉 + 3)        (1194)
  c= 3        (1194)
  a=r 0        (1196)
  a++        (1198)
  d=a        (1199)
  a=*d        (1200)
  a+=c        (1201)
  r=a 5        (1202)
  (         t6 = H[t0+1]〈addr〉)        (1204)
  a=*d        (1204)
  r=a 6        (1205)
  (         t4 = t5 + H[t6]〈〉)        (1207)
  d=a        (1207)
  c=*d        (1208)
  a=r 5        (1209)
  a+=c        (1211)
  r=a 4        (1212)
  (         t3 = H[t4]〈〉 == 0)        (1214)
  c=0        (1214)
  d=a        (1215)
  a=*d        (1216)
  a==c        (1217)
  a=0        (1218)
  jf 1        (1219)
  a++        (1221)
  r=a 3        (1222)
  (         t1 = t2 and t3)        (1224)
  c=a        (1224)
  a=r 2        (1225)
  a== 0        (1227)
  jt 1        (1229)
  a=c        (1231)
  r=a 1        (1232)
  (         ifN t1 goto else_150)        (1234)
  a== 0        (1234)
  jf 3        (1236)
  lj 1296        (1238)
  (                    226:     hH[addr] = hH[addr] + 2 + hH[addr+2+hH[addr]] # + 2 is header)        (1241)
  (         t3 = H[t0+1]〈addr〉)        (1241)
  a=r 0        (1241)
  a++        (1243)
  d=a        (1244)
  a=*d        (1245)
  r=a 3        (1246)
  (         t2 = H[t3]〈〉 + 2)        (1248)
  c= 2        (1248)
  d=a        (1250)
  a=*d        (1251)
  a+=c        (1252)
  r=a 2        (1253)
  (         t4 = H[t0+1]〈addr〉 + 2)        (1255)
  c= 2        (1255)
  a=r 0        (1257)
  a++        (1259)
  d=a        (1260)
  a=*d        (1261)
  a+=c        (1262)
  r=a 4        (1263)
  (         t5 = H[t0+1]〈addr〉)        (1265)
  a=*d        (1265)
  r=a 5        (1266)
  (         t3 = t4 + H[t5]〈〉)        (1268)
  d=a        (1268)
  c=*d        (1269)
  a=r 4        (1270)
  a+=c        (1272)
  r=a 3        (1273)
  (         t1 = t2 + H[t3]〈〉)        (1275)
  d=a        (1275)
  c=*d        (1276)
  a=r 2        (1277)
  a+=c        (1279)
  r=a 1        (1280)
  (         t2 = H[t0+1]〈addr〉)        (1282)
  a=r 0        (1282)
  a++        (1284)
  d=a        (1285)
  a=*d        (1286)
  r=a 2        (1287)
  (         H[t2]〈〉 = t1)        (1289)
  d=a        (1289)
  a=r 1        (1290)
  *d=a        (1292)
  (         goto endif_151)        (1293)
  lj 1296        (1293)
  (        :else_150:)        (1296)
  (        :endif_151:)        (1296)
  (                    228:   if last_free != NONE:)        (1296)
  (         t1 = H[t0+2]〈last_free〉 != 4294967295)        (1296)
  c=0        (1296)
  c--        (1297)
  a=r 0        (1298)
  a+= 2        (1300)
  d=a        (1302)
  a=*d        (1303)
  a==c        (1304)
  a=0        (1305)
  jt 1        (1306)
  a++        (1308)
  r=a 1        (1309)
  (         ifN t1 goto else_153)        (1311)
  a== 0        (1311)
  jf 3        (1313)
  lj 1357        (1315)
  (                    230:     hH[last_free] = hH[last_free] + 2 + hH[addr] # + 2 is header)        (1318)
  (         t3 = H[t0+2]〈last_free〉)        (1318)
  a=*d        (1318)
  r=a 3        (1319)
  (         t2 = H[t3]〈〉 + 2)        (1321)
  c= 2        (1321)
  d=a        (1323)
  a=*d        (1324)
  a+=c        (1325)
  r=a 2        (1326)
  (         t3 = H[t0+1]〈addr〉)        (1328)
  a=r 0        (1328)
  a++        (1330)
  d=a        (1331)
  a=*d        (1332)
  r=a 3        (1333)
  (         t1 = t2 + H[t3]〈〉)        (1335)
  d=a        (1335)
  c=*d        (1336)
  a=r 2        (1337)
  a+=c        (1339)
  r=a 1        (1340)
  (         t2 = H[t0+2]〈last_free〉)        (1342)
  a=r 0        (1342)
  a+= 2        (1344)
  d=a        (1346)
  a=*d        (1347)
  r=a 2        (1348)
  (         H[t2]〈〉 = t1)        (1350)
  d=a        (1350)
  a=r 1        (1351)
  *d=a        (1353)
  (         goto endif_154)        (1354)
  lj 1357        (1354)
  (        :else_153:)        (1357)
  (        :endif_154:)        (1357)
  (insert return as it might not be done by the function:)        (1357)
  (         t2 = H[t0]〈〉)        (1357)
  d=r 0        (1357)
  a=*d        (1359)
  r=a 2        (1360)
  (         t0 = t0 - 1)        (1362)
  a=r 0        (1362)
  a--        (1364)
  r=a 0        (1365)
  (         t0 = H[t0]〈〉)        (1367)
  d=a        (1367)
  a=*d        (1368)
  r=a 0        (1369)
  (         goto find_label_ret_id)        (1371)
  lj 1732        (1371)
  (         MarkTempVarEnd)        (1374)
  (        :addr_free_hH_end~:)        (1374)
  (                    232: def addr_free_hM〈addr〉:)        (1374)
  (                    254: pass)        (1374)
  (                    360: i_x = 0)        (1374)
  (         H[t0+1]〈i_x〉 = 0)        (1374)
  a=r 0        (1374)
  a++        (1376)
  d=a        (1377)
  *d=0        (1378)
  (                    361: old_v = NONE)        (1379)
  (         H[t0+2]〈old_v〉 = 4294967295)        (1379)
  d++        (1379)
  *d=0        (1380)
  *d--        (1381)
  (                    362: old_n = NONE)        (1382)
  (         H[t0+3]〈old_n〉 = 4294967295)        (1382)
  d++        (1382)
  *d=0        (1383)
  *d--        (1384)
  (                    363: def hcomp〈c〉:  # pcomp bytecode is passed first 〈or 0 if there is none〉)        (1385)
  (         goto hcomp_end~)        (1385)
  lj 1701        (1385)
  (        :hcomp:)        (1388)
  (         MarkTempVarStart)        (1388)
  (Arg c at t0 + 1)        (1388)
  (                    364:   global i_x, old_v, old_n)        (1388)
  (Global i_x via H[t252+1])        (1388)
  (Global old_v via H[t252+2])        (1388)
  (Global old_n via H[t252+3])        (1388)
  (                    365:   varray = NONE)        (1388)
  (         H[t0+2]〈varray〉 = 4294967295)        (1388)
  a=r 0        (1388)
  a+= 2        (1390)
  d=a        (1392)
  *d=0        (1393)
  *d--        (1394)
  (                    367:   i_x += 1)        (1395)
  (         H[t252+1]〈i_x〉 = H[t252+1]〈i_x〉 + 1)        (1395)
  a=r 252        (1395)
  a++        (1397)
  d=a        (1398)
  *d++        (1399)
  (                    368:   i_x %= 256)        (1400)
  (         H[t252+1]〈i_x〉 = H[t252+1]〈i_x〉 % 256)        (1400)
  a= 1        (1400)
  a<<= 8        (1402)
  c=a        (1404)
  a=*d        (1405)
  a%=c        (1406)
  c=a        (1407)
  *d=c        (1408)
  (                    369:   rr = 〈i_x + 7〉*13 % 160)        (1409)
  (         t3 = H[t252+1]〈i_x〉 + 7)        (1409)
  c= 7        (1409)
  a=*d        (1411)
  a+=c        (1412)
  r=a 3        (1413)
  (         t2 = t3 * 13)        (1415)
  c= 13        (1415)
  a*=c        (1417)
  r=a 2        (1418)
  (         t1 = t2 % 160)        (1420)
  c= 160        (1420)
  a%=c        (1422)
  r=a 1        (1423)
  (         H[t0+3]〈rr〉 = t1)        (1425)
  a=r 0        (1425)
  a+= 3        (1427)
  d=a        (1429)
  a=r 1        (1430)
  *d=a        (1432)
  (                    371:   varray = alloc_hH〈rr〉)        (1433)
  (         H[t0+4]〈〉 = t0)        (1433)
  d++        (1433)
  a=r 0        (1434)
  *d=a        (1436)
  (saved bsp, return id:)        (1437)
  (         H[t0+5]〈〉 = 30)        (1437)
  d++        (1437)
  *d= 30        (1438)
  (push arguments:)        (1440)
  (         H[t0+6]〈〉 = H[t0+3]〈rr〉)        (1440)
  a+= 3        (1440)
  d=a        (1442)
  c=*d        (1443)
  a=r 0        (1444)
  a+= 6        (1446)
  d=a        (1448)
  *d=c        (1449)
  (         t0 = t0 + 5)        (1450)
  c= 5        (1450)
  a=r 0        (1452)
  a+=c        (1454)
  r=a 0        (1455)
  (         goto addr_alloc_hH)        (1457)
  lj 97        (1457)
  (        :return_id_30:)        (1460)
  (         H[t0+2]〈varray〉 = t1)        (1460)
  a=r 0        (1460)
  a+= 2        (1462)
  d=a        (1464)
  a=r 1        (1465)
  *d=a        (1467)
  (                    373:   if old_v != NONE:)        (1468)
  (         t1 = H[t252+2]〈old_v〉 != 4294967295)        (1468)
  c=0        (1468)
  c--        (1469)
  a=r 252        (1470)
  a+= 2        (1472)
  d=a        (1474)
  a=*d        (1475)
  a==c        (1476)
  a=0        (1477)
  jt 1        (1478)
  a++        (1480)
  r=a 1        (1481)
  (         ifN t1 goto else_170)        (1483)
  a== 0        (1483)
  jf 3        (1485)
  lj 1526        (1487)
  (                    375:     free_hH〈old_v〉)        (1490)
  (         H[t0+4]〈〉 = t0)        (1490)
  a=r 0        (1490)
  a+= 4        (1492)
  d=a        (1494)
  a=r 0        (1495)
  *d=a        (1497)
  (saved bsp, return id:)        (1498)
  (         H[t0+5]〈〉 = 31)        (1498)
  d++        (1498)
  *d= 31        (1499)
  (push arguments:)        (1501)
  (         H[t0+6]〈〉 = H[t252+2]〈old_v〉)        (1501)
  a=r 252        (1501)
  a+= 2        (1503)
  d=a        (1505)
  c=*d        (1506)
  a=r 0        (1507)
  a+= 6        (1509)
  d=a        (1511)
  *d=c        (1512)
  (         t0 = t0 + 5)        (1513)
  c= 5        (1513)
  a=r 0        (1515)
  a+=c        (1517)
  r=a 0        (1518)
  (         goto addr_free_hH)        (1520)
  lj 1038        (1520)
  (        :return_id_31:)        (1523)
  (         goto endif_171)        (1523)
  lj 1526        (1523)
  (        :else_170:)        (1526)
  (        :endif_171:)        (1526)
  (                    376:   old_v = old_n)        (1526)
  (         H[t252+2]〈old_v〉 = H[t252+3]〈old_n〉)        (1526)
  a=r 252        (1526)
  a+= 3        (1528)
  d=a        (1530)
  c=*d        (1531)
  d--        (1532)
  *d=c        (1533)
  (                    377:   old_n = varray)        (1534)
  (         H[t252+3]〈old_n〉 = H[t0+2]〈varray〉)        (1534)
  a=r 0        (1534)
  a+= 2        (1536)
  d=a        (1538)
  c=*d        (1539)
  a=r 252        (1540)
  a+= 3        (1542)
  d=a        (1544)
  *d=c        (1545)
  (                    379:   i = 0)        (1546)
  (         H[t0+4]〈i〉 = 0)        (1546)
  a=r 0        (1546)
  a+= 4        (1548)
  d=a        (1550)
  *d=0        (1551)
  (                    380:   while i < len_hH〈varray〉:)        (1552)
  (        :while_172:)        (1552)
  (         t2 = H[t0+2]〈varray〉)        (1552)
  a=r 0        (1552)
  a+= 2        (1554)
  d=a        (1556)
  a=*d        (1557)
  r=a 2        (1558)
  (         t2 = t2 - 2)        (1560)
  c= 2        (1560)
  a-=c        (1562)
  r=a 2        (1563)
  (         t1 = H[t0+4]〈i〉 < H[t2]〈〉)        (1565)
  d=a        (1565)
  c=*d        (1566)
  a=r 0        (1567)
  a+= 4        (1569)
  d=a        (1571)
  a=*d        (1572)
  a<c        (1573)
  a=0        (1574)
  jf 1        (1575)
  a++        (1577)
  r=a 1        (1578)
  (         ifN t1 goto whileend_174)        (1580)
  a== 0        (1580)
  jf 3        (1582)
  lj 1684        (1584)
  (                    381:       varray[i] = 1)        (1587)
  (         t1 = H[t0+2]〈varray〉 + H[t0+4]〈i〉)        (1587)
  c=*d        (1587)
  a=r 0        (1588)
  a+= 2        (1590)
  d=a        (1592)
  a=*d        (1593)
  a+=c        (1594)
  r=a 1        (1595)
  (         H[t1]〈〉 = 1)        (1597)
  d=a        (1597)
  *d= 1        (1598)
  (                    382:       varray[i] += i_x -1)        (1600)
  (         t1 = H[t252+1]〈i_x〉 - 1)        (1600)
  c= 1        (1600)
  a=r 252        (1602)
  a++        (1604)
  d=a        (1605)
  a=*d        (1606)
  a-=c        (1607)
  r=a 1        (1608)
  (         t2 = H[t0+2]〈varray〉 + H[t0+4]〈i〉)        (1610)
  a=r 0        (1610)
  a+= 4        (1612)
  d=a        (1614)
  c=*d        (1615)
  a=r 0        (1616)
  a+= 2        (1618)
  d=a        (1620)
  a=*d        (1621)
  a+=c        (1622)
  r=a 2        (1623)
  (         H[t2]〈〉 = H[t2]〈〉 + t1)        (1625)
  c=r 1        (1625)
  d=a        (1627)
  a=*d        (1628)
  a+=c        (1629)
  *d=a        (1630)
  (                    383:       if varray[i] != i_x:)        (1631)
  (         t2 = H[t0+2]〈varray〉 + H[t0+4]〈i〉)        (1631)
  a=r 0        (1631)
  a+= 4        (1633)
  d=a        (1635)
  c=*d        (1636)
  a=r 0        (1637)
  a+= 2        (1639)
  d=a        (1641)
  a=*d        (1642)
  a+=c        (1643)
  r=a 2        (1644)
  (         t2 = H[t2]〈〉)        (1646)
  d=a        (1646)
  a=*d        (1647)
  r=a 2        (1648)
  (         t1 = t2 != H[t252+1]〈i_x〉)        (1650)
  a=r 252        (1650)
  a++        (1652)
  d=a        (1653)
  c=*d        (1654)
  a=r 2        (1655)
  a==c        (1657)
  a=0        (1658)
  jt 1        (1659)
  a++        (1661)
  r=a 1        (1662)
  (         ifN t1 goto else_177)        (1664)
  a== 0        (1664)
  jf 3        (1666)
  lj 1675        (1668)
  (                    384:         error〈〉 # assignment or access went wrong?)        (1671)
  (         error)        (1671)
  error        (1671)
  (         goto endif_178)        (1672)
  lj 1675        (1672)
  (        :else_177:)        (1675)
  (        :endif_178:)        (1675)
  (                    385:       i += 1)        (1675)
  (         H[t0+4]〈i〉 = H[t0+4]〈i〉 + 1)        (1675)
  a=r 0        (1675)
  a+= 4        (1677)
  d=a        (1679)
  *d++        (1680)
  (         goto while_172)        (1681)
  lj 1552        (1681)
  (        :whileend_174:)        (1684)
  (insert return as it might not be done by the function:)        (1684)
  (         t2 = H[t0]〈〉)        (1684)
  d=r 0        (1684)
  a=*d        (1686)
  r=a 2        (1687)
  (         t0 = t0 - 1)        (1689)
  a=r 0        (1689)
  a--        (1691)
  r=a 0        (1692)
  (         t0 = H[t0]〈〉)        (1694)
  d=a        (1694)
  a=*d        (1695)
  r=a 0        (1696)
  (         goto find_label_ret_id)        (1698)
  lj 1732        (1698)
  (         MarkTempVarEnd)        (1701)
  (        :hcomp_end~:)        (1701)
  (                    393: pass)        (1701)
  (        :call_next:)        (1701)
  (         t253 = 4294967294)        (1701)
  a=0        (1701)
  a--        (1702)
  a--        (1703)
  r=a 253        (1704)
  (         H[t0+4]〈〉 = t0)        (1706)
  a=r 0        (1706)
  a+= 4        (1708)
  d=a        (1710)
  a=r 0        (1711)
  *d=a        (1713)
  (saved bsp, return id:)        (1714)
  (         H[t0+5]〈〉 = 32)        (1714)
  d++        (1714)
  *d= 32        (1715)
  (push arguments:)        (1717)
  (         H[t0+6]〈〉 = t255)        (1717)
  d++        (1717)
  a=r 255        (1718)
  *d=a        (1720)
  (         t0 = t0 + 5)        (1721)
  c= 5        (1721)
  a=r 0        (1723)
  a+=c        (1725)
  r=a 0        (1726)
  (         goto hcomp)        (1728)
  lj 1388        (1728)
  (        :return_id_32:)        (1731)
  (         halt)        (1731)
  halt        (1731)
  (        :find_label_ret_id:)        (1732)
  (         t4 = t0 > 1049400)        (1732)
  a= 16        (1732)
  a<<= 8        (1734)
  a+= 3        (1736)
  a<<= 8        (1738)
  a+= 56        (1740)
  c=a        (1742)
  a=r 0        (1743)
  a>c        (1745)
  a=0        (1746)
  jf 1        (1747)
  a++        (1749)
  r=a 4        (1750)
  (         if t4 goto throw_error)        (1752)
  a== 0        (1752)
  jt 3        (1754)
  lj 1783        (1756)
  (         ifEq t2 30 goto return_id_30)        (1759)
  c=r 2        (1759)
  a= 30        (1761)
  a==c        (1763)
  jf 3        (1764)
  lj 1460        (1766)
  (         ifEq t2 31 goto return_id_31)        (1769)
  a++        (1769)
  a==c        (1770)
  jf 3        (1771)
  lj 1523        (1773)
  (         ifEq t2 32 goto return_id_32)        (1776)
  a++        (1776)
  a==c        (1777)
  jf 3        (1778)
  lj 1731        (1780)
  (        :throw_error:)        (1783)
  (         error)        (1783)
  error        (1783)
  (         halt)        (1784)
  halt        (1784)
pcomp  ;
  r=a 255        (0)
  (t255 holds the inital value passed into the A register, first ZPAQL instruction must thus be r=a 255)        (2)
  (         ifN t0 goto init_code)        (2)
  a=r 0        (2)
  a== 0        (4)
  jf 3        (6)
  lj 23        (8)
  (         if t254 goto cont_reading)        (11)
  a=r 254        (11)
  a== 0        (13)
  jt 3        (15)
  lj 70        (17)
  (         goto call_next)        (20)
  lj 2323        (20)
  (        :init_code:)        (23)
  (         t0 = 1024)        (23)
  a= 4        (23)
  a<<= 8        (25)
  r=a 0        (27)
  (         t252 = t0)        (29)
  r=a 252        (29)
  (         goto read_b_end~)        (31)
  lj 94        (31)
  (        :read_b:)        (34)
  (         t1 = t253 == 4294967294)        (34)
  c=0        (34)
  c--        (35)
  c--        (36)
  a=r 253        (37)
  a==c        (39)
  a=0        (40)
  jf 1        (41)
  a++        (43)
  r=a 1        (44)
  (         if t1 goto do_read_in)        (46)
  a== 0        (46)
  jt 3        (48)
  lj 65        (50)
  (         t255 = t253)        (53)
  a=r 253        (53)
  r=a 255        (55)
  (         t253 = 4294967294)        (57)
  a=0        (57)
  a--        (58)
  a--        (59)
  r=a 253        (60)
  (         goto cont_reading)        (62)
  lj 70        (62)
  (        :do_read_in:)        (65)
  (         t254 = 1)        (65)
  a= 1        (65)
  r=a 254        (67)
  (         halt)        (69)
  halt        (69)
  (        :cont_reading:)        (70)
  (         t254 = 0)        (70)
  a=0        (70)
  r=a 254        (71)
  (         t1 = t255)        (73)
  a=r 255        (73)
  r=a 1        (75)
  (         t2 = H[t0]〈〉)        (77)
  d=r 0        (77)
  a=*d        (79)
  r=a 2        (80)
  (         t0 = t0 - 1)        (82)
  a=r 0        (82)
  a--        (84)
  r=a 0        (85)
  (         t0 = H[t0]〈〉)        (87)
  d=a        (87)
  a=*d        (88)
  r=a 0        (89)
  (         goto find_label_ret_id)        (91)
  lj 2354        (91)
  (        :read_b_end~:)        (94)
  (                    20: def get32_hM〈addr〉:)        (94)
  (                    23: def set32_hM〈addr, value〉:)        (94)
  (                    32: def get32_pM〈addr〉:)        (94)
  (         goto get32_pM_end~)        (94)
  lj 193        (94)
  (        :get32_pM:)        (97)
  (         MarkTempVarStart)        (97)
  (Arg addr at t0 + 1)        (97)
  (                    33:   return 〈〈〈〈〈pM[addr] << 8〉 + pM[addr+1]〉 << 8〉 + pM[addr+2]〉 << 8〉 + pM[addr+3])        (97)
  (         t7 = H[t0+1]〈addr〉)        (97)
  a=r 0        (97)
  a++        (99)
  d=a        (100)
  a=*d        (101)
  r=a 7        (102)
  (         t6 = M[t7] << 8)        (104)
  c= 8        (104)
  b=a        (106)
  a=*b        (107)
  a<<=c        (108)
  r=a 6        (109)
  (         t7 = H[t0+1]〈addr〉 + 1)        (111)
  c= 1        (111)
  a=*d        (113)
  a+=c        (114)
  r=a 7        (115)
  (         t5 = t6 + M[t7])        (117)
  b=a        (117)
  c=*b        (118)
  a=r 6        (119)
  a+=c        (121)
  r=a 5        (122)
  (         t4 = t5 << 8)        (124)
  c= 8        (124)
  a<<=c        (126)
  r=a 4        (127)
  (         t5 = H[t0+1]〈addr〉 + 2)        (129)
  c= 2        (129)
  a=*d        (131)
  a+=c        (132)
  r=a 5        (133)
  (         t3 = t4 + M[t5])        (135)
  b=a        (135)
  c=*b        (136)
  a=r 4        (137)
  a+=c        (139)
  r=a 3        (140)
  (         t2 = t3 << 8)        (142)
  c= 8        (142)
  a<<=c        (144)
  r=a 2        (145)
  (         t3 = H[t0+1]〈addr〉 + 3)        (147)
  c= 3        (147)
  a=*d        (149)
  a+=c        (150)
  r=a 3        (151)
  (         t1 = t2 + M[t3])        (153)
  b=a        (153)
  c=*b        (154)
  a=r 2        (155)
  a+=c        (157)
  r=a 1        (158)
  (         t1 = t1)        (160)
  (         t2 = H[t0]〈〉)        (160)
  d=r 0        (160)
  a=*d        (162)
  r=a 2        (163)
  (         t0 = t0 - 1)        (165)
  a=r 0        (165)
  a--        (167)
  r=a 0        (168)
  (         t0 = H[t0]〈〉)        (170)
  d=a        (170)
  a=*d        (171)
  r=a 0        (172)
  (         goto find_label_ret_id)        (174)
  lj 2354        (174)
  (insert return as it might not be done by the function:)        (177)
  (         t2 = H[t0]〈〉)        (177)
  d=a        (177)
  a=*d        (178)
  r=a 2        (179)
  (         t0 = t0 - 1)        (181)
  a=r 0        (181)
  a--        (183)
  r=a 0        (184)
  (         t0 = H[t0]〈〉)        (186)
  d=a        (186)
  a=*d        (187)
  r=a 0        (188)
  (         goto find_label_ret_id)        (190)
  lj 2354        (190)
  (         MarkTempVarEnd)        (193)
  (        :get32_pM_end~:)        (193)
  (                    35: def set32_pM〈addr, value〉:)        (193)
  (         goto set32_pM_end~)        (193)
  lj 316        (193)
  (        :set32_pM:)        (196)
  (         MarkTempVarStart)        (196)
  (Arg addr at t0 + 1)        (196)
  (Arg value at t0 + 2)        (196)
  (                    36:   pM[addr+3] = value % 256)        (196)
  (         t1 = H[t0+2]〈value〉 % 256)        (196)
  a= 1        (196)
  a<<= 8        (198)
  c=a        (200)
  a=r 0        (201)
  a+= 2        (203)
  d=a        (205)
  a=*d        (206)
  a%=c        (207)
  r=a 1        (208)
  (         t2 = H[t0+1]〈addr〉 + 3)        (210)
  c= 3        (210)
  d--        (212)
  a=*d        (213)
  a+=c        (214)
  r=a 2        (215)
  (         M[t2] = t1)        (217)
  c=a        (217)
  a=r 1        (218)
  *c=a        (220)
  (                    37:   value >>= 8)        (221)
  (         H[t0+2]〈value〉 = H[t0+2]〈value〉 >> 8)        (221)
  c= 8        (221)
  d++        (223)
  a=*d        (224)
  a>>=c        (225)
  c=a        (226)
  *d=c        (227)
  (                    38:   pM[addr+2] = value % 256)        (228)
  (         t1 = H[t0+2]〈value〉 % 256)        (228)
  a= 1        (228)
  a<<= 8        (230)
  c=a        (232)
  a=*d        (233)
  a%=c        (234)
  r=a 1        (235)
  (         t2 = H[t0+1]〈addr〉 + 2)        (237)
  c= 2        (237)
  d--        (239)
  a=*d        (240)
  a+=c        (241)
  r=a 2        (242)
  (         M[t2] = t1)        (244)
  c=a        (244)
  a=r 1        (245)
  *c=a        (247)
  (                    39:   value >>= 8)        (248)
  (         H[t0+2]〈value〉 = H[t0+2]〈value〉 >> 8)        (248)
  c= 8        (248)
  d++        (250)
  a=*d        (251)
  a>>=c        (252)
  c=a        (253)
  *d=c        (254)
  (                    40:   pM[addr+1] = value % 256)        (255)
  (         t1 = H[t0+2]〈value〉 % 256)        (255)
  a= 1        (255)
  a<<= 8        (257)
  c=a        (259)
  a=*d        (260)
  a%=c        (261)
  r=a 1        (262)
  (         t2 = H[t0+1]〈addr〉 + 1)        (264)
  c= 1        (264)
  d--        (266)
  a=*d        (267)
  a+=c        (268)
  r=a 2        (269)
  (         M[t2] = t1)        (271)
  c=a        (271)
  a=r 1        (272)
  *c=a        (274)
  (                    41:   value >>= 8)        (275)
  (         H[t0+2]〈value〉 = H[t0+2]〈value〉 >> 8)        (275)
  c= 8        (275)
  d++        (277)
  a=*d        (278)
  a>>=c        (279)
  c=a        (280)
  *d=c        (281)
  (                    42:   pM[addr] = value % 256)        (282)
  (         t1 = H[t0+2]〈value〉 % 256)        (282)
  a= 1        (282)
  a<<= 8        (284)
  c=a        (286)
  a=*d        (287)
  a%=c        (288)
  r=a 1        (289)
  (         t2 = H[t0+1]〈addr〉)        (291)
  d--        (291)
  a=*d        (292)
  r=a 2        (293)
  (         M[t2] = t1)        (295)
  c=a        (295)
  a=r 1        (296)
  *c=a        (298)
  (insert return as it might not be done by the function:)        (299)
  (         t2 = H[t0]〈〉)        (299)
  d=r 0        (299)
  a=*d        (301)
  r=a 2        (302)
  (         t0 = t0 - 1)        (304)
  a=r 0        (304)
  a--        (306)
  r=a 0        (307)
  (         t0 = H[t0]〈〉)        (309)
  d=a        (309)
  a=*d        (310)
  r=a 0        (311)
  (         goto find_label_ret_id)        (313)
  lj 2354        (313)
  (         MarkTempVarEnd)        (316)
  (        :set32_pM_end~:)        (316)
  (                    45: def addr_alloc_pM〈size〉:)        (316)
  (         goto addr_alloc_pM_end~)        (316)
  lj 1419        (316)
  (        :addr_alloc_pM:)        (319)
  (         MarkTempVarStart)        (319)
  (Arg size at t0 + 1)        (319)
  (                    46:   start = 0  # each block is either of type free 〈0〉 or allocated 〈1〉, starting with 〈size0…3, type〉 <- 5)        (319)
  (         H[t0+2]〈start〉 = 0)        (319)
  a=r 0        (319)
  a+= 2        (321)
  d=a        (323)
  *d=0        (324)
  (                    47:   if get32_pM〈start〉 == 0 and pM[start+4] == 0 and get32_pM〈start+5〉 == 0 and pM[start+9] == 0:  # first run)        (325)
  (         H[t0+7]〈〉 = t0)        (325)
  a=r 0        (325)
  a+= 7        (327)
  d=a        (329)
  a=r 0        (330)
  *d=a        (332)
  (saved bsp, return id:)        (333)
  (         H[t0+8]〈〉 = 0)        (333)
  d++        (333)
  *d=0        (334)
  (push arguments:)        (335)
  (         H[t0+9]〈〉 = H[t0+2]〈start〉)        (335)
  a+= 2        (335)
  d=a        (337)
  c=*d        (338)
  a=r 0        (339)
  a+= 9        (341)
  d=a        (343)
  *d=c        (344)
  (         t0 = t0 + 8)        (345)
  c= 8        (345)
  a=r 0        (347)
  a+=c        (349)
  r=a 0        (350)
  (         goto get32_pM)        (352)
  lj 97        (352)
  (        :return_id_0:)        (355)
  (         t5 = t1)        (355)
  a=r 1        (355)
  r=a 5        (357)
  (         t4 = t5 == 0)        (359)
  c=0        (359)
  a==c        (360)
  a=0        (361)
  jf 1        (362)
  a++        (364)
  r=a 4        (365)
  (         t6 = H[t0+2]〈start〉 + 4)        (367)
  c= 4        (367)
  a=r 0        (369)
  a+= 2        (371)
  d=a        (373)
  a=*d        (374)
  a+=c        (375)
  r=a 6        (376)
  (         t5 = M[t6] == 0)        (378)
  c=0        (378)
  b=a        (379)
  a=*b        (380)
  a==c        (381)
  a=0        (382)
  jf 1        (383)
  a++        (385)
  r=a 5        (386)
  (         t3 = t4 and t5)        (388)
  c=a        (388)
  a=r 4        (389)
  a== 0        (391)
  jt 1        (393)
  a=c        (395)
  r=a 3        (396)
  (         t5 = H[t0+2]〈start〉 + 5)        (398)
  c= 5        (398)
  a=*d        (400)
  a+=c        (401)
  r=a 5        (402)
  (         H[t0+3]〈〉 = t3)        (404)
  d++        (404)
  a=r 3        (405)
  *d=a        (407)
  (         H[t0+7]〈〉 = t0)        (408)
  a=r 0        (408)
  a+= 7        (410)
  d=a        (412)
  a=r 0        (413)
  *d=a        (415)
  (saved bsp, return id:)        (416)
  (         H[t0+8]〈〉 = 1)        (416)
  d++        (416)
  *d= 1        (417)
  (push arguments:)        (419)
  (         H[t0+9]〈〉 = t5)        (419)
  d++        (419)
  a=r 5        (420)
  *d=a        (422)
  (         t0 = t0 + 8)        (423)
  c= 8        (423)
  a=r 0        (425)
  a+=c        (427)
  r=a 0        (428)
  (         goto get32_pM)        (430)
  lj 97        (430)
  (        :return_id_1:)        (433)
  (         t6 = t1)        (433)
  a=r 1        (433)
  r=a 6        (435)
  (         t3 = H[t0+3]〈〉)        (437)
  a=r 0        (437)
  a+= 3        (439)
  d=a        (441)
  a=*d        (442)
  r=a 3        (443)
  (         t4 = t6 == 0)        (445)
  c=0        (445)
  a=r 6        (446)
  a==c        (448)
  a=0        (449)
  jf 1        (450)
  a++        (452)
  r=a 4        (453)
  (         t2 = t3 and t4)        (455)
  c=a        (455)
  a=r 3        (456)
  a== 0        (458)
  jt 1        (460)
  a=c        (462)
  r=a 2        (463)
  (         t4 = H[t0+2]〈start〉 + 9)        (465)
  c= 9        (465)
  d--        (467)
  a=*d        (468)
  a+=c        (469)
  r=a 4        (470)
  (         t3 = M[t4] == 0)        (472)
  c=0        (472)
  b=a        (473)
  a=*b        (474)
  a==c        (475)
  a=0        (476)
  jf 1        (477)
  a++        (479)
  r=a 3        (480)
  (         t1 = t2 and t3)        (482)
  c=a        (482)
  a=r 2        (483)
  a== 0        (485)
  jt 1        (487)
  a=c        (489)
  r=a 1        (490)
  (         ifN t1 goto else_5)        (492)
  a== 0        (492)
  jf 3        (494)
  lj 694        (496)
  (                    48:     if len〈pM〉-start-10 < size:  # also 5 bytes for ending entry 〈0,0〉)        (499)
  (         t3 = 1024 - H[t0+2]〈start〉)        (499)
  c=*d        (499)
  a= 4        (500)
  a<<= 8        (502)
  a-=c        (504)
  r=a 3        (505)
  (         t2 = t3 - 10)        (507)
  c= 10        (507)
  a-=c        (509)
  r=a 2        (510)
  (         t1 = t2 < H[t0+1]〈size〉)        (512)
  d--        (512)
  c=*d        (513)
  a<c        (514)
  a=0        (515)
  jf 1        (516)
  a++        (518)
  r=a 1        (519)
  (         ifN t1 goto else_8)        (521)
  a== 0        (521)
  jf 3        (523)
  lj 532        (525)
  (                    49:       error〈〉)        (528)
  (         error)        (528)
  error        (528)
  (         goto endif_9)        (529)
  lj 532        (529)
  (        :else_8:)        (532)
  (        :endif_9:)        (532)
  (                    50:     set32_pM〈start, size〉)        (532)
  (         H[t0+3]〈〉 = t0)        (532)
  a=r 0        (532)
  a+= 3        (534)
  d=a        (536)
  a=r 0        (537)
  *d=a        (539)
  (saved bsp, return id:)        (540)
  (         H[t0+4]〈〉 = 2)        (540)
  d++        (540)
  *d= 2        (541)
  (push arguments:)        (543)
  (         H[t0+5]〈〉 = H[t0+2]〈start〉)        (543)
  a+= 2        (543)
  d=a        (545)
  c=*d        (546)
  a=r 0        (547)
  a+= 5        (549)
  d=a        (551)
  *d=c        (552)
  (         H[t0+6]〈〉 = H[t0+1]〈size〉)        (553)
  a=r 0        (553)
  a++        (555)
  d=a        (556)
  c=*d        (557)
  a=r 0        (558)
  a+= 6        (560)
  d=a        (562)
  *d=c        (563)
  (         t0 = t0 + 4)        (564)
  c= 4        (564)
  a=r 0        (566)
  a+=c        (568)
  r=a 0        (569)
  (         goto set32_pM)        (571)
  lj 196        (571)
  (        :return_id_2:)        (574)
  (                    51:     pM[start+4] = 1)        (574)
  (         t1 = H[t0+2]〈start〉 + 4)        (574)
  c= 4        (574)
  a=r 0        (576)
  a+= 2        (578)
  d=a        (580)
  a=*d        (581)
  a+=c        (582)
  r=a 1        (583)
  (         M[t1] = 1)        (585)
  c=a        (585)
  *c= 1        (586)
  (                    52:     set32_pM〈start+size+5, len〈pM〉-start-size-10〉)        (588)
  (         t2 = H[t0+2]〈start〉 + H[t0+1]〈size〉)        (588)
  d--        (588)
  c=*d        (589)
  d++        (590)
  a=*d        (591)
  a+=c        (592)
  r=a 2        (593)
  (         t1 = t2 + 5)        (595)
  c= 5        (595)
  a+=c        (597)
  r=a 1        (598)
  (         t4 = 1024 - H[t0+2]〈start〉)        (600)
  c=*d        (600)
  a= 4        (601)
  a<<= 8        (603)
  a-=c        (605)
  r=a 4        (606)
  (         t3 = t4 - H[t0+1]〈size〉)        (608)
  d--        (608)
  c=*d        (609)
  a-=c        (610)
  r=a 3        (611)
  (         t2 = t3 - 10)        (613)
  c= 10        (613)
  a-=c        (615)
  r=a 2        (616)
  (         H[t0+3]〈〉 = t0)        (618)
  a=r 0        (618)
  a+= 3        (620)
  d=a        (622)
  a=r 0        (623)
  *d=a        (625)
  (saved bsp, return id:)        (626)
  (         H[t0+4]〈〉 = 3)        (626)
  d++        (626)
  *d= 3        (627)
  (push arguments:)        (629)
  (         H[t0+5]〈〉 = t1)        (629)
  d++        (629)
  a=r 1        (630)
  *d=a        (632)
  (         H[t0+6]〈〉 = t2)        (633)
  d++        (633)
  a=r 2        (634)
  *d=a        (636)
  (         t0 = t0 + 4)        (637)
  c= 4        (637)
  a=r 0        (639)
  a+=c        (641)
  r=a 0        (642)
  (         goto set32_pM)        (644)
  lj 196        (644)
  (        :return_id_3:)        (647)
  (         t3 = t1)        (647)
  a=r 1        (647)
  r=a 3        (649)
  (                    53:     pM[start+size+6] = 0)        (651)
  (         t2 = H[t0+2]〈start〉 + H[t0+1]〈size〉)        (651)
  a=r 0        (651)
  a++        (653)
  d=a        (654)
  c=*d        (655)
  d++        (656)
  a=*d        (657)
  a+=c        (658)
  r=a 2        (659)
  (         t1 = t2 + 6)        (661)
  c= 6        (661)
  a+=c        (663)
  r=a 1        (664)
  (         M[t1] = 0)        (666)
  c=a        (666)
  *c=0        (667)
  (                    54:     return start+5  # return pointer to first element)        (668)
  (         t1 = H[t0+2]〈start〉 + 5)        (668)
  c= 5        (668)
  a=*d        (670)
  a+=c        (671)
  r=a 1        (672)
  (         t1 = t1)        (674)
  (         t2 = H[t0]〈〉)        (674)
  d=r 0        (674)
  a=*d        (676)
  r=a 2        (677)
  (         t0 = t0 - 1)        (679)
  a=r 0        (679)
  a--        (681)
  r=a 0        (682)
  (         t0 = H[t0]〈〉)        (684)
  d=a        (684)
  a=*d        (685)
  r=a 0        (686)
  (         goto find_label_ret_id)        (688)
  lj 2354        (688)
  (         goto endif_6)        (691)
  lj 694        (691)
  (        :else_5:)        (694)
  (        :endif_6:)        (694)
  (                    55:   pos = start)        (694)
  (         H[t0+3]〈pos〉 = H[t0+2]〈start〉)        (694)
  a=r 0        (694)
  a+= 2        (696)
  d=a        (698)
  c=*d        (699)
  d++        (700)
  *d=c        (701)
  (                    56:   while len〈pM〉-pos-10 >= size: # also needs 5 bytes for ending entry)        (702)
  (        :while_10:)        (702)
  (         t3 = 1024 - H[t0+3]〈pos〉)        (702)
  a=r 0        (702)
  a+= 3        (704)
  d=a        (706)
  c=*d        (707)
  a= 4        (708)
  a<<= 8        (710)
  a-=c        (712)
  r=a 3        (713)
  (         t2 = t3 - 10)        (715)
  c= 10        (715)
  a-=c        (717)
  r=a 2        (718)
  (         t1 = t2 >= H[t0+1]〈size〉)        (720)
  a=r 0        (720)
  a++        (722)
  d=a        (723)
  c=*d        (724)
  a=r 2        (725)
  a==c        (727)
  jt 4        (728)
  a>c        (730)
  a=0        (731)
  jf 2        (732)
  a= 1        (734)
  r=a 1        (736)
  (         ifN t1 goto whileend_12)        (738)
  a== 0        (738)
  jf 3        (740)
  lj 1401        (742)
  (                    58:     pos_size = get32_pM〈pos〉)        (745)
  (         H[t0+4]〈〉 = t0)        (745)
  a=r 0        (745)
  a+= 4        (747)
  d=a        (749)
  a=r 0        (750)
  *d=a        (752)
  (saved bsp, return id:)        (753)
  (         H[t0+5]〈〉 = 4)        (753)
  d++        (753)
  *d= 4        (754)
  (push arguments:)        (756)
  (         H[t0+6]〈〉 = H[t0+3]〈pos〉)        (756)
  a+= 3        (756)
  d=a        (758)
  c=*d        (759)
  a=r 0        (760)
  a+= 6        (762)
  d=a        (764)
  *d=c        (765)
  (         t0 = t0 + 5)        (766)
  c= 5        (766)
  a=r 0        (768)
  a+=c        (770)
  r=a 0        (771)
  (         goto get32_pM)        (773)
  lj 97        (773)
  (        :return_id_4:)        (776)
  (         H[t0+4]〈pos_size〉 = t1)        (776)
  a=r 0        (776)
  a+= 4        (778)
  d=a        (780)
  a=r 1        (781)
  *d=a        (783)
  (                    59:     if pM[pos+4] == 0 and 〈pos_size == size or 〈)        (784)
  (                    60:         pos_size > size and pos+9+pos_size < len〈pM〉 and pM[pos+9+pos_size] == 0〉 or pos_size >= size+5〉:  # found)        (784)
  (                    59:     if pM[pos+4] == 0 and 〈pos_size == size or 〈)        (784)
  (         t3 = H[t0+3]〈pos〉 + 4)        (784)
  c= 4        (784)
  d--        (786)
  a=*d        (787)
  a+=c        (788)
  r=a 3        (789)
  (         t2 = M[t3] == 0)        (791)
  c=0        (791)
  b=a        (792)
  a=*b        (793)
  a==c        (794)
  a=0        (795)
  jf 1        (796)
  a++        (798)
  r=a 2        (799)
  (                    60:         pos_size > size and pos+9+pos_size < len〈pM〉 and pM[pos+9+pos_size] == 0〉 or pos_size >= size+5〉:  # found)        (801)
  (                    59:     if pM[pos+4] == 0 and 〈pos_size == size or 〈)        (801)
  (         t5 = H[t0+4]〈pos_size〉 == H[t0+1]〈size〉)        (801)
  a=r 0        (801)
  a++        (803)
  d=a        (804)
  c=*d        (805)
  a=r 0        (806)
  a+= 4        (808)
  d=a        (810)
  a=*d        (811)
  a==c        (812)
  a=0        (813)
  jf 1        (814)
  a++        (816)
  r=a 5        (817)
  (                    60:         pos_size > size and pos+9+pos_size < len〈pM〉 and pM[pos+9+pos_size] == 0〉 or pos_size >= size+5〉:  # found)        (819)
  (         t8 = H[t0+4]〈pos_size〉 > H[t0+1]〈size〉)        (819)
  a=r 0        (819)
  a++        (821)
  d=a        (822)
  c=*d        (823)
  a=r 0        (824)
  a+= 4        (826)
  d=a        (828)
  a=*d        (829)
  a>c        (830)
  a=0        (831)
  jf 1        (832)
  a++        (834)
  r=a 8        (835)
  (         t11 = H[t0+3]〈pos〉 + 9)        (837)
  c= 9        (837)
  d--        (839)
  a=*d        (840)
  a+=c        (841)
  r=a 11        (842)
  (         t10 = t11 + H[t0+4]〈pos_size〉)        (844)
  d++        (844)
  c=*d        (845)
  a+=c        (846)
  r=a 10        (847)
  (         t9 = t10 < 1024)        (849)
  a= 4        (849)
  a<<= 8        (851)
  c=a        (853)
  a=r 10        (854)
  a<c        (856)
  a=0        (857)
  jf 1        (858)
  a++        (860)
  r=a 9        (861)
  (         t7 = t8 and t9)        (863)
  c=a        (863)
  a=r 8        (864)
  a== 0        (866)
  jt 1        (868)
  a=c        (870)
  r=a 7        (871)
  (         t10 = H[t0+3]〈pos〉 + 9)        (873)
  c= 9        (873)
  d--        (875)
  a=*d        (876)
  a+=c        (877)
  r=a 10        (878)
  (         t9 = t10 + H[t0+4]〈pos_size〉)        (880)
  d++        (880)
  c=*d        (881)
  a+=c        (882)
  r=a 9        (883)
  (         t8 = M[t9] == 0)        (885)
  c=0        (885)
  b=a        (886)
  a=*b        (887)
  a==c        (888)
  a=0        (889)
  jf 1        (890)
  a++        (892)
  r=a 8        (893)
  (         t6 = t7 and t8)        (895)
  c=a        (895)
  a=r 7        (896)
  a== 0        (898)
  jt 1        (900)
  a=c        (902)
  r=a 6        (903)
  (         t4 = t5 or t6)        (905)
  c=a        (905)
  a=r 5        (906)
  a== 0        (908)
  jf 1        (910)
  a=c        (912)
  r=a 4        (913)
  (         t6 = H[t0+1]〈size〉 + 5)        (915)
  c= 5        (915)
  a=r 0        (917)
  a++        (919)
  d=a        (920)
  a=*d        (921)
  a+=c        (922)
  r=a 6        (923)
  (         t5 = H[t0+4]〈pos_size〉 >= t6)        (925)
  c=a        (925)
  a=r 0        (926)
  a+= 4        (928)
  d=a        (930)
  a=*d        (931)
  a==c        (932)
  jt 4        (933)
  a>c        (935)
  a=0        (936)
  jf 2        (937)
  a= 1        (939)
  r=a 5        (941)
  (         t3 = t4 or t5)        (943)
  c=a        (943)
  a=r 4        (944)
  a== 0        (946)
  jf 1        (948)
  a=c        (950)
  r=a 3        (951)
  (         t1 = t2 and t3)        (953)
  c=a        (953)
  a=r 2        (954)
  a== 0        (956)
  jt 1        (958)
  a=c        (960)
  r=a 1        (961)
  (         ifN t1 goto else_20)        (963)
  a== 0        (963)
  jf 3        (965)
  lj 1381        (967)
  (                    61:       if pos_size > size: # handle rest)        (970)
  (         t1 = H[t0+4]〈pos_size〉 > H[t0+1]〈size〉)        (970)
  a=r 0        (970)
  a++        (972)
  d=a        (973)
  c=*d        (974)
  a=r 0        (975)
  a+= 4        (977)
  d=a        (979)
  a=*d        (980)
  a>c        (981)
  a=0        (982)
  jf 1        (983)
  a++        (985)
  r=a 1        (986)
  (         ifN t1 goto else_23)        (988)
  a== 0        (988)
  jf 3        (990)
  lj 1299        (992)
  (                    62:         if pos+9+pos_size < len〈pM〉 and pM[pos+9+pos_size] == 0: # merge rest with next block)        (995)
  (         t4 = H[t0+3]〈pos〉 + 9)        (995)
  c= 9        (995)
  d--        (997)
  a=*d        (998)
  a+=c        (999)
  r=a 4        (1000)
  (         t3 = t4 + H[t0+4]〈pos_size〉)        (1002)
  d++        (1002)
  c=*d        (1003)
  a+=c        (1004)
  r=a 3        (1005)
  (         t2 = t3 < 1024)        (1007)
  a= 4        (1007)
  a<<= 8        (1009)
  c=a        (1011)
  a=r 3        (1012)
  a<c        (1014)
  a=0        (1015)
  jf 1        (1016)
  a++        (1018)
  r=a 2        (1019)
  (         t5 = H[t0+3]〈pos〉 + 9)        (1021)
  c= 9        (1021)
  d--        (1023)
  a=*d        (1024)
  a+=c        (1025)
  r=a 5        (1026)
  (         t4 = t5 + H[t0+4]〈pos_size〉)        (1028)
  d++        (1028)
  c=*d        (1029)
  a+=c        (1030)
  r=a 4        (1031)
  (         t3 = M[t4] == 0)        (1033)
  c=0        (1033)
  b=a        (1034)
  a=*b        (1035)
  a==c        (1036)
  a=0        (1037)
  jf 1        (1038)
  a++        (1040)
  r=a 3        (1041)
  (         t1 = t2 and t3)        (1043)
  c=a        (1043)
  a=r 2        (1044)
  a== 0        (1046)
  jt 1        (1048)
  a=c        (1050)
  r=a 1        (1051)
  (         ifN t1 goto else_27)        (1053)
  a== 0        (1053)
  jf 3        (1055)
  lj 1208        (1057)
  (                    64:           set32_pM〈pos+5+size, pos_size-size + get32_pM〈pos+5+pos_size〉〉  # -5 〈this new free block's header〉 + 5 〈next header〉)        (1060)
  (         t2 = H[t0+3]〈pos〉 + 5)        (1060)
  c= 5        (1060)
  d--        (1062)
  a=*d        (1063)
  a+=c        (1064)
  r=a 2        (1065)
  (         t1 = t2 + H[t0+1]〈size〉)        (1067)
  a=r 0        (1067)
  a++        (1069)
  d=a        (1070)
  c=*d        (1071)
  a=r 2        (1072)
  a+=c        (1074)
  r=a 1        (1075)
  (         t3 = H[t0+4]〈pos_size〉 - H[t0+1]〈size〉)        (1077)
  c=*d        (1077)
  a=r 0        (1078)
  a+= 4        (1080)
  d=a        (1082)
  a=*d        (1083)
  a-=c        (1084)
  r=a 3        (1085)
  (         t5 = H[t0+3]〈pos〉 + 5)        (1087)
  c= 5        (1087)
  d--        (1089)
  a=*d        (1090)
  a+=c        (1091)
  r=a 5        (1092)
  (         t4 = t5 + H[t0+4]〈pos_size〉)        (1094)
  d++        (1094)
  c=*d        (1095)
  a+=c        (1096)
  r=a 4        (1097)
  (         H[t0+5]〈〉 = t1)        (1099)
  d++        (1099)
  a=r 1        (1100)
  *d=a        (1102)
  (         H[t0+6]〈〉 = t3)        (1103)
  d++        (1103)
  a=r 3        (1104)
  *d=a        (1106)
  (         H[t0+8]〈〉 = t0)        (1107)
  a=r 0        (1107)
  a+= 8        (1109)
  d=a        (1111)
  a=r 0        (1112)
  *d=a        (1114)
  (saved bsp, return id:)        (1115)
  (         H[t0+9]〈〉 = 5)        (1115)
  d++        (1115)
  *d= 5        (1116)
  (push arguments:)        (1118)
  (         H[t0+10]〈〉 = t4)        (1118)
  d++        (1118)
  a=r 4        (1119)
  *d=a        (1121)
  (         t0 = t0 + 9)        (1122)
  c= 9        (1122)
  a=r 0        (1124)
  a+=c        (1126)
  r=a 0        (1127)
  (         goto get32_pM)        (1129)
  lj 97        (1129)
  (        :return_id_5:)        (1132)
  (         t5 = t1)        (1132)
  a=r 1        (1132)
  r=a 5        (1134)
  (         t1 = H[t0+5]〈〉)        (1136)
  a=r 0        (1136)
  a+= 5        (1138)
  d=a        (1140)
  a=*d        (1141)
  r=a 1        (1142)
  (         t3 = H[t0+6]〈〉)        (1144)
  d++        (1144)
  a=*d        (1145)
  r=a 3        (1146)
  (         t2 = t3 + t5)        (1148)
  c=r 5        (1148)
  a+=c        (1150)
  r=a 2        (1151)
  (         H[t0+5]〈〉 = t0)        (1153)
  d--        (1153)
  a=r 0        (1154)
  *d=a        (1156)
  (saved bsp, return id:)        (1157)
  (         H[t0+6]〈〉 = 6)        (1157)
  d++        (1157)
  *d= 6        (1158)
  (push arguments:)        (1160)
  (         H[t0+7]〈〉 = t1)        (1160)
  d++        (1160)
  a=r 1        (1161)
  *d=a        (1163)
  (         H[t0+8]〈〉 = t2)        (1164)
  d++        (1164)
  a=r 2        (1165)
  *d=a        (1167)
  (         t0 = t0 + 6)        (1168)
  c= 6        (1168)
  a=r 0        (1170)
  a+=c        (1172)
  r=a 0        (1173)
  (         goto set32_pM)        (1175)
  lj 196        (1175)
  (        :return_id_6:)        (1178)
  (         t3 = t1)        (1178)
  a=r 1        (1178)
  r=a 3        (1180)
  (                    65:           pM[pos+9+size] = 0)        (1182)
  (         t2 = H[t0+3]〈pos〉 + 9)        (1182)
  c= 9        (1182)
  a=r 0        (1184)
  a+= 3        (1186)
  d=a        (1188)
  a=*d        (1189)
  a+=c        (1190)
  r=a 2        (1191)
  (         t1 = t2 + H[t0+1]〈size〉)        (1193)
  a=r 0        (1193)
  a++        (1195)
  d=a        (1196)
  c=*d        (1197)
  a=r 2        (1198)
  a+=c        (1200)
  r=a 1        (1201)
  (         M[t1] = 0)        (1203)
  c=a        (1203)
  *c=0        (1204)
  (         goto endif_28)        (1205)
  lj 1296        (1205)
  (        :else_27:)        (1208)
  (                    67:           set32_pM〈pos+5+size, pos_size-size-5〉  # 5 is this free block's header)        (1208)
  (         t2 = H[t0+3]〈pos〉 + 5)        (1208)
  c= 5        (1208)
  a=r 0        (1210)
  a+= 3        (1212)
  d=a        (1214)
  a=*d        (1215)
  a+=c        (1216)
  r=a 2        (1217)
  (         t1 = t2 + H[t0+1]〈size〉)        (1219)
  a=r 0        (1219)
  a++        (1221)
  d=a        (1222)
  c=*d        (1223)
  a=r 2        (1224)
  a+=c        (1226)
  r=a 1        (1227)
  (         t3 = H[t0+4]〈pos_size〉 - H[t0+1]〈size〉)        (1229)
  c=*d        (1229)
  a=r 0        (1230)
  a+= 4        (1232)
  d=a        (1234)
  a=*d        (1235)
  a-=c        (1236)
  r=a 3        (1237)
  (         t2 = t3 - 5)        (1239)
  c= 5        (1239)
  a-=c        (1241)
  r=a 2        (1242)
  (         H[t0+5]〈〉 = t0)        (1244)
  d++        (1244)
  a=r 0        (1245)
  *d=a        (1247)
  (saved bsp, return id:)        (1248)
  (         H[t0+6]〈〉 = 7)        (1248)
  d++        (1248)
  *d= 7        (1249)
  (push arguments:)        (1251)
  (         H[t0+7]〈〉 = t1)        (1251)
  d++        (1251)
  a=r 1        (1252)
  *d=a        (1254)
  (         H[t0+8]〈〉 = t2)        (1255)
  d++        (1255)
  a=r 2        (1256)
  *d=a        (1258)
  (         t0 = t0 + 6)        (1259)
  c= 6        (1259)
  a=r 0        (1261)
  a+=c        (1263)
  r=a 0        (1264)
  (         goto set32_pM)        (1266)
  lj 196        (1266)
  (        :return_id_7:)        (1269)
  (         t3 = t1)        (1269)
  a=r 1        (1269)
  r=a 3        (1271)
  (                    68:           pM[pos+9+size] = 0)        (1273)
  (         t2 = H[t0+3]〈pos〉 + 9)        (1273)
  c= 9        (1273)
  a=r 0        (1275)
  a+= 3        (1277)
  d=a        (1279)
  a=*d        (1280)
  a+=c        (1281)
  r=a 2        (1282)
  (         t1 = t2 + H[t0+1]〈size〉)        (1284)
  a=r 0        (1284)
  a++        (1286)
  d=a        (1287)
  c=*d        (1288)
  a=r 2        (1289)
  a+=c        (1291)
  r=a 1        (1292)
  (         M[t1] = 0)        (1294)
  c=a        (1294)
  *c=0        (1295)
  (        :endif_28:)        (1296)
  (         goto endif_24)        (1296)
  lj 1299        (1296)
  (        :else_23:)        (1299)
  (        :endif_24:)        (1299)
  (                    69:       set32_pM〈pos, size〉)        (1299)
  (         H[t0+5]〈〉 = t0)        (1299)
  a=r 0        (1299)
  a+= 5        (1301)
  d=a        (1303)
  a=r 0        (1304)
  *d=a        (1306)
  (saved bsp, return id:)        (1307)
  (         H[t0+6]〈〉 = 8)        (1307)
  d++        (1307)
  *d= 8        (1308)
  (push arguments:)        (1310)
  (         H[t0+7]〈〉 = H[t0+3]〈pos〉)        (1310)
  a+= 3        (1310)
  d=a        (1312)
  c=*d        (1313)
  a=r 0        (1314)
  a+= 7        (1316)
  d=a        (1318)
  *d=c        (1319)
  (         H[t0+8]〈〉 = H[t0+1]〈size〉)        (1320)
  a=r 0        (1320)
  a++        (1322)
  d=a        (1323)
  c=*d        (1324)
  a=r 0        (1325)
  a+= 8        (1327)
  d=a        (1329)
  *d=c        (1330)
  (         t0 = t0 + 6)        (1331)
  c= 6        (1331)
  a=r 0        (1333)
  a+=c        (1335)
  r=a 0        (1336)
  (         goto set32_pM)        (1338)
  lj 196        (1338)
  (        :return_id_8:)        (1341)
  (                    70:       pM[pos+4] = 1  # allocated)        (1341)
  (         t1 = H[t0+3]〈pos〉 + 4)        (1341)
  c= 4        (1341)
  a=r 0        (1343)
  a+= 3        (1345)
  d=a        (1347)
  a=*d        (1348)
  a+=c        (1349)
  r=a 1        (1350)
  (         M[t1] = 1)        (1352)
  c=a        (1352)
  *c= 1        (1353)
  (                    71:       return pos+5  # return pointer to first element)        (1355)
  (         t1 = H[t0+3]〈pos〉 + 5)        (1355)
  c= 5        (1355)
  a=*d        (1357)
  a+=c        (1358)
  r=a 1        (1359)
  (         t1 = t1)        (1361)
  (         t2 = H[t0]〈〉)        (1361)
  d=r 0        (1361)
  a=*d        (1363)
  r=a 2        (1364)
  (         t0 = t0 - 1)        (1366)
  a=r 0        (1366)
  a--        (1368)
  r=a 0        (1369)
  (         t0 = H[t0]〈〉)        (1371)
  d=a        (1371)
  a=*d        (1372)
  r=a 0        (1373)
  (         goto find_label_ret_id)        (1375)
  lj 2354        (1375)
  (         goto endif_21)        (1378)
  lj 1381        (1378)
  (        :else_20:)        (1381)
  (        :endif_21:)        (1381)
  (                    73:     pos += 5 + pos_size)        (1381)
  (         t1 = 5 + H[t0+4]〈pos_size〉)        (1381)
  a=r 0        (1381)
  a+= 4        (1383)
  d=a        (1385)
  c=*d        (1386)
  a= 5        (1387)
  a+=c        (1389)
  r=a 1        (1390)
  (         H[t0+3]〈pos〉 = H[t0+3]〈pos〉 + t1)        (1392)
  c=a        (1392)
  d--        (1393)
  a=*d        (1394)
  a+=c        (1395)
  c=a        (1396)
  *d=c        (1397)
  (         goto while_10)        (1398)
  lj 702        (1398)
  (        :whileend_12:)        (1401)
  (                    74:   error〈〉)        (1401)
  (         error)        (1401)
  error        (1401)
  (insert return as it might not be done by the function:)        (1402)
  (         t2 = H[t0]〈〉)        (1402)
  d=r 0        (1402)
  a=*d        (1404)
  r=a 2        (1405)
  (         t0 = t0 - 1)        (1407)
  a=r 0        (1407)
  a--        (1409)
  r=a 0        (1410)
  (         t0 = H[t0]〈〉)        (1412)
  d=a        (1412)
  a=*d        (1413)
  r=a 0        (1414)
  (         goto find_label_ret_id)        (1416)
  lj 2354        (1416)
  (         MarkTempVarEnd)        (1419)
  (        :addr_alloc_pM_end~:)        (1419)
  (                    78: def addr_alloc_pH〈size〉:)        (1419)
  (                    108: def addr_alloc_hH〈size〉:)        (1419)
  (                    137: def addr_alloc_hM〈size〉:)        (1419)
  (                    169: def addr_free_pM〈addr〉:)        (1419)
  (         goto addr_free_pM_end~)        (1419)
  lj 1922        (1419)
  (        :addr_free_pM:)        (1422)
  (         MarkTempVarStart)        (1422)
  (Arg addr at t0 + 1)        (1422)
  (                    170:   last_free = NONE)        (1422)
  (         H[t0+2]〈last_free〉 = 4294967295)        (1422)
  a=r 0        (1422)
  a+= 2        (1424)
  d=a        (1426)
  *d=0        (1427)
  *d--        (1428)
  (                    171:   pos = 0  # 0 is start)        (1429)
  (         H[t0+3]〈pos〉 = 0)        (1429)
  d++        (1429)
  *d=0        (1430)
  (                    172:   addr -= 5  # addr showed to first element, not block start)        (1431)
  (         H[t0+1]〈addr〉 = H[t0+1]〈addr〉 - 5)        (1431)
  c= 5        (1431)
  a=r 0        (1433)
  a++        (1435)
  d=a        (1436)
  a=*d        (1437)
  a-=c        (1438)
  c=a        (1439)
  *d=c        (1440)
  (                    173:   pM[addr+4] = 0  # free)        (1441)
  (         t1 = H[t0+1]〈addr〉 + 4)        (1441)
  c= 4        (1441)
  a=*d        (1443)
  a+=c        (1444)
  r=a 1        (1445)
  (         M[t1] = 0)        (1447)
  c=a        (1447)
  *c=0        (1448)
  (                    174:   while pos < addr:)        (1449)
  (        :while_113:)        (1449)
  (         t1 = H[t0+3]〈pos〉 < H[t0+1]〈addr〉)        (1449)
  a=r 0        (1449)
  a++        (1451)
  d=a        (1452)
  c=*d        (1453)
  a=r 0        (1454)
  a+= 3        (1456)
  d=a        (1458)
  a=*d        (1459)
  a<c        (1460)
  a=0        (1461)
  jf 1        (1462)
  a++        (1464)
  r=a 1        (1465)
  (         ifN t1 goto whileend_115)        (1467)
  a== 0        (1467)
  jf 3        (1469)
  lj 1564        (1471)
  (                    175:     if pM[pos+4] == 0:  # of type 'free'?)        (1474)
  (         t2 = H[t0+3]〈pos〉 + 4)        (1474)
  c= 4        (1474)
  a=*d        (1476)
  a+=c        (1477)
  r=a 2        (1478)
  (         t1 = M[t2] == 0)        (1480)
  c=0        (1480)
  b=a        (1481)
  a=*b        (1482)
  a==c        (1483)
  a=0        (1484)
  jf 1        (1485)
  a++        (1487)
  r=a 1        (1488)
  (         ifN t1 goto else_118)        (1490)
  a== 0        (1490)
  jf 3        (1492)
  lj 1503        (1494)
  (                    176:       last_free = pos)        (1497)
  (         H[t0+2]〈last_free〉 = H[t0+3]〈pos〉)        (1497)
  c=*d        (1497)
  d--        (1498)
  *d=c        (1499)
  (         goto endif_119)        (1500)
  lj 1510        (1500)
  (        :else_118:)        (1503)
  (                    178:       last_free = NONE)        (1503)
  (         H[t0+2]〈last_free〉 = 4294967295)        (1503)
  a=r 0        (1503)
  a+= 2        (1505)
  d=a        (1507)
  *d=0        (1508)
  *d--        (1509)
  (        :endif_119:)        (1510)
  (                    179:     pos += 5 + get32_pM〈pos〉)        (1510)
  (         H[t0+5]〈〉 = t0)        (1510)
  a=r 0        (1510)
  a+= 5        (1512)
  d=a        (1514)
  a=r 0        (1515)
  *d=a        (1517)
  (saved bsp, return id:)        (1518)
  (         H[t0+6]〈〉 = 18)        (1518)
  d++        (1518)
  *d= 18        (1519)
  (push arguments:)        (1521)
  (         H[t0+7]〈〉 = H[t0+3]〈pos〉)        (1521)
  a+= 3        (1521)
  d=a        (1523)
  c=*d        (1524)
  a=r 0        (1525)
  a+= 7        (1527)
  d=a        (1529)
  *d=c        (1530)
  (         t0 = t0 + 6)        (1531)
  c= 6        (1531)
  a=r 0        (1533)
  a+=c        (1535)
  r=a 0        (1536)
  (         goto get32_pM)        (1538)
  lj 97        (1538)
  (        :return_id_18:)        (1541)
  (         t2 = t1)        (1541)
  a=r 1        (1541)
  r=a 2        (1543)
  (         t1 = 5 + t2)        (1545)
  c=a        (1545)
  a= 5        (1546)
  a+=c        (1548)
  r=a 1        (1549)
  (         H[t0+3]〈pos〉 = H[t0+3]〈pos〉 + t1)        (1551)
  c=a        (1551)
  a=r 0        (1552)
  a+= 3        (1554)
  d=a        (1556)
  a=*d        (1557)
  a+=c        (1558)
  c=a        (1559)
  *d=c        (1560)
  (         goto while_113)        (1561)
  lj 1449        (1561)
  (        :whileend_115:)        (1564)
  (                    181:   addr_size = get32_pM〈addr〉)        (1564)
  (         H[t0+4]〈〉 = t0)        (1564)
  a=r 0        (1564)
  a+= 4        (1566)
  d=a        (1568)
  a=r 0        (1569)
  *d=a        (1571)
  (saved bsp, return id:)        (1572)
  (         H[t0+5]〈〉 = 19)        (1572)
  d++        (1572)
  *d= 19        (1573)
  (push arguments:)        (1575)
  (         H[t0+6]〈〉 = H[t0+1]〈addr〉)        (1575)
  a++        (1575)
  d=a        (1576)
  c=*d        (1577)
  a=r 0        (1578)
  a+= 6        (1580)
  d=a        (1582)
  *d=c        (1583)
  (         t0 = t0 + 5)        (1584)
  c= 5        (1584)
  a=r 0        (1586)
  a+=c        (1588)
  r=a 0        (1589)
  (         goto get32_pM)        (1591)
  lj 97        (1591)
  (        :return_id_19:)        (1594)
  (         H[t0+4]〈addr_size〉 = t1)        (1594)
  a=r 0        (1594)
  a+= 4        (1596)
  d=a        (1598)
  a=r 1        (1599)
  *d=a        (1601)
  (                    182:   if addr+9+addr_size < len〈pM〉 and pM[addr+9+addr_size] == 0: # merge with next block)        (1602)
  (         t4 = H[t0+1]〈addr〉 + 9)        (1602)
  c= 9        (1602)
  a=r 0        (1604)
  a++        (1606)
  d=a        (1607)
  a=*d        (1608)
  a+=c        (1609)
  r=a 4        (1610)
  (         t3 = t4 + H[t0+4]〈addr_size〉)        (1612)
  a=r 0        (1612)
  a+= 4        (1614)
  d=a        (1616)
  c=*d        (1617)
  a=r 4        (1618)
  a+=c        (1620)
  r=a 3        (1621)
  (         t2 = t3 < 1024)        (1623)
  a= 4        (1623)
  a<<= 8        (1625)
  c=a        (1627)
  a=r 3        (1628)
  a<c        (1630)
  a=0        (1631)
  jf 1        (1632)
  a++        (1634)
  r=a 2        (1635)
  (         t5 = H[t0+1]〈addr〉 + 9)        (1637)
  c= 9        (1637)
  a=r 0        (1639)
  a++        (1641)
  d=a        (1642)
  a=*d        (1643)
  a+=c        (1644)
  r=a 5        (1645)
  (         t4 = t5 + H[t0+4]〈addr_size〉)        (1647)
  a=r 0        (1647)
  a+= 4        (1649)
  d=a        (1651)
  c=*d        (1652)
  a=r 5        (1653)
  a+=c        (1655)
  r=a 4        (1656)
  (         t3 = M[t4] == 0)        (1658)
  c=0        (1658)
  b=a        (1659)
  a=*b        (1660)
  a==c        (1661)
  a=0        (1662)
  jf 1        (1663)
  a++        (1665)
  r=a 3        (1666)
  (         t1 = t2 and t3)        (1668)
  c=a        (1668)
  a=r 2        (1669)
  a== 0        (1671)
  jt 1        (1673)
  a=c        (1675)
  r=a 1        (1676)
  (         ifN t1 goto else_122)        (1678)
  a== 0        (1678)
  jf 3        (1680)
  lj 1794        (1682)
  (                    184:     set32_pM〈addr, addr_size + 5 + get32_pM〈addr+5+addr_size〉〉 # + 5 is header)        (1685)
  (         t2 = H[t0+4]〈addr_size〉 + 5)        (1685)
  c= 5        (1685)
  a=*d        (1687)
  a+=c        (1688)
  r=a 2        (1689)
  (         t4 = H[t0+1]〈addr〉 + 5)        (1691)
  c= 5        (1691)
  a=r 0        (1693)
  a++        (1695)
  d=a        (1696)
  a=*d        (1697)
  a+=c        (1698)
  r=a 4        (1699)
  (         t3 = t4 + H[t0+4]〈addr_size〉)        (1701)
  a=r 0        (1701)
  a+= 4        (1703)
  d=a        (1705)
  c=*d        (1706)
  a=r 4        (1707)
  a+=c        (1709)
  r=a 3        (1710)
  (         H[t0+5]〈〉 = t2)        (1712)
  d++        (1712)
  a=r 2        (1713)
  *d=a        (1715)
  (         H[t0+7]〈〉 = t0)        (1716)
  a=r 0        (1716)
  a+= 7        (1718)
  d=a        (1720)
  a=r 0        (1721)
  *d=a        (1723)
  (saved bsp, return id:)        (1724)
  (         H[t0+8]〈〉 = 20)        (1724)
  d++        (1724)
  *d= 20        (1725)
  (push arguments:)        (1727)
  (         H[t0+9]〈〉 = t3)        (1727)
  d++        (1727)
  a=r 3        (1728)
  *d=a        (1730)
  (         t0 = t0 + 8)        (1731)
  c= 8        (1731)
  a=r 0        (1733)
  a+=c        (1735)
  r=a 0        (1736)
  (         goto get32_pM)        (1738)
  lj 97        (1738)
  (        :return_id_20:)        (1741)
  (         t4 = t1)        (1741)
  a=r 1        (1741)
  r=a 4        (1743)
  (         t2 = H[t0+5]〈〉)        (1745)
  a=r 0        (1745)
  a+= 5        (1747)
  d=a        (1749)
  a=*d        (1750)
  r=a 2        (1751)
  (         t1 = t2 + t4)        (1753)
  c=r 4        (1753)
  a+=c        (1755)
  r=a 1        (1756)
  (         H[t0+5]〈〉 = t0)        (1758)
  a=r 0        (1758)
  *d=a        (1760)
  (saved bsp, return id:)        (1761)
  (         H[t0+6]〈〉 = 21)        (1761)
  d++        (1761)
  *d= 21        (1762)
  (push arguments:)        (1764)
  (         H[t0+7]〈〉 = H[t0+1]〈addr〉)        (1764)
  a++        (1764)
  d=a        (1765)
  c=*d        (1766)
  a=r 0        (1767)
  a+= 7        (1769)
  d=a        (1771)
  *d=c        (1772)
  (         H[t0+8]〈〉 = t1)        (1773)
  d++        (1773)
  a=r 1        (1774)
  *d=a        (1776)
  (         t0 = t0 + 6)        (1777)
  c= 6        (1777)
  a=r 0        (1779)
  a+=c        (1781)
  r=a 0        (1782)
  (         goto set32_pM)        (1784)
  lj 196        (1784)
  (        :return_id_21:)        (1787)
  (         t2 = t1)        (1787)
  a=r 1        (1787)
  r=a 2        (1789)
  (         goto endif_123)        (1791)
  lj 1794        (1791)
  (        :else_122:)        (1794)
  (        :endif_123:)        (1794)
  (                    186:   if last_free != NONE:)        (1794)
  (         t1 = H[t0+2]〈last_free〉 != 4294967295)        (1794)
  c=0        (1794)
  c--        (1795)
  a=r 0        (1796)
  a+= 2        (1798)
  d=a        (1800)
  a=*d        (1801)
  a==c        (1802)
  a=0        (1803)
  jt 1        (1804)
  a++        (1806)
  r=a 1        (1807)
  (         ifN t1 goto else_125)        (1809)
  a== 0        (1809)
  jf 3        (1811)
  lj 1905        (1813)
  (                    188:     set32_pM〈last_free, get32_pM〈last_free〉 + 5 + addr_size〉  # + 5 is header)        (1816)
  (         H[t0+7]〈〉 = t0)        (1816)
  a=r 0        (1816)
  a+= 7        (1818)
  d=a        (1820)
  a=r 0        (1821)
  *d=a        (1823)
  (saved bsp, return id:)        (1824)
  (         H[t0+8]〈〉 = 22)        (1824)
  d++        (1824)
  *d= 22        (1825)
  (push arguments:)        (1827)
  (         H[t0+9]〈〉 = H[t0+2]〈last_free〉)        (1827)
  a+= 2        (1827)
  d=a        (1829)
  c=*d        (1830)
  a=r 0        (1831)
  a+= 9        (1833)
  d=a        (1835)
  *d=c        (1836)
  (         t0 = t0 + 8)        (1837)
  c= 8        (1837)
  a=r 0        (1839)
  a+=c        (1841)
  r=a 0        (1842)
  (         goto get32_pM)        (1844)
  lj 97        (1844)
  (        :return_id_22:)        (1847)
  (         t3 = t1)        (1847)
  a=r 1        (1847)
  r=a 3        (1849)
  (         t2 = t3 + 5)        (1851)
  c= 5        (1851)
  a+=c        (1853)
  r=a 2        (1854)
  (         t1 = t2 + H[t0+4]〈addr_size〉)        (1856)
  a=r 0        (1856)
  a+= 4        (1858)
  d=a        (1860)
  c=*d        (1861)
  a=r 2        (1862)
  a+=c        (1864)
  r=a 1        (1865)
  (         H[t0+5]〈〉 = t0)        (1867)
  d++        (1867)
  a=r 0        (1868)
  *d=a        (1870)
  (saved bsp, return id:)        (1871)
  (         H[t0+6]〈〉 = 23)        (1871)
  d++        (1871)
  *d= 23        (1872)
  (push arguments:)        (1874)
  (         H[t0+7]〈〉 = H[t0+2]〈last_free〉)        (1874)
  a+= 2        (1874)
  d=a        (1876)
  c=*d        (1877)
  a=r 0        (1878)
  a+= 7        (1880)
  d=a        (1882)
  *d=c        (1883)
  (         H[t0+8]〈〉 = t1)        (1884)
  d++        (1884)
  a=r 1        (1885)
  *d=a        (1887)
  (         t0 = t0 + 6)        (1888)
  c= 6        (1888)
  a=r 0        (1890)
  a+=c        (1892)
  r=a 0        (1893)
  (         goto set32_pM)        (1895)
  lj 196        (1895)
  (        :return_id_23:)        (1898)
  (         t2 = t1)        (1898)
  a=r 1        (1898)
  r=a 2        (1900)
  (         goto endif_126)        (1902)
  lj 1905        (1902)
  (        :else_125:)        (1905)
  (        :endif_126:)        (1905)
  (insert return as it might not be done by the function:)        (1905)
  (         t2 = H[t0]〈〉)        (1905)
  d=r 0        (1905)
  a=*d        (1907)
  r=a 2        (1908)
  (         t0 = t0 - 1)        (1910)
  a=r 0        (1910)
  a--        (1912)
  r=a 0        (1913)
  (         t0 = H[t0]〈〉)        (1915)
  d=a        (1915)
  a=*d        (1916)
  r=a 0        (1917)
  (         goto find_label_ret_id)        (1919)
  lj 2354        (1919)
  (         MarkTempVarEnd)        (1922)
  (        :addr_free_pM_end~:)        (1922)
  (                    191: def addr_free_pH〈addr〉:  # expects a valid reference to a used block)        (1922)
  (                    212: def addr_free_hH〈addr〉:  # expects a valid reference to a used block)        (1922)
  (                    232: def addr_free_hM〈addr〉:)        (1922)
  (                    254: pass)        (1922)
  (                    402: i_x = 0)        (1922)
  (         H[t0+1]〈i_x〉 = 0)        (1922)
  a=r 0        (1922)
  a++        (1924)
  d=a        (1925)
  *d=0        (1926)
  (                    403: old_v = NONE)        (1927)
  (         H[t0+2]〈old_v〉 = 4294967295)        (1927)
  d++        (1927)
  *d=0        (1928)
  *d--        (1929)
  (                    404: old_n = NONE)        (1930)
  (         H[t0+3]〈old_n〉 = 4294967295)        (1930)
  d++        (1930)
  *d=0        (1931)
  *d--        (1932)
  (                    405: def pcomp〈c〉:)        (1933)
  (         goto pcomp_end~)        (1933)
  lj 2323        (1933)
  (        :pcomp:)        (1936)
  (         MarkTempVarStart)        (1936)
  (Arg c at t0 + 1)        (1936)
  (                    406:   global i_x, old_v, old_n)        (1936)
  (Global i_x via H[t252+1])        (1936)
  (Global old_v via H[t252+2])        (1936)
  (Global old_n via H[t252+3])        (1936)
  (                    407:   varray = NONE)        (1936)
  (         H[t0+2]〈varray〉 = 4294967295)        (1936)
  a=r 0        (1936)
  a+= 2        (1938)
  d=a        (1940)
  *d=0        (1941)
  *d--        (1942)
  (                    409:   i_x += 1)        (1943)
  (         H[t252+1]〈i_x〉 = H[t252+1]〈i_x〉 + 1)        (1943)
  a=r 252        (1943)
  a++        (1945)
  d=a        (1946)
  *d++        (1947)
  (                    410:   i_x %= 256)        (1948)
  (         H[t252+1]〈i_x〉 = H[t252+1]〈i_x〉 % 256)        (1948)
  a= 1        (1948)
  a<<= 8        (1950)
  c=a        (1952)
  a=*d        (1953)
  a%=c        (1954)
  c=a        (1955)
  *d=c        (1956)
  (                    412:   rr = 〈i_x + 7〉*13 % 160)        (1957)
  (         t3 = H[t252+1]〈i_x〉 + 7)        (1957)
  c= 7        (1957)
  a=*d        (1959)
  a+=c        (1960)
  r=a 3        (1961)
  (         t2 = t3 * 13)        (1963)
  c= 13        (1963)
  a*=c        (1965)
  r=a 2        (1966)
  (         t1 = t2 % 160)        (1968)
  c= 160        (1968)
  a%=c        (1970)
  r=a 1        (1971)
  (         H[t0+3]〈rr〉 = t1)        (1973)
  a=r 0        (1973)
  a+= 3        (1975)
  d=a        (1977)
  a=r 1        (1978)
  *d=a        (1980)
  (                    414:   varray = alloc_pM〈rr〉)        (1981)
  (         H[t0+4]〈〉 = t0)        (1981)
  d++        (1981)
  a=r 0        (1982)
  *d=a        (1984)
  (saved bsp, return id:)        (1985)
  (         H[t0+5]〈〉 = 30)        (1985)
  d++        (1985)
  *d= 30        (1986)
  (push arguments:)        (1988)
  (         H[t0+6]〈〉 = H[t0+3]〈rr〉)        (1988)
  a+= 3        (1988)
  d=a        (1990)
  c=*d        (1991)
  a=r 0        (1992)
  a+= 6        (1994)
  d=a        (1996)
  *d=c        (1997)
  (         t0 = t0 + 5)        (1998)
  c= 5        (1998)
  a=r 0        (2000)
  a+=c        (2002)
  r=a 0        (2003)
  (         goto addr_alloc_pM)        (2005)
  lj 319        (2005)
  (        :return_id_30:)        (2008)
  (         t1 = t1 | 2147483648)        (2008)
  a= 1        (2008)
  a<<= 31        (2010)
  c=a        (2012)
  a=r 1        (2013)
  a|=c        (2015)
  r=a 1        (2016)
  (         H[t0+2]〈varray〉 = t1)        (2018)
  a=r 0        (2018)
  a+= 2        (2020)
  d=a        (2022)
  a=r 1        (2023)
  *d=a        (2025)
  (                    416:   if old_v != NONE:)        (2026)
  (         t1 = H[t252+2]〈old_v〉 != 4294967295)        (2026)
  c=0        (2026)
  c--        (2027)
  a=r 252        (2028)
  a+= 2        (2030)
  d=a        (2032)
  a=*d        (2033)
  a==c        (2034)
  a=0        (2035)
  jt 1        (2036)
  a++        (2038)
  r=a 1        (2039)
  (         ifN t1 goto else_170)        (2041)
  a== 0        (2041)
  jf 3        (2043)
  lj 2089        (2045)
  (                    418:     free_pM〈old_v〉)        (2048)
  (         t1 = H[t252+2]〈old_v〉 & 2147483647)        (2048)
  a=0        (2048)
  a--        (2049)
  a>>= 1        (2050)
  c=a        (2052)
  a=*d        (2053)
  a&=c        (2054)
  r=a 1        (2055)
  (         H[t0+4]〈〉 = t0)        (2057)
  a=r 0        (2057)
  a+= 4        (2059)
  d=a        (2061)
  a=r 0        (2062)
  *d=a        (2064)
  (saved bsp, return id:)        (2065)
  (         H[t0+5]〈〉 = 31)        (2065)
  d++        (2065)
  *d= 31        (2066)
  (push arguments:)        (2068)
  (         H[t0+6]〈〉 = t1)        (2068)
  d++        (2068)
  a=r 1        (2069)
  *d=a        (2071)
  (         t0 = t0 + 5)        (2072)
  c= 5        (2072)
  a=r 0        (2074)
  a+=c        (2076)
  r=a 0        (2077)
  (         goto addr_free_pM)        (2079)
  lj 1422        (2079)
  (        :return_id_31:)        (2082)
  (         t2 = t1)        (2082)
  a=r 1        (2082)
  r=a 2        (2084)
  (         goto endif_171)        (2086)
  lj 2089        (2086)
  (        :else_170:)        (2089)
  (        :endif_171:)        (2089)
  (                    419:   old_v = old_n)        (2089)
  (         H[t252+2]〈old_v〉 = H[t252+3]〈old_n〉)        (2089)
  a=r 252        (2089)
  a+= 3        (2091)
  d=a        (2093)
  c=*d        (2094)
  d--        (2095)
  *d=c        (2096)
  (                    420:   old_n = varray)        (2097)
  (         H[t252+3]〈old_n〉 = H[t0+2]〈varray〉)        (2097)
  a=r 0        (2097)
  a+= 2        (2099)
  d=a        (2101)
  c=*d        (2102)
  a=r 252        (2103)
  a+= 3        (2105)
  d=a        (2107)
  *d=c        (2108)
  (                    422:   i = 0)        (2109)
  (         H[t0+4]〈i〉 = 0)        (2109)
  a=r 0        (2109)
  a+= 4        (2111)
  d=a        (2113)
  *d=0        (2114)
  (                    423:   while i < len_pM〈varray〉:)        (2115)
  (        :while_172:)        (2115)
  (         t2 = H[t0+2]〈varray〉)        (2115)
  a=r 0        (2115)
  a+= 2        (2117)
  d=a        (2119)
  a=*d        (2120)
  r=a 2        (2121)
  (         t2 = t2 & 2147483647)        (2123)
  a=0        (2123)
  a--        (2124)
  a>>= 1        (2125)
  c=a        (2127)
  a=r 2        (2128)
  a&=c        (2130)
  r=a 2        (2131)
  (         t2 = t2 - 5)        (2133)
  c= 5        (2133)
  a-=c        (2135)
  r=a 2        (2136)
  (         t3 = M[t2] << 8)        (2138)
  c= 8        (2138)
  b=a        (2140)
  a=*b        (2141)
  a<<=c        (2142)
  r=a 3        (2143)
  (         t2 = t2 + 1)        (2145)
  a=r 2        (2145)
  a++        (2147)
  r=a 2        (2148)
  (         t3 = t3 + M[t2])        (2150)
  b=a        (2150)
  c=*b        (2151)
  a=r 3        (2152)
  a+=c        (2154)
  r=a 3        (2155)
  (         t3 = t3 << 8)        (2157)
  c= 8        (2157)
  a<<=c        (2159)
  r=a 3        (2160)
  (         t2 = t2 + 1)        (2162)
  a=r 2        (2162)
  a++        (2164)
  r=a 2        (2165)
  (         t3 = t3 + M[t2])        (2167)
  b=a        (2167)
  c=*b        (2168)
  a=r 3        (2169)
  a+=c        (2171)
  r=a 3        (2172)
  (         t3 = t3 << 8)        (2174)
  c= 8        (2174)
  a<<=c        (2176)
  r=a 3        (2177)
  (         t2 = t2 + 1)        (2179)
  a=r 2        (2179)
  a++        (2181)
  r=a 2        (2182)
  (         t3 = t3 + M[t2])        (2184)
  b=a        (2184)
  c=*b        (2185)
  a=r 3        (2186)
  a+=c        (2188)
  r=a 3        (2189)
  (         t1 = H[t0+4]〈i〉 < t3)        (2191)
  c=a        (2191)
  a=r 0        (2192)
  a+= 4        (2194)
  d=a        (2196)
  a=*d        (2197)
  a<c        (2198)
  a=0        (2199)
  jf 1        (2200)
  a++        (2202)
  r=a 1        (2203)
  (         ifN t1 goto whileend_174)        (2205)
  a== 0        (2205)
  jf 3        (2207)
  lj 2306        (2209)
  (                    424:       varray[i] = i_x)        (2212)
  (         t1 = H[t0+2]〈varray〉 & 2147483647)        (2212)
  a=0        (2212)
  a--        (2213)
  a>>= 1        (2214)
  c=a        (2216)
  a=r 0        (2217)
  a+= 2        (2219)
  d=a        (2221)
  a=*d        (2222)
  a&=c        (2223)
  r=a 1        (2224)
  (         t1 = t1 + H[t0+4]〈i〉)        (2226)
  a=r 0        (2226)
  a+= 4        (2228)
  d=a        (2230)
  c=*d        (2231)
  a=r 1        (2232)
  a+=c        (2234)
  r=a 1        (2235)
  (         M[t1] = H[t252+1]〈i_x〉)        (2237)
  c=a        (2237)
  a=r 252        (2238)
  a++        (2240)
  d=a        (2241)
  *c=*d        (2242)
  (                    425:       if varray[i] != i_x:)        (2243)
  (         t2 = H[t0+2]〈varray〉 & 2147483647)        (2243)
  a=0        (2243)
  a--        (2244)
  a>>= 1        (2245)
  c=a        (2247)
  a=r 0        (2248)
  a+= 2        (2250)
  d=a        (2252)
  a=*d        (2253)
  a&=c        (2254)
  r=a 2        (2255)
  (         t2 = t2 + H[t0+4]〈i〉)        (2257)
  a=r 0        (2257)
  a+= 4        (2259)
  d=a        (2261)
  c=*d        (2262)
  a=r 2        (2263)
  a+=c        (2265)
  r=a 2        (2266)
  (         t2 = M[t2])        (2268)
  b=a        (2268)
  a=*b        (2269)
  r=a 2        (2270)
  (         t1 = t2 != H[t252+1]〈i_x〉)        (2272)
  a=r 252        (2272)
  a++        (2274)
  d=a        (2275)
  c=*d        (2276)
  a=r 2        (2277)
  a==c        (2279)
  a=0        (2280)
  jt 1        (2281)
  a++        (2283)
  r=a 1        (2284)
  (         ifN t1 goto else_177)        (2286)
  a== 0        (2286)
  jf 3        (2288)
  lj 2297        (2290)
  (                    426:         error〈〉  # assignment or access went wrong?)        (2293)
  (         error)        (2293)
  error        (2293)
  (         goto endif_178)        (2294)
  lj 2297        (2294)
  (        :else_177:)        (2297)
  (        :endif_178:)        (2297)
  (                    427:       i += 1)        (2297)
  (         H[t0+4]〈i〉 = H[t0+4]〈i〉 + 1)        (2297)
  a=r 0        (2297)
  a+= 4        (2299)
  d=a        (2301)
  *d++        (2302)
  (         goto while_172)        (2303)
  lj 2115        (2303)
  (        :whileend_174:)        (2306)
  (insert return as it might not be done by the function:)        (2306)
  (         t2 = H[t0]〈〉)        (2306)
  d=r 0        (2306)
  a=*d        (2308)
  r=a 2        (2309)
  (         t0 = t0 - 1)        (2311)
  a=r 0        (2311)
  a--        (2313)
  r=a 0        (2314)
  (         t0 = H[t0]〈〉)        (2316)
  d=a        (2316)
  a=*d        (2317)
  r=a 0        (2318)
  (         goto find_label_ret_id)        (2320)
  lj 2354        (2320)
  (         MarkTempVarEnd)        (2323)
  (        :pcomp_end~:)        (2323)
  (                    435: pass)        (2323)
  (        :call_next:)        (2323)
  (         t253 = 4294967294)        (2323)
  a=0        (2323)
  a--        (2324)
  a--        (2325)
  r=a 253        (2326)
  (         H[t0+4]〈〉 = t0)        (2328)
  a=r 0        (2328)
  a+= 4        (2330)
  d=a        (2332)
  a=r 0        (2333)
  *d=a        (2335)
  (saved bsp, return id:)        (2336)
  (         H[t0+5]〈〉 = 32)        (2336)
  d++        (2336)
  *d= 32        (2337)
  (push arguments:)        (2339)
  (         H[t0+6]〈〉 = t255)        (2339)
  d++        (2339)
  a=r 255        (2340)
  *d=a        (2342)
  (         t0 = t0 + 5)        (2343)
  c= 5        (2343)
  a=r 0        (2345)
  a+=c        (2347)
  r=a 0        (2348)
  (         goto pcomp)        (2350)
  lj 1936        (2350)
  (        :return_id_32:)        (2353)
  (         halt)        (2353)
  halt        (2353)
  (        :find_label_ret_id:)        (2354)
  (         t4 = t0 > 1049400)        (2354)
  a= 16        (2354)
  a<<= 8        (2356)
  a+= 3        (2358)
  a<<= 8        (2360)
  a+= 56        (2362)
  c=a        (2364)
  a=r 0        (2365)
  a>c        (2367)
  a=0        (2368)
  jf 1        (2369)
  a++        (2371)
  r=a 4        (2372)
  (         if t4 goto throw_error)        (2374)
  a== 0        (2374)
  jt 3        (2376)
  lj 2511        (2378)
  (         ifEq t2 0 goto return_id_0)        (2381)
  c=r 2        (2381)
  a=0        (2383)
  a==c        (2384)
  jf 3        (2385)
  lj 355        (2387)
  (         ifEq t2 1 goto return_id_1)        (2390)
  a++        (2390)
  a==c        (2391)
  jf 3        (2392)
  lj 433        (2394)
  (         ifEq t2 2 goto return_id_2)        (2397)
  a++        (2397)
  a==c        (2398)
  jf 3        (2399)
  lj 574        (2401)
  (         ifEq t2 3 goto return_id_3)        (2404)
  a++        (2404)
  a==c        (2405)
  jf 3        (2406)
  lj 647        (2408)
  (         ifEq t2 4 goto return_id_4)        (2411)
  a++        (2411)
  a==c        (2412)
  jf 3        (2413)
  lj 776        (2415)
  (         ifEq t2 5 goto return_id_5)        (2418)
  a++        (2418)
  a==c        (2419)
  jf 3        (2420)
  lj 1132        (2422)
  (         ifEq t2 6 goto return_id_6)        (2425)
  a++        (2425)
  a==c        (2426)
  jf 3        (2427)
  lj 1178        (2429)
  (         ifEq t2 7 goto return_id_7)        (2432)
  a++        (2432)
  a==c        (2433)
  jf 3        (2434)
  lj 1269        (2436)
  (         ifEq t2 8 goto return_id_8)        (2439)
  a++        (2439)
  a==c        (2440)
  jf 3        (2441)
  lj 1341        (2443)
  (         ifEq t2 18 goto return_id_18)        (2446)
  a= 18        (2446)
  a==c        (2448)
  jf 3        (2449)
  lj 1541        (2451)
  (         ifEq t2 19 goto return_id_19)        (2454)
  a++        (2454)
  a==c        (2455)
  jf 3        (2456)
  lj 1594        (2458)
  (         ifEq t2 20 goto return_id_20)        (2461)
  a++        (2461)
  a==c        (2462)
  jf 3        (2463)
  lj 1741        (2465)
  (         ifEq t2 21 goto return_id_21)        (2468)
  a++        (2468)
  a==c        (2469)
  jf 3        (2470)
  lj 1787        (2472)
  (         ifEq t2 22 goto return_id_22)        (2475)
  a++        (2475)
  a==c        (2476)
  jf 3        (2477)
  lj 1847        (2479)
  (         ifEq t2 23 goto return_id_23)        (2482)
  a++        (2482)
  a==c        (2483)
  jf 3        (2484)
  lj 1898        (2486)
  (         ifEq t2 30 goto return_id_30)        (2489)
  a= 30        (2489)
  a==c        (2491)
  jf 3        (2492)
  lj 2008        (2494)
  (         ifEq t2 31 goto return_id_31)        (2497)
  a++        (2497)
  a==c        (2498)
  jf 3        (2499)
  lj 2082        (2501)
  (         ifEq t2 32 goto return_id_32)        (2504)
  a++        (2504)
  a==c        (2505)
  jf 3        (2506)
  lj 2353        (2508)
  (        :throw_error:)        (2511)
  (         error)        (2511)
  error        (2511)
  (         halt)        (2512)
  halt        (2512)
end
