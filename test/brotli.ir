comp 0 0 27 26 0 (hh hm ph pm n)
hcomp
pcomp
    # t255 holds the inital value passed into the A register, first ZPAQL instruction must thus be r=a 255
   ifN t0 goto init_code
   if t254 goto cont_reading
   goto call_next
  :init_code:
   t0 = 67108864
   t252 = t0
   goto read_b_end~
  :read_b:
   t1 = t253 == 4294967294
   if t1 goto do_read_in
   t255 = t253
   t253 = 4294967294
   goto cont_reading
  :do_read_in:
   t254 = 1
   halt
  :cont_reading:
   t254 = 0
      t1 = t255
     t2 = H[t0]()
     t0 = t0 - 1
     t0 = H[t0]()
     goto find_label_ret_id
  :read_b_end~:
 #                     19: def get32_hM(addr):
 #                     22: def set32_hM(addr, value):
 #                     31: def get32_pM(addr):
 goto get32_pM_end~
:get32_pM:
 MarkTempVarStart
 # Arg addr at t0 + 1
 #                     32:   return (((((pM[addr] << 8) + pM[addr+1]) << 8) + pM[addr+2]) << 8) + pM[addr+3]
 t7 = H[t0+1](addr)
 t6 = M[t7] << 8
 t7 = H[t0+1](addr) + 1
 t5 = t6 + M[t7]
 t4 = t5 << 8
 t5 = H[t0+1](addr) + 2
 t3 = t4 + M[t5]
 t2 = t3 << 8
 t3 = H[t0+1](addr) + 3
 t1 = t2 + M[t3]
    t1 = t1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:get32_pM_end~:
 #                     34: def set32_pM(addr, value):
 goto set32_pM_end~
:set32_pM:
 MarkTempVarStart
 # Arg addr at t0 + 1
 # Arg value at t0 + 2
 #                     35:   pM[addr+3] = value % 256
 t1 = H[t0+2](value) % 256
 t2 = H[t0+1](addr) + 3
 M[t2] = t1
 #                     36:   value >>= 8
 H[t0+2](value) = H[t0+2](value) >> 8
 #                     37:   pM[addr+2] = value % 256
 t1 = H[t0+2](value) % 256
 t2 = H[t0+1](addr) + 2
 M[t2] = t1
 #                     38:   value >>= 8
 H[t0+2](value) = H[t0+2](value) >> 8
 #                     39:   pM[addr+1] = value % 256
 t1 = H[t0+2](value) % 256
 t2 = H[t0+1](addr) + 1
 M[t2] = t1
 #                     40:   value >>= 8
 H[t0+2](value) = H[t0+2](value) >> 8
 #                     41:   pM[addr] = value % 256
 t1 = H[t0+2](value) % 256
 t2 = H[t0+1](addr)
 M[t2] = t1
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:set32_pM_end~:
 #                     44: def addr_alloc_pM(size):
 goto addr_alloc_pM_end~
:addr_alloc_pM:
 MarkTempVarStart
 # Arg size at t0 + 1
 #                     45:   start = 0  # each block is either of type free (0) or allocated (1), starting with (size0â€¦3, type) <- 5
 H[t0+2](start) = 0
 #                     46:   if get32_pM(start) == 0 and pM[start+4] == 0 and get32_pM(start+5) == 0 and pM[start+9] == 0:  # first run
 
    H[t0+7]() = t0
   # saved bsp, return id:
   H[t0+8]() = 0
   # push arguments:
   H[t0+9]() = H[t0+2](start)
   t0 = t0 + 8
   goto get32_pM
  :return_id_0:
 t5 = t1
 
 t4 = t5 == 0
 t6 = H[t0+2](start) + 4
 t5 = M[t6] == 0
 t3 = t4 and t5
 t5 = H[t0+2](start) + 5
    H[t0+3]() = t3
    H[t0+7]() = t0
   # saved bsp, return id:
   H[t0+8]() = 1
   # push arguments:
   H[t0+9]() = t5
   t0 = t0 + 8
   goto get32_pM
  :return_id_1:
 t6 = t1
    t3 = H[t0+3]()
 t4 = t6 == 0
 t2 = t3 and t4
 t4 = H[t0+2](start) + 9
 t3 = M[t4] == 0
 t1 = t2 and t3
 ifN t1 goto else_5
 #                     47:     if len(pM)-start-10 < size:  # also 5 bytes for ending entry (0,0)
 t3 = 67108864 - H[t0+2](start)
 t2 = t3 - 10
 t1 = t2 < H[t0+1](size)
 ifN t1 goto else_8
 #                     48:       error()
 error
 goto endif_9
:else_8:
:endif_9:
 #                     49:     set32_pM(start, size)
 
    H[t0+3]() = t0
   # saved bsp, return id:
   H[t0+4]() = 2
   # push arguments:
   H[t0+5]() = H[t0+2](start)
   H[t0+6]() = H[t0+1](size)
   t0 = t0 + 4
   goto set32_pM
  :return_id_2:
 
 #                     50:     pM[start+4] = 1
 t1 = H[t0+2](start) + 4
 M[t1] = 1
 #                     51:     set32_pM(start+size+5, len(pM)-start-size-10)
 t2 = H[t0+2](start) + H[t0+1](size)
 t1 = t2 + 5
 t4 = 67108864 - H[t0+2](start)
 t3 = t4 - H[t0+1](size)
 t2 = t3 - 10
 
    H[t0+3]() = t0
   # saved bsp, return id:
   H[t0+4]() = 3
   # push arguments:
   H[t0+5]() = t1
   H[t0+6]() = t2
   t0 = t0 + 4
   goto set32_pM
  :return_id_3:
 t3 = t1
 
 #                     52:     pM[start+size+6] = 0
 t2 = H[t0+2](start) + H[t0+1](size)
 t1 = t2 + 6
 M[t1] = 0
 #                     53:     return start+5  # return pointer to first element
 t1 = H[t0+2](start) + 5
    t1 = t1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_6
:else_5:
:endif_6:
 #                     54:   pos = start
 H[t0+3](pos) = H[t0+2](start)
 #                     55:   while len(pM)-pos-10 >= size: # also needs 5 bytes for ending entry
:while_10:
 t3 = 67108864 - H[t0+3](pos)
 t2 = t3 - 10
 t1 = t2 >= H[t0+1](size)
 ifN t1 goto whileend_12
 #                     57:     pos_size = get32_pM(pos)
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 4
   # push arguments:
   H[t0+6]() = H[t0+3](pos)
   t0 = t0 + 5
   goto get32_pM
  :return_id_4:
 
 H[t0+4](pos_size) = t1
 #                     58:     if pM[pos+4] == 0 and (pos_size == size or (
 #                     59:         pos_size > size and pos+9+pos_size < len(pM) and pM[pos+9+pos_size] == 0) or pos_size >= size+5):  # found
 #                     58:     if pM[pos+4] == 0 and (pos_size == size or (
 t3 = H[t0+3](pos) + 4
 t2 = M[t3] == 0
 #                     59:         pos_size > size and pos+9+pos_size < len(pM) and pM[pos+9+pos_size] == 0) or pos_size >= size+5):  # found
 #                     58:     if pM[pos+4] == 0 and (pos_size == size or (
 t5 = H[t0+4](pos_size) == H[t0+1](size)
 #                     59:         pos_size > size and pos+9+pos_size < len(pM) and pM[pos+9+pos_size] == 0) or pos_size >= size+5):  # found
 t8 = H[t0+4](pos_size) > H[t0+1](size)
 t11 = H[t0+3](pos) + 9
 t10 = t11 + H[t0+4](pos_size)
 t9 = t10 < 67108864
 t7 = t8 and t9
 t10 = H[t0+3](pos) + 9
 t9 = t10 + H[t0+4](pos_size)
 t8 = M[t9] == 0
 t6 = t7 and t8
 t4 = t5 or t6
 t6 = H[t0+1](size) + 5
 t5 = H[t0+4](pos_size) >= t6
 t3 = t4 or t5
 t1 = t2 and t3
 ifN t1 goto else_20
 #                     60:       if pos_size > size: # handle rest
 t1 = H[t0+4](pos_size) > H[t0+1](size)
 ifN t1 goto else_23
 #                     61:         if pos+9+pos_size < len(pM) and pM[pos+9+pos_size] == 0: # merge rest with next block
 t4 = H[t0+3](pos) + 9
 t3 = t4 + H[t0+4](pos_size)
 t2 = t3 < 67108864
 t5 = H[t0+3](pos) + 9
 t4 = t5 + H[t0+4](pos_size)
 t3 = M[t4] == 0
 t1 = t2 and t3
 ifN t1 goto else_27
 #                     63:           set32_pM(pos+5+size, pos_size-size + get32_pM(pos+5+pos_size))  # -5 (this new free block's header) + 5 (next header)
 t2 = H[t0+3](pos) + 5
 t1 = t2 + H[t0+1](size)
 t3 = H[t0+4](pos_size) - H[t0+1](size)
 t5 = H[t0+3](pos) + 5
 t4 = t5 + H[t0+4](pos_size)
    H[t0+5]() = t1
   H[t0+6]() = t3
    H[t0+8]() = t0
   # saved bsp, return id:
   H[t0+9]() = 5
   # push arguments:
   H[t0+10]() = t4
   t0 = t0 + 9
   goto get32_pM
  :return_id_5:
 t5 = t1
    t1 = H[t0+5]()
   t3 = H[t0+6]()
 t2 = t3 + t5
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 6
   # push arguments:
   H[t0+7]() = t1
   H[t0+8]() = t2
   t0 = t0 + 6
   goto set32_pM
  :return_id_6:
 t3 = t1
 
 #                     64:           pM[pos+9+size] = 0
 t2 = H[t0+3](pos) + 9
 t1 = t2 + H[t0+1](size)
 M[t1] = 0
 goto endif_28
:else_27:
 #                     66:           set32_pM(pos+5+size, pos_size-size-5)  # 5 is this free block's header
 t2 = H[t0+3](pos) + 5
 t1 = t2 + H[t0+1](size)
 t3 = H[t0+4](pos_size) - H[t0+1](size)
 t2 = t3 - 5
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 7
   # push arguments:
   H[t0+7]() = t1
   H[t0+8]() = t2
   t0 = t0 + 6
   goto set32_pM
  :return_id_7:
 t3 = t1
 
 #                     67:           pM[pos+9+size] = 0
 t2 = H[t0+3](pos) + 9
 t1 = t2 + H[t0+1](size)
 M[t1] = 0
:endif_28:
 goto endif_24
:else_23:
:endif_24:
 #                     68:       set32_pM(pos, size)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 8
   # push arguments:
   H[t0+7]() = H[t0+3](pos)
   H[t0+8]() = H[t0+1](size)
   t0 = t0 + 6
   goto set32_pM
  :return_id_8:
 
 #                     69:       pM[pos+4] = 1  # allocated
 t1 = H[t0+3](pos) + 4
 M[t1] = 1
 #                     70:       return pos+5  # return pointer to first element
 t1 = H[t0+3](pos) + 5
    t1 = t1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_21
:else_20:
:endif_21:
 #                     72:     pos += 5 + pos_size
 t1 = 5 + H[t0+4](pos_size)
 H[t0+3](pos) = H[t0+3](pos) + t1
 goto while_10
:whileend_12:
 #                     73:   error()
 error
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:addr_alloc_pM_end~:
 #                     77: def addr_alloc_pH(size):
 goto addr_alloc_pH_end~
:addr_alloc_pH:
 MarkTempVarStart
 # Arg size at t0 + 1
 #                     78:   start = 0  # each block is either of type free (0) or allocated (1), starting with (size, type)
 H[t0+2](start) = 0
 #                     79:   if pH[start] == 0 and pH[start+1] == 0 and pH[start+2] == 0 and pH[start+3] == 0:  # first run
 t5 = H[t0+2](start)
 t4 = H[t5]() == 0
 t6 = H[t0+2](start) + 1
 t5 = H[t6]() == 0
 t3 = t4 and t5
 t5 = H[t0+2](start) + 2
 t4 = H[t5]() == 0
 t2 = t3 and t4
 t4 = H[t0+2](start) + 3
 t3 = H[t4]() == 0
 t1 = t2 and t3
 ifN t1 goto else_33
 #                     80:     if len(pH)-start-4 < size:  # also 2 bytes for ending entry (0,0)
 t3 = 67108864 - H[t0+2](start)
 t2 = t3 - 4
 t1 = t2 < H[t0+1](size)
 ifN t1 goto else_36
 #                     81:       error()
 error
 goto endif_37
:else_36:
:endif_37:
 #                     82:     pH[start] = size
 t1 = H[t0+2](start)
 H[t1]() = H[t0+1](size)
 #                     83:     pH[start+1] = 1
 t1 = H[t0+2](start) + 1
 H[t1]() = 1
 #                     84:     pH[start+size+2] = len(pH)-start-size-4
 t3 = 67108864 - H[t0+2](start)
 t2 = t3 - H[t0+1](size)
 t1 = t2 - 4
 t3 = H[t0+2](start) + H[t0+1](size)
 t2 = t3 + 2
 H[t2]() = t1
 #                     85:     pH[start+size+3] = 0
 t2 = H[t0+2](start) + H[t0+1](size)
 t1 = t2 + 3
 H[t1]() = 0
 #                     86:     return start+2  # return pointer to first element
 t1 = H[t0+2](start) + 2
    t1 = t1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_34
:else_33:
:endif_34:
 #                     87:   pos = start
 H[t0+3](pos) = H[t0+2](start)
 #                     88:   while len(pH)-pos-4 >= size: # also needs 2 bytes for ending entry
:while_38:
 t3 = 67108864 - H[t0+3](pos)
 t2 = t3 - 4
 t1 = t2 >= H[t0+1](size)
 ifN t1 goto whileend_40
 #                     90:     if pH[pos+1] == 0 and (pH[pos] == size or (pH[pos] > size and pos+3+pH[pos] < len(pH) and pH[pos+3+pH[pos]] == 0) or pH[pos] >= size+2):  # found
 t3 = H[t0+3](pos) + 1
 t2 = H[t3]() == 0
 t6 = H[t0+3](pos)
 t5 = H[t6]() == H[t0+1](size)
 t9 = H[t0+3](pos)
 t8 = H[t9]() > H[t0+1](size)
 t11 = H[t0+3](pos) + 3
 t12 = H[t0+3](pos)
 t10 = t11 + H[t12]()
 t9 = t10 < 67108864
 t7 = t8 and t9
 t10 = H[t0+3](pos) + 3
 t11 = H[t0+3](pos)
 t9 = t10 + H[t11]()
 t8 = H[t9]() == 0
 t6 = t7 and t8
 t4 = t5 or t6
 t6 = H[t0+3](pos)
 t7 = H[t0+1](size) + 2
 t5 = H[t6]() >= t7
 t3 = t4 or t5
 t1 = t2 and t3
 ifN t1 goto else_48
 #                     91:       if pH[pos] > size: # handle rest
 t2 = H[t0+3](pos)
 t1 = H[t2]() > H[t0+1](size)
 ifN t1 goto else_51
 #                     92:         if pos+3+pH[pos] < len(pH) and pH[pos+3+pH[pos]] == 0: # merge rest with next block
 t4 = H[t0+3](pos) + 3
 t5 = H[t0+3](pos)
 t3 = t4 + H[t5]()
 t2 = t3 < 67108864
 t5 = H[t0+3](pos) + 3
 t6 = H[t0+3](pos)
 t4 = t5 + H[t6]()
 t3 = H[t4]() == 0
 t1 = t2 and t3
 ifN t1 goto else_55
 #                     94:           pH[pos+2+size] = pH[pos]-size + pH[pos+2+pH[pos]]  # -2 (this new free block's header) + 2 (next header)
 t3 = H[t0+3](pos)
 t2 = H[t3]() - H[t0+1](size)
 t4 = H[t0+3](pos) + 2
 t5 = H[t0+3](pos)
 t3 = t4 + H[t5]()
 t1 = t2 + H[t3]()
 t3 = H[t0+3](pos) + 2
 t2 = t3 + H[t0+1](size)
 H[t2]() = t1
 #                     95:           pH[pos+3+size] = 0
 t2 = H[t0+3](pos) + 3
 t1 = t2 + H[t0+1](size)
 H[t1]() = 0
 goto endif_56
:else_55:
 #                     97:           pH[pos+2+size] = pH[pos]-size-2 # 2 is this free block's header
 t3 = H[t0+3](pos)
 t2 = H[t3]() - H[t0+1](size)
 t1 = t2 - 2
 t3 = H[t0+3](pos) + 2
 t2 = t3 + H[t0+1](size)
 H[t2]() = t1
 #                     98:           pH[pos+3+size] = 0
 t2 = H[t0+3](pos) + 3
 t1 = t2 + H[t0+1](size)
 H[t1]() = 0
:endif_56:
 goto endif_52
:else_51:
:endif_52:
 #                     99:       pH[pos] = size
 t1 = H[t0+3](pos)
 H[t1]() = H[t0+1](size)
 #                     100:       pH[pos+1] = 1  # allocated
 t1 = H[t0+3](pos) + 1
 H[t1]() = 1
 #                     101:       return pos+2  # return pointer to first element
 t1 = H[t0+3](pos) + 2
    t1 = t1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_49
:else_48:
:endif_49:
 #                     103:     pos += 2 + pH[pos]
 t2 = H[t0+3](pos)
 t1 = 2 + H[t2]()
 H[t0+3](pos) = H[t0+3](pos) + t1
 goto while_38
:whileend_40:
 #                     104:   error()
 error
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:addr_alloc_pH_end~:
 #                     107: def addr_alloc_hH(size):
 #                     136: def addr_alloc_hM(size):
 #                     168: def addr_free_pM(addr):
 goto addr_free_pM_end~
:addr_free_pM:
 MarkTempVarStart
 # Arg addr at t0 + 1
 #                     169:   last_free = NONE
 H[t0+2](last_free) = 4294967295
 #                     170:   pos = 0  # 0 is start
 H[t0+3](pos) = 0
 #                     171:   addr -= 5  # addr showed to first element, not block start
 H[t0+1](addr) = H[t0+1](addr) - 5
 #                     172:   pM[addr+4] = 0  # free
 t1 = H[t0+1](addr) + 4
 M[t1] = 0
 #                     173:   while pos < addr:
:while_113:
 t1 = H[t0+3](pos) < H[t0+1](addr)
 ifN t1 goto whileend_115
 #                     174:     if pM[pos+4] == 0:  # of type 'free'?
 t2 = H[t0+3](pos) + 4
 t1 = M[t2] == 0
 ifN t1 goto else_118
 #                     175:       last_free = pos
 H[t0+2](last_free) = H[t0+3](pos)
 goto endif_119
:else_118:
 #                     177:       last_free = NONE
 H[t0+2](last_free) = 4294967295
:endif_119:
 #                     178:     pos += 5 + get32_pM(pos)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 18
   # push arguments:
   H[t0+7]() = H[t0+3](pos)
   t0 = t0 + 6
   goto get32_pM
  :return_id_18:
 t2 = t1
 
 t1 = 5 + t2
 H[t0+3](pos) = H[t0+3](pos) + t1
 goto while_113
:whileend_115:
 #                     180:   addr_size = get32_pM(addr)
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 19
   # push arguments:
   H[t0+6]() = H[t0+1](addr)
   t0 = t0 + 5
   goto get32_pM
  :return_id_19:
 
 H[t0+4](addr_size) = t1
 #                     181:   if addr+9+addr_size < len(pM) and pM[addr+9+addr_size] == 0: # merge with next block
 t4 = H[t0+1](addr) + 9
 t3 = t4 + H[t0+4](addr_size)
 t2 = t3 < 67108864
 t5 = H[t0+1](addr) + 9
 t4 = t5 + H[t0+4](addr_size)
 t3 = M[t4] == 0
 t1 = t2 and t3
 ifN t1 goto else_122
 #                     183:     set32_pM(addr, addr_size + 5 + get32_pM(addr+5+addr_size)) # + 5 is header
 t2 = H[t0+4](addr_size) + 5
 t4 = H[t0+1](addr) + 5
 t3 = t4 + H[t0+4](addr_size)
    H[t0+5]() = t2
    H[t0+7]() = t0
   # saved bsp, return id:
   H[t0+8]() = 20
   # push arguments:
   H[t0+9]() = t3
   t0 = t0 + 8
   goto get32_pM
  :return_id_20:
 t4 = t1
    t2 = H[t0+5]()
 t1 = t2 + t4
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 21
   # push arguments:
   H[t0+7]() = H[t0+1](addr)
   H[t0+8]() = t1
   t0 = t0 + 6
   goto set32_pM
  :return_id_21:
 t2 = t1
 
 goto endif_123
:else_122:
:endif_123:
 #                     185:   if last_free != NONE:
 t1 = H[t0+2](last_free) != 4294967295
 ifN t1 goto else_125
 #                     187:     set32_pM(last_free, get32_pM(last_free) + 5 + addr_size)  # + 5 is header
 
    H[t0+7]() = t0
   # saved bsp, return id:
   H[t0+8]() = 22
   # push arguments:
   H[t0+9]() = H[t0+2](last_free)
   t0 = t0 + 8
   goto get32_pM
  :return_id_22:
 t3 = t1
 
 t2 = t3 + 5
 t1 = t2 + H[t0+4](addr_size)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 23
   # push arguments:
   H[t0+7]() = H[t0+2](last_free)
   H[t0+8]() = t1
   t0 = t0 + 6
   goto set32_pM
  :return_id_23:
 t2 = t1
 
 goto endif_126
:else_125:
:endif_126:
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:addr_free_pM_end~:
 #                     190: def addr_free_pH(addr):  # expects a valid reference to a used block
 goto addr_free_pH_end~
:addr_free_pH:
 MarkTempVarStart
 # Arg addr at t0 + 1
 #                     191:   last_free = NONE
 H[t0+2](last_free) = 4294967295
 #                     192:   pos = 0  # 0 is start
 H[t0+3](pos) = 0
 #                     193:   addr -= 2  # addr showed to first element, not block start
 H[t0+1](addr) = H[t0+1](addr) - 2
 #                     194:   pH[addr+1] = 0  # free
 t1 = H[t0+1](addr) + 1
 H[t1]() = 0
 #                     195:   while pos < addr:
:while_127:
 t1 = H[t0+3](pos) < H[t0+1](addr)
 ifN t1 goto whileend_129
 #                     196:     if pH[pos+1] == 0:  # of type 'free'?
 t2 = H[t0+3](pos) + 1
 t1 = H[t2]() == 0
 ifN t1 goto else_132
 #                     197:       last_free = pos
 H[t0+2](last_free) = H[t0+3](pos)
 goto endif_133
:else_132:
 #                     199:       last_free = NONE
 H[t0+2](last_free) = 4294967295
:endif_133:
 #                     200:     pos += 2 + pH[pos]
 t2 = H[t0+3](pos)
 t1 = 2 + H[t2]()
 H[t0+3](pos) = H[t0+3](pos) + t1
 goto while_127
:whileend_129:
 #                     202:   if addr+3+pH[addr] < len(pH) and pH[addr+3+pH[addr]] == 0: # merge with next block
 t4 = H[t0+1](addr) + 3
 t5 = H[t0+1](addr)
 t3 = t4 + H[t5]()
 t2 = t3 < 67108864
 t5 = H[t0+1](addr) + 3
 t6 = H[t0+1](addr)
 t4 = t5 + H[t6]()
 t3 = H[t4]() == 0
 t1 = t2 and t3
 ifN t1 goto else_136
 #                     204:     pH[addr] = pH[addr] + 2 + pH[addr+2+pH[addr]] # + 2 is header
 t3 = H[t0+1](addr)
 t2 = H[t3]() + 2
 t4 = H[t0+1](addr) + 2
 t5 = H[t0+1](addr)
 t3 = t4 + H[t5]()
 t1 = t2 + H[t3]()
 t2 = H[t0+1](addr)
 H[t2]() = t1
 goto endif_137
:else_136:
:endif_137:
 #                     206:   if last_free != NONE:
 t1 = H[t0+2](last_free) != 4294967295
 ifN t1 goto else_139
 #                     208:     pH[last_free] = pH[last_free] + 2 + pH[addr] # + 2 is header
 t3 = H[t0+2](last_free)
 t2 = H[t3]() + 2
 t3 = H[t0+1](addr)
 t1 = t2 + H[t3]()
 t2 = H[t0+2](last_free)
 H[t2]() = t1
 goto endif_140
:else_139:
:endif_140:
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:addr_free_pH_end~:
 #                     211: def addr_free_hH(addr):  # expects a valid reference to a used block
 #                     231: def addr_free_hM(addr):
 #                     254: pass
 #                     387: bit_pos = 0
 H[t0+1](bit_pos) = 0
 #                     388: current_byte = NONE
 H[t0+2](current_byte) = 4294967295
 #                     389: global_bit_pos = 0
 H[t0+3](global_bit_pos) = 0
 #                     391: read_exact_result = 0
 H[t0+4](read_exact_result) = 0
 #                     392: def read_exact(): # read only one as it's anyway not used for more
 goto read_exact_end~
:read_exact:
 MarkTempVarStart
 #                     393:   global read_exact_result
 # Global read_exact_result via H[t252+4]
 #                     394:   read_exact_result = read_b()
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 30
   # push arguments:
   t0 = t0 + 2
   goto read_b
  :return_id_30:
 
 H[t252+4](read_exact_result) = t1
 #                     395:   if read_exact_result == NONE:
 t1 = H[t252+4](read_exact_result) == 4294967295
 ifN t1 goto else_170
 #                     396:     return 1 # eos error()
    t1 = 1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_171
:else_170:
:endif_171:
 #                     397:   return 0
    t1 = 0
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:read_exact_end~:
 #                     399: def read_u8():  # return NONE for eof
 goto read_u8_end~
:read_u8:
 MarkTempVarStart
 #                     400:   global bit_pos, current_byte, global_bit_pos
 # Global bit_pos via H[t252+1]
 # Global current_byte via H[t252+2]
 # Global global_bit_pos via H[t252+3]
 #                     401:   res = read_exact()
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 31
   # push arguments:
   t0 = t0 + 2
   goto read_exact
  :return_id_31:
 
 H[t0+1](res) = t1
 #                     402:   buf = read_exact_result
 H[t0+2](buf) = H[t252+4](read_exact_result)
 #                     403:   if bit_pos == 0 and current_byte != NONE and res == 1:  # i.e. res == EOS
 t3 = H[t252+1](bit_pos) == 0
 t4 = H[t252+2](current_byte) != 4294967295
 t2 = t3 and t4
 t3 = H[t0+1](res) == 1
 t1 = t2 and t3
 ifN t1 goto else_175
 #                     404:     tmp_ = current_byte
 H[t0+3](tmp_) = H[t252+2](current_byte)
 #                     405:     current_byte = NONE
 H[t252+2](current_byte) = 4294967295
 #                     406:     global_bit_pos += 8
 H[t252+3](global_bit_pos) = H[t252+3](global_bit_pos) + 8
 #                     407:     return tmp_
    t1 = H[t0+3](tmp_)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_176
:else_175:
 #                     408:   elif current_byte == NONE and res == 0:  # i.e. res == Ok()
 t2 = H[t252+2](current_byte) == 4294967295
 t3 = H[t0+1](res) == 0
 t1 = t2 and t3
 ifN t1 goto else_179
 #                     409:     global_bit_pos += 8
 H[t252+3](global_bit_pos) = H[t252+3](global_bit_pos) + 8
 #                     410:     return buf
    t1 = H[t0+2](buf)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_180
:else_179:
 #                     411:   elif current_byte != NONE and res == 0:
 t2 = H[t252+2](current_byte) != 4294967295
 t3 = H[t0+1](res) == 0
 t1 = t2 and t3
 ifN t1 goto else_183
 #                     412:     tmp_ = current_byte
 H[t0+3](tmp_) = H[t252+2](current_byte)
 #                     413:     current_byte = buf
 H[t252+2](current_byte) = H[t0+2](buf)
 #                     414:     global_bit_pos += 8
 H[t252+3](global_bit_pos) = H[t252+3](global_bit_pos) + 8
 #                     415:     return (tmp_ >> bit_pos) | (buf << (8 - bit_pos))
 t2 = H[t0+3](tmp_) >> H[t252+1](bit_pos)
 t4 = 8 - H[t252+1](bit_pos)
 t3 = H[t0+2](buf) << t4
 t1 = t2 | t3
    t1 = t1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_184
:else_183:
 #                     417:     return NONE # EOF vs â€¦   @TODO: wird EOF jemals aufgefangen und abgeschwÃ¤cht?
    t1 = 4294967295
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_184:
:endif_180:
:endif_176:
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:read_u8_end~:
 #                     419: read_u8_from_nibble_result = 0
 H[t0+5](read_u8_from_nibble_result) = 0
 #                     420: def read_u8_from_nibble():  # returns 0 for OK, 1 for Error
 goto read_u8_from_nibble_end~
:read_u8_from_nibble:
 MarkTempVarStart
 #                     421:   global bit_pos, current_byte, global_bit_pos, read_u8_from_nibble_result
 # Global bit_pos via H[t252+1]
 # Global current_byte via H[t252+2]
 # Global global_bit_pos via H[t252+3]
 # Global read_u8_from_nibble_result via H[t252+5]
 #                     422:   if bit_pos == 0 and current_byte == NONE:
 t2 = H[t252+1](bit_pos) == 0
 t3 = H[t252+2](current_byte) == 4294967295
 t1 = t2 and t3
 ifN t1 goto else_187
 #                     423:     res = read_exact()
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 32
   # push arguments:
   t0 = t0 + 2
   goto read_exact
  :return_id_32:
 
 H[t0+1](res) = t1
 #                     424:     buf = read_exact_result
 H[t0+2](buf) = H[t252+4](read_exact_result)
 #                     425:     if res == 0:  # i.e. Ok()
 t1 = H[t0+1](res) == 0
 ifN t1 goto else_190
 #                     426:       global_bit_pos += 4
 H[t252+3](global_bit_pos) = H[t252+3](global_bit_pos) + 4
 #                     427:       bit_pos = 4
 H[t252+1](bit_pos) = 4
 #                     428:       current_byte = buf
 H[t252+2](current_byte) = H[t0+2](buf)
 #                     429:       read_u8_from_nibble_result = buf & 0x0f
 t1 = H[t0+2](buf) & 15
 H[t252+5](read_u8_from_nibble_result) = t1
 #                     430:       return 0
    t1 = 0
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_191
:else_190:
 #                     432:       return res
    t1 = H[t0+1](res)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_191:
 goto endif_188
:else_187:
 #                     433:   elif (bit_pos == 1 or bit_pos == 2 or bit_pos == 3) and current_byte != NONE:
 t4 = H[t252+1](bit_pos) == 1
 t5 = H[t252+1](bit_pos) == 2
 t3 = t4 or t5
 t4 = H[t252+1](bit_pos) == 3
 t2 = t3 or t4
 t3 = H[t252+2](current_byte) != 4294967295
 t1 = t2 and t3
 ifN t1 goto else_196
 #                     434:     global_bit_pos += 4
 H[t252+3](global_bit_pos) = H[t252+3](global_bit_pos) + 4
 #                     435:     bit_pos += 4
 H[t252+1](bit_pos) = H[t252+1](bit_pos) + 4
 #                     436:     read_u8_from_nibble_result = (current_byte >> (bit_pos - 4)) & 0x0f
 t3 = H[t252+1](bit_pos) - 4
 t2 = H[t252+2](current_byte) >> t3
 t1 = t2 & 15
 H[t252+5](read_u8_from_nibble_result) = t1
 #                     437:     return 0
    t1 = 0
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_197
:else_196:
 #                     438:   elif bit_pos == 4 and current_byte != NONE:
 t2 = H[t252+1](bit_pos) == 4
 t3 = H[t252+2](current_byte) != 4294967295
 t1 = t2 and t3
 ifN t1 goto else_200
 #                     439:     global_bit_pos += 4
 H[t252+3](global_bit_pos) = H[t252+3](global_bit_pos) + 4
 #                     440:     bit_pos = 0
 H[t252+1](bit_pos) = 0
 #                     441:     tmp_ = current_byte
 H[t0+3](tmp_) = H[t252+2](current_byte)
 #                     442:     current_byte = NONE
 H[t252+2](current_byte) = 4294967295
 #                     443:     read_u8_from_nibble_result = (tmp_ >> 4) & 0x0f
 t2 = H[t0+3](tmp_) >> 4
 t1 = t2 & 15
 H[t252+5](read_u8_from_nibble_result) = t1
 #                     444:     return 0
    t1 = 0
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_201
:else_200:
 #                     445:   elif (bit_pos == 5 or bit_pos == 6 or bit_pos == 7) and current_byte != NONE:
 t4 = H[t252+1](bit_pos) == 5
 t5 = H[t252+1](bit_pos) == 6
 t3 = t4 or t5
 t4 = H[t252+1](bit_pos) == 7
 t2 = t3 or t4
 t3 = H[t252+2](current_byte) != 4294967295
 t1 = t2 and t3
 ifN t1 goto else_206
 #                     446:     res = read_exact()
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 33
   # push arguments:
   t0 = t0 + 5
   goto read_exact
  :return_id_33:
 
 H[t0+1](res) = t1
 #                     447:     buf = read_exact_result
 H[t0+2](buf) = H[t252+4](read_exact_result)
 #                     448:     if res == 0:
 t1 = H[t0+1](res) == 0
 ifN t1 goto else_209
 #                     449:       global_bit_pos += 4
 H[t252+3](global_bit_pos) = H[t252+3](global_bit_pos) + 4
 #                     450:       bit_pos_prev = bit_pos
 H[t0+4](bit_pos_prev) = H[t252+1](bit_pos)
 #                     451:       bit_pos = bit_pos - 4
 t1 = H[t252+1](bit_pos) - 4
 H[t252+1](bit_pos) = t1
 #                     452:       tmp_ = current_byte
 H[t0+3](tmp_) = H[t252+2](current_byte)
 #                     453:       current_byte = buf
 H[t252+2](current_byte) = H[t0+2](buf)
 #                     454:       read_u8_from_nibble_result = ((tmp_ >> (bit_pos_prev)) | (buf << (8 - bit_pos_prev))) & 0x0f
 t3 = H[t0+3](tmp_) >> H[t0+4](bit_pos_prev)
 t5 = 8 - H[t0+4](bit_pos_prev)
 t4 = H[t0+2](buf) << t5
 t2 = t3 | t4
 t1 = t2 & 15
 H[t252+5](read_u8_from_nibble_result) = t1
 #                     455:       return 0
    t1 = 0
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_210
:else_209:
 #                     457:       return res
    t1 = H[t0+1](res)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_210:
 goto endif_207
:else_206:
 #                     459:     return 1 # unreachable
    t1 = 1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_207:
:endif_201:
:endif_197:
:endif_188:
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:read_u8_from_nibble_end~:
 #                     462: read_bit_result = 0
 H[t0+6](read_bit_result) = 0
 #                     463: def read_bit():  # returns 0 for OK, 1 for Error
 goto read_bit_end~
:read_bit:
 MarkTempVarStart
 #                     464:   global bit_pos, current_byte, global_bit_pos, read_bit_result
 # Global bit_pos via H[t252+1]
 # Global current_byte via H[t252+2]
 # Global global_bit_pos via H[t252+3]
 # Global read_bit_result via H[t252+6]
 #                     465:   if current_byte != NONE:
 t1 = H[t252+2](current_byte) != 4294967295
 ifN t1 goto else_212
 #                     466:       tmp_ = bit_pos
 H[t0+1](tmp_) = H[t252+1](bit_pos)
 #                     467:       tmp_2 = current_byte
 H[t0+2](tmp_2) = H[t252+2](current_byte)
 #                     468:       bit_pos = (tmp_ + 1) % 8
 t2 = H[t0+1](tmp_) + 1
 t1 = t2 % 8
 H[t252+1](bit_pos) = t1
 #                     469:       global_bit_pos = global_bit_pos + 1
 t1 = H[t252+3](global_bit_pos) + 1
 H[t252+3](global_bit_pos) = t1
 #                     470:       if bit_pos == 0:
 t1 = H[t252+1](bit_pos) == 0
 ifN t1 goto else_215
 #                     471:           current_byte = NONE
 H[t252+2](current_byte) = 4294967295
 goto endif_216
:else_215:
:endif_216:
 #                     472:       read_bit_result = tmp_2 >> tmp_ & 1
 t2 = H[t0+2](tmp_2) >> H[t0+1](tmp_)
 t1 = t2 & 1
 H[t252+6](read_bit_result) = t1
 #                     473:       return 0
    t1 = 0
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_213
:else_212:
 #                     475:       if read_exact():
 
    H[t0+3]() = t0
   # saved bsp, return id:
   H[t0+4]() = 34
   # push arguments:
   t0 = t0 + 4
   goto read_exact
  :return_id_34:
 
 ifN t1 goto else_217
 #                     476:         return 1
    t1 = 1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_218
:else_217:
 #                     478:         current_byte = read_exact_result
 H[t252+2](current_byte) = H[t252+4](read_exact_result)
 #                     479:         bit_pos = 1
 H[t252+1](bit_pos) = 1
 #                     480:         global_bit_pos = 1
 H[t252+3](global_bit_pos) = 1
 #                     481:         read_bit_result = read_exact_result & 1
 t1 = H[t252+4](read_exact_result) & 1
 H[t252+6](read_bit_result) = t1
 #                     482:         return 0
    t1 = 0
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_218:
:endif_213:
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:read_bit_end~:
 #                     485: read_u32_from_n_bits_result = 0
 H[t0+7](read_u32_from_n_bits_result) = 0
 #                     487: def read_u32_from_n_bits(n):  # does also serve as read_u8_from_n_bits, read_u16_from_n_bits
 goto read_u32_from_n_bits_end~
:read_u32_from_n_bits:
 MarkTempVarStart
 # Arg n at t0 + 1
 #                     488:   global bit_pos, current_byte, global_bit_pos, read_u32_from_n_bits_result
 # Global bit_pos via H[t252+1]
 # Global current_byte via H[t252+2]
 # Global global_bit_pos via H[t252+3]
 # Global read_u32_from_n_bits_result via H[t252+7]
 #                     489:   read_u32_from_n_bits_result = 0
 H[t252+7](read_u32_from_n_bits_result) = 0
 #                     490:   i = 0
 H[t0+2](i) = 0
 #                     491:   while i < n:
:while_219:
 t1 = H[t0+2](i) < H[t0+1](n)
 ifN t1 goto whileend_221
 #                     492:     if read_bit():
 
    H[t0+3]() = t0
   # saved bsp, return id:
   H[t0+4]() = 35
   # push arguments:
   t0 = t0 + 4
   goto read_bit
  :return_id_35:
 
 ifN t1 goto else_223
 #                     493:       return 1  # error
    t1 = 1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_224
:else_223:
 #                     494:     elif read_bit_result == 1:
 t1 = H[t252+6](read_bit_result) == 1
 ifN t1 goto else_226
 #                     495:       read_u32_from_n_bits_result = read_u32_from_n_bits_result | (1 << i)
 t2 = 1 << H[t0+2](i)
 t1 = H[t252+7](read_u32_from_n_bits_result) | t2
 H[t252+7](read_u32_from_n_bits_result) = t1
 goto endif_227
:else_226:
:endif_227:
:endif_224:
 #                     496:     i += 1
 H[t0+2](i) = H[t0+2](i) + 1
 goto while_219
:whileend_221:
 #                     497:   return 0
    t1 = 0
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:read_u32_from_n_bits_end~:
 #                     499: def read_u8_from_byte_tail():  # return NONE for eof
 goto read_u8_from_byte_tail_end~
:read_u8_from_byte_tail:
 MarkTempVarStart
 #                     500:   if bit_pos == 0:
 t1 = H[t252+1](bit_pos) == 0
 ifN t1 goto else_229
 #                     501:     return 0
    t1 = 0
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_230
:else_229:
 #                     503:     if read_u32_from_n_bits(8 - bit_pos):
 t1 = 8 - H[t252+1](bit_pos)
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 36
   # push arguments:
   H[t0+3]() = t1
   t0 = t0 + 2
   goto read_u32_from_n_bits
  :return_id_36:
 t2 = t1
 
 ifN t2 goto else_231
 #                     504:       return NONE
    t1 = 4294967295
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_232
:else_231:
:endif_232:
 #                     505:     return read_u32_from_n_bits_result
    t1 = H[t252+7](read_u32_from_n_bits_result)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_230:
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:read_u8_from_byte_tail_end~:
 #                     507: read_u32_from_n_nibbles_result = 0
 H[t0+8](read_u32_from_n_nibbles_result) = 0
 #                     509: def read_u32_from_n_nibbles(n):
 goto read_u32_from_n_nibbles_end~
:read_u32_from_n_nibbles:
 MarkTempVarStart
 # Arg n at t0 + 1
 #                     510:   global bit_pos, current_byte, global_bit_pos, read_u32_from_n_nibbles_result
 # Global bit_pos via H[t252+1]
 # Global current_byte via H[t252+2]
 # Global global_bit_pos via H[t252+3]
 # Global read_u32_from_n_nibbles_result via H[t252+8]
 #                     511:   read_u32_from_n_nibbles_result = 0
 H[t252+8](read_u32_from_n_nibbles_result) = 0
 #                     512:   i = 0
 H[t0+2](i) = 0
 #                     513:   while i < n:
:while_233:
 t1 = H[t0+2](i) < H[t0+1](n)
 ifN t1 goto whileend_235
 #                     514:     if read_u8_from_nibble() == 0:
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 37
   # push arguments:
   t0 = t0 + 5
   goto read_u8_from_nibble
  :return_id_37:
 t2 = t1
 
 t1 = t2 == 0
 ifN t1 goto else_238
 #                     515:       read_u32_from_n_nibbles_result = read_u32_from_n_nibbles_result | (read_u8_from_nibble_result  << (4 * i))
 t3 = 4 * H[t0+2](i)
 t2 = H[t252+5](read_u8_from_nibble_result) << t3
 t1 = H[t252+8](read_u32_from_n_nibbles_result) | t2
 H[t252+8](read_u32_from_n_nibbles_result) = t1
 goto endif_239
:else_238:
 #                     517:       return 1
    t1 = 1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_239:
 #                     518:     i += 1
 H[t0+2](i) = H[t0+2](i) + 1
 goto while_233
:whileend_235:
 #                     519:   return 0
    t1 = 0
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:read_u32_from_n_nibbles_end~:
 #                     521: def read_fixed_length_string(length):
 goto read_fixed_length_string_end~
:read_fixed_length_string:
 MarkTempVarStart
 # Arg length at t0 + 1
 #                     522:     my_string = alloc_pM(length)
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 38
   # push arguments:
   H[t0+4]() = H[t0+1](length)
   t0 = t0 + 3
   goto addr_alloc_pM
  :return_id_38:
 
 t1 = t1 | 2147483648
 H[t0+2](my_string) = t1
 #                     523:     i = 0
 H[t0+3](i) = 0
 #                     524:     while i < length:
:while_240:
 t1 = H[t0+3](i) < H[t0+1](length)
 ifN t1 goto whileend_242
 #                     525:         t = read_u8()
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 39
   # push arguments:
   t0 = t0 + 5
   goto read_u8
  :return_id_39:
 
 H[t0+4](t) = t1
 #                     526:         if t == NONE:
 t1 = H[t0+4](t) == 4294967295
 ifN t1 goto else_245
 #                     527:             return NONE
    t1 = 4294967295
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_246
:else_245:
:endif_246:
 #                     528:         my_string[i] = t
 t1 = H[t0+2](my_string) & 2147483647
 t1 = t1 + H[t0+3](i)
 M[t1] = H[t0+4](t)
 #                     529:         i += 1
 H[t0+3](i) = H[t0+3](i) + 1
 goto while_240
:whileend_242:
 #                     530:     return my_string
    t1 = H[t0+2](my_string)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:read_fixed_length_string_end~:
 #                     540: def tree_from_raw_data(buf, len_, last_symbol):
 goto tree_from_raw_data_end~
:tree_from_raw_data:
 MarkTempVarStart
 # Arg buf at t0 + 1
 # Arg len_ at t0 + 2
 # Arg last_symbol at t0 + 3
 #                     541:   arr = alloc_pH(3)
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 40
   # push arguments:
   H[t0+6]() = 3
   t0 = t0 + 5
   goto addr_alloc_pH
  :return_id_40:
 
 H[t0+4](arr) = t1
 #                     542:   arr[0] = buf  # also 32 bit
 t1 = H[t0+4](arr) + 0
 H[t1]() = H[t0+1](buf)
 #                     543:   arr[1] = len_
 t1 = t1 + 1
 H[t1]() = H[t0+2](len_)
 #                     544:   arr[2] = last_symbol
 t1 = t1 + 1
 H[t1]() = H[t0+3](last_symbol)
 #                     545:   return arr
    t1 = H[t0+4](arr)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:tree_from_raw_data_end~:
 #                     547: def tree_with_max_depth(max_depth):
 goto tree_with_max_depth_end~
:tree_with_max_depth:
 MarkTempVarStart
 # Arg max_depth at t0 + 1
 #                     548:   len_ = (1 << (max_depth + 1)) - 1
 t3 = H[t0+1](max_depth) + 1
 t2 = 1 << t3
 t1 = t2 - 1
 H[t0+2](len_) = t1
 #                     550:   arr = alloc_pH(len_)
 
    H[t0+3]() = t0
   # saved bsp, return id:
   H[t0+4]() = 41
   # push arguments:
   H[t0+5]() = H[t0+2](len_)
   t0 = t0 + 4
   goto addr_alloc_pH
  :return_id_41:
 
 H[t0+3](arr) = t1
 #                     551:   i = 0  # init all values with NONE
 H[t0+4](i) = 0
 #                     552:   while i < len_:
:while_247:
 t1 = H[t0+4](i) < H[t0+2](len_)
 ifN t1 goto whileend_249
 #                     553:     arr[i] = NONE
 t1 = H[t0+3](arr) + H[t0+4](i)
 H[t1]() = 4294967295
 #                     554:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_247
:whileend_249:
 #                     555:   return tree_from_raw_data(arr, 0, NONE)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 42
   # push arguments:
   H[t0+7]() = H[t0+3](arr)
   H[t0+8]() = 0
   H[t0+9]() = 4294967295
   t0 = t0 + 6
   goto tree_from_raw_data
  :return_id_42:
 
    t1 = t1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:tree_with_max_depth_end~:
 #                     557: def insert(tree, code, symbol):  # code[0,1,0,1,0,1]
 goto insert_end~
:insert:
 MarkTempVarStart
 # Arg tree at t0 + 1
 # Arg code at t0 + 2
 # Arg symbol at t0 + 3
 #                     559:   tree[1] = tree[1] + 1
 t2 = H[t0+1](tree) >> 31
 if t2 goto isM_251
 t2 = H[t0+1](tree) + 1
 t2 = H[t2]()
 goto MorHdone_252
:isM_251:
 t2 = H[t0+1](tree) & 2147483647
 t2 = t2 + 1
 t2 = M[t2]
:MorHdone_252:
 t1 = t2 + 1
 t2 = H[t0+1](tree) >> 31
 if t2 goto isM_assign_253
 t2 = H[t0+1](tree) + 1
 H[t2]() = t1
 goto MorHdone_assign_254
:isM_assign_253:
 t2 = H[t0+1](tree) & 2147483647
 t2 = t2 + 1
 M[t2] = t1
:MorHdone_assign_254:
 #                     560:   tree[2] = symbol
 t1 = H[t0+1](tree) >> 31
 if t1 goto isM_assign_255
 t1 = H[t0+1](tree) + 2
 H[t1]() = H[t0+3](symbol)
 goto MorHdone_assign_256
:isM_assign_255:
 t1 = H[t0+1](tree) & 2147483647
 t1 = t1 + 2
 M[t1] = H[t0+3](symbol)
:MorHdone_assign_256:
 #                     561:   insert_at_index = 0
 H[t0+4](insert_at_index) = 0
 #                     562:   i = 0
 H[t0+5](i) = 0
 #                     563:   while i < len_pM(code):
:while_257:
 t2 = H[t0+2](code)
 t2 = t2 & 2147483647
 t2 = t2 - 5
 t3 = M[t2] << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t3 = t3 << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t3 = t3 << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t1 = H[t0+5](i) < t3
 ifN t1 goto whileend_259
 #                     564:     insert_at_index = (insert_at_index << 1) + code[i]
 t2 = H[t0+4](insert_at_index) << 1
 t3 = H[t0+2](code) >> 31
 if t3 goto isM_261
 t3 = H[t0+2](code) + H[t0+5](i)
 t3 = H[t3]()
 goto MorHdone_262
:isM_261:
 t3 = H[t0+2](code) & 2147483647
 t3 = t3 + H[t0+5](i)
 t3 = M[t3]
:MorHdone_262:
 t1 = t2 + t3
 H[t0+4](insert_at_index) = t1
 #                     565:     i += 1
 H[t0+5](i) = H[t0+5](i) + 1
 goto while_257
:whileend_259:
 #                     566:   insert_at_index = (1 << len_pM(code)) - 1 + insert_at_index
 t4 = H[t0+2](code)
 t4 = t4 & 2147483647
 t4 = t4 - 5
 t5 = M[t4] << 8
 t4 = t4 + 1
 t5 = t5 + M[t4]
 t5 = t5 << 8
 t4 = t4 + 1
 t5 = t5 + M[t4]
 t5 = t5 << 8
 t4 = t4 + 1
 t5 = t5 + M[t4]
 t3 = 1 << t5
 t2 = t3 - 1
 t1 = t2 + H[t0+4](insert_at_index)
 H[t0+4](insert_at_index) = t1
 #                     567:   if insert_at_index > len_pH(array_pH(tree[0])) - 1:
 t3 = H[t0+1](tree) >> 31
 if t3 goto isM_264
 t3 = H[t0+1](tree) + 0
 t3 = H[t3]()
 goto MorHdone_265
:isM_264:
 t3 = H[t0+1](tree) & 2147483647
 t3 = t3 + 0
 t3 = M[t3]
:MorHdone_265:
 t4 = t3
 t4 = t4 - 2
 t2 = H[t4]() - 1
 t1 = H[t0+4](insert_at_index) > t2
 ifN t1 goto else_266
 #                     568:     error() # panic!()
 error
 goto endif_267
:else_266:
:endif_267:
 #                     569:   tr = array_pH(tree[0])
 t1 = H[t0+1](tree) >> 31
 if t1 goto isM_268
 t1 = H[t0+1](tree) + 0
 t1 = H[t1]()
 goto MorHdone_269
:isM_268:
 t1 = H[t0+1](tree) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
:MorHdone_269:
 H[t0+6](tr) = t1
 #                     570:   tr[insert_at_index] = symbol
 t1 = H[t0+6](tr) + H[t0+4](insert_at_index)
 H[t1]() = H[t0+3](symbol)
 #                     571:   free_pM(code)
 t1 = H[t0+2](code) & 2147483647
 
    H[t0+7]() = t0
   # saved bsp, return id:
   H[t0+8]() = 43
   # push arguments:
   H[t0+9]() = t1
   t0 = t0 + 8
   goto addr_free_pM
  :return_id_43:
 t2 = t1
 
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:insert_end~:
 #                     574: def lookup(tree):
 goto lookup_end~
:lookup:
 MarkTempVarStart
 # Arg tree at t0 + 1
 #                     575:   pseudo_code = 1
 H[t0+2](pseudo_code) = 1
 #                     576:   len_ = len_pH(array_pH(tree[0]))
 t1 = H[t0+1](tree) >> 31
 if t1 goto isM_270
 t1 = H[t0+1](tree) + 0
 t1 = H[t1]()
 goto MorHdone_271
:isM_270:
 t1 = H[t0+1](tree) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
:MorHdone_271:
 t2 = t1
 t2 = t2 - 2
 H[t0+3](len_) = H[t2]()
 #                     577:   while True:
:while_272:
 ifN 1 goto whileend_274
 #                     578:     if read_bit():
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 44
   # push arguments:
   t0 = t0 + 5
   goto read_bit
  :return_id_44:
 
 ifN t1 goto else_275
 #                     579:       return NONE
    t1 = 4294967295
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_276
:else_275:
:endif_276:
 #                     580:     pseudo_code = (pseudo_code << 1) + read_bit_result
 t2 = H[t0+2](pseudo_code) << 1
 t1 = t2 + H[t252+6](read_bit_result)
 H[t0+2](pseudo_code) = t1
 #                     581:     lookup_index = pseudo_code - 1
 t1 = H[t0+2](pseudo_code) - 1
 H[t0+4](lookup_index) = t1
 #                     582:     if lookup_index > len_ - 1:
 t2 = H[t0+3](len_) - 1
 t1 = H[t0+4](lookup_index) > t2
 ifN t1 goto else_278
 #                     583:       return NONE # None but anyway None is always leading to DecompressorError
    t1 = 4294967295
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_279
:else_278:
:endif_279:
 #                     584:     tr = array_pH(tree[0])
 t1 = H[t0+1](tree) >> 31
 if t1 goto isM_280
 t1 = H[t0+1](tree) + 0
 t1 = H[t1]()
 goto MorHdone_281
:isM_280:
 t1 = H[t0+1](tree) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
:MorHdone_281:
 H[t0+5](tr) = t1
 #                     585:     tmp_ = tr[lookup_index] # buf[lookup_index]
 t1 = H[t0+5](tr) + H[t0+4](lookup_index)
 t1 = H[t1]()
 H[t0+6](tmp_) = t1
 #                     586:     if tmp_ != NONE:
 t1 = H[t0+6](tmp_) != 4294967295
 ifN t1 goto else_283
 #                     587:       return tmp_
    t1 = H[t0+6](tmp_)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_284
:else_283:
:endif_284:
 goto while_272
:whileend_274:
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:lookup_end~:
 #                     589: def lookup_symbol(tree):
 goto lookup_symbol_end~
:lookup_symbol:
 MarkTempVarStart
 # Arg tree at t0 + 1
 #                     590:   tree = array_pH(tree)
 H[t0+1](tree) = H[t0+1](tree)
 #                     591:   if tree[1] == 0: # len == 0
 t2 = H[t0+1](tree) + 1
 t2 = H[t2]()
 t1 = t2 == 0
 ifN t1 goto else_286
 #                     592:     return NONE  # None empty table
    t1 = 4294967295
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_287
:else_286:
:endif_287:
 #                     593:   if tree[1] == 1: # len == 1
 t2 = H[t0+1](tree) + 1
 t2 = H[t2]()
 t1 = t2 == 1
 ifN t1 goto else_289
 #                     594:     return tree[2] # last_symbol
 t1 = H[t0+1](tree) + 2
 t1 = H[t1]()
    t1 = t1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_290
:else_289:
:endif_290:
 #                     595:   return lookup(tree)
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 45
   # push arguments:
   H[t0+4]() = H[t0+1](tree)
   t0 = t0 + 3
   goto lookup
  :return_id_45:
 
    t1 = t1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:lookup_symbol_end~:
 #                     599: def bit_string_from_code_and_length(code, len_): # nr, nr
 goto bit_string_from_code_and_length_end~
:bit_string_from_code_and_length:
 MarkTempVarStart
 # Arg code at t0 + 1
 # Arg len_ at t0 + 2
 #                     600:   bits = alloc_pM(len_)
 
    H[t0+3]() = t0
   # saved bsp, return id:
   H[t0+4]() = 46
   # push arguments:
   H[t0+5]() = H[t0+2](len_)
   t0 = t0 + 4
   goto addr_alloc_pM
  :return_id_46:
 
 t1 = t1 | 2147483648
 H[t0+3](bits) = t1
 #                     601:   i = 0
 H[t0+4](i) = 0
 #                     602:   while i < len_:  # all bits get set, no initialisation with zero needed
:while_291:
 t1 = H[t0+4](i) < H[t0+2](len_)
 ifN t1 goto whileend_293
 #                     603:     if (code >> i) & 1 == 1:
 t3 = H[t0+1](code) >> H[t0+4](i)
 t2 = t3 & 1
 t1 = t2 == 1
 ifN t1 goto else_296
 #                     604:       bits[len_ - i - 1] = 1
 t2 = H[t0+2](len_) - H[t0+4](i)
 t1 = t2 - 1
 t2 = H[t0+3](bits) & 2147483647
 t2 = t2 + t1
 M[t2] = 1
 goto endif_297
:else_296:
 #                     606:       bits[len_ - i - 1] = 0
 t2 = H[t0+2](len_) - H[t0+4](i)
 t1 = t2 - 1
 t2 = H[t0+3](bits) & 2147483647
 t2 = t2 + t1
 M[t2] = 0
:endif_297:
 #                     607:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_291
:whileend_293:
 #                     608:   return bits
    t1 = H[t0+3](bits)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:bit_string_from_code_and_length_end~:
 #                     610: def codes_from_lengths_and_symbols(lengths, symbols): # [], [] -> tree
 goto codes_from_lengths_and_symbols_end~
:codes_from_lengths_and_symbols:
 MarkTempVarStart
 # Arg lengths at t0 + 1
 # Arg symbols at t0 + 2
 #                     612:   max_length = 0
 H[t0+3](max_length) = 0
 #                     613:   i = 0
 H[t0+4](i) = 0
 #                     614:   while i < len_pM(lengths):
:while_298:
 t2 = H[t0+1](lengths)
 t2 = t2 & 2147483647
 t2 = t2 - 5
 t3 = M[t2] << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t3 = t3 << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t3 = t3 << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t1 = H[t0+4](i) < t3
 ifN t1 goto whileend_300
 #                     615:     j = lengths[i]
 t1 = H[t0+1](lengths) >> 31
 if t1 goto isM_302
 t1 = H[t0+1](lengths) + H[t0+4](i)
 t1 = H[t1]()
 goto MorHdone_303
:isM_302:
 t1 = H[t0+1](lengths) & 2147483647
 t1 = t1 + H[t0+4](i)
 t1 = M[t1]
:MorHdone_303:
 H[t0+5](j) = t1
 #                     616:     if j > max_length:
 t1 = H[t0+5](j) > H[t0+3](max_length)
 ifN t1 goto else_305
 #                     617:       max_length = j
 H[t0+3](max_length) = H[t0+5](j)
 goto endif_306
:else_305:
:endif_306:
 #                     618:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_298
:whileend_300:
 #                     619:   bl_count = alloc_pH(max_length + 1)  # @TODO: maybe pM?
 t1 = H[t0+3](max_length) + 1
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 47
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_alloc_pH
  :return_id_47:
 t2 = t1
 
 H[t0+6](bl_count) = t2
 #                     620:   i = 0
 H[t0+4](i) = 0
 #                     621:   while i < max_length + 1:
:while_307:
 t2 = H[t0+3](max_length) + 1
 t1 = H[t0+4](i) < t2
 ifN t1 goto whileend_309
 #                     622:     bl_count[i] = 0  # init
 t1 = H[t0+6](bl_count) + H[t0+4](i)
 H[t1]() = 0
 #                     623:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_307
:whileend_309:
 #                     624:   i = 0
 H[t0+4](i) = 0
 #                     625:   while i < len_pM(lengths):
:while_311:
 t2 = H[t0+1](lengths)
 t2 = t2 & 2147483647
 t2 = t2 - 5
 t3 = M[t2] << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t3 = t3 << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t3 = t3 << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t1 = H[t0+4](i) < t3
 ifN t1 goto whileend_313
 #                     626:     j = lengths[i]
 t1 = H[t0+1](lengths) >> 31
 if t1 goto isM_315
 t1 = H[t0+1](lengths) + H[t0+4](i)
 t1 = H[t1]()
 goto MorHdone_316
:isM_315:
 t1 = H[t0+1](lengths) & 2147483647
 t1 = t1 + H[t0+4](i)
 t1 = M[t1]
:MorHdone_316:
 H[t0+5](j) = t1
 #                     627:     bl_count[j] = bl_count[j] + 1
 t2 = H[t0+6](bl_count) + H[t0+5](j)
 t2 = H[t2]()
 t1 = t2 + 1
 t2 = H[t0+6](bl_count) + H[t0+5](j)
 H[t2]() = t1
 #                     628:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_311
:whileend_313:
 #                     629:   code = 0
 H[t0+7](code) = 0
 #                     630:   next_code = alloc_pH(max_length + 1) # @TODO: maybe pM?
 t1 = H[t0+3](max_length) + 1
 
    H[t0+8]() = t0
   # saved bsp, return id:
   H[t0+9]() = 48
   # push arguments:
   H[t0+10]() = t1
   t0 = t0 + 9
   goto addr_alloc_pH
  :return_id_48:
 t2 = t1
 
 H[t0+8](next_code) = t2
 #                     631:   next_code[0] = 0  # init, rest is in loop
 t1 = H[t0+8](next_code) + 0
 H[t1]() = 0
 #                     632:   bits = 1
 H[t0+9](bits) = 1
 #                     633:   while bits < max_length + 1:
:while_317:
 t2 = H[t0+3](max_length) + 1
 t1 = H[t0+9](bits) < t2
 ifN t1 goto whileend_319
 #                     634:     code = (code + bl_count[bits - 1]) << 1
 t3 = H[t0+9](bits) - 1
 t4 = H[t0+6](bl_count) + t3
 t4 = H[t4]()
 t2 = H[t0+7](code) + t4
 t1 = t2 << 1
 H[t0+7](code) = t1
 #                     635:     next_code[bits] = code
 t1 = H[t0+8](next_code) + H[t0+9](bits)
 H[t1]() = H[t0+7](code)
 #                     636:     bits += 1
 H[t0+9](bits) = H[t0+9](bits) + 1
 goto while_317
:whileend_319:
 #                     637:   codes = tree_with_max_depth(max_length)
 
    H[t0+11]() = t0
   # saved bsp, return id:
   H[t0+12]() = 49
   # push arguments:
   H[t0+13]() = H[t0+3](max_length)
   t0 = t0 + 12
   goto tree_with_max_depth
  :return_id_49:
 
 H[t0+10](codes) = t1
 #                     638:   i = 0
 H[t0+4](i) = 0
 #                     639:   while i < len_pM(lengths):
:while_321:
 t2 = H[t0+1](lengths)
 t2 = t2 & 2147483647
 t2 = t2 - 5
 t4 = M[t2] << 8
 t2 = t2 + 1
 t4 = t4 + M[t2]
 t4 = t4 << 8
 t2 = t2 + 1
 t4 = t4 + M[t2]
 t4 = t4 << 8
 t2 = t2 + 1
 t4 = t4 + M[t2]
 t1 = H[t0+4](i) < t4
 ifN t1 goto whileend_323
 #                     640:     len_ = lengths[i]
 t1 = H[t0+1](lengths) >> 31
 if t1 goto isM_325
 t1 = H[t0+1](lengths) + H[t0+4](i)
 t1 = H[t1]()
 goto MorHdone_326
:isM_325:
 t1 = H[t0+1](lengths) & 2147483647
 t1 = t1 + H[t0+4](i)
 t1 = M[t1]
:MorHdone_326:
 H[t0+11](len_) = t1
 #                     641:     if len_ > 0 or max_length == 0:
 t2 = H[t0+11](len_) > 0
 t4 = H[t0+3](max_length) == 0
 t1 = t2 or t4
 ifN t1 goto else_329
 #                     642:       insert(codes, bit_string_from_code_and_length(next_code[len_], len_), symbols[i])
 t1 = H[t0+8](next_code) + H[t0+11](len_)
 t1 = H[t1]()
 
    H[t0+13]() = t0
   # saved bsp, return id:
   H[t0+14]() = 50
   # push arguments:
   H[t0+15]() = t1
   H[t0+16]() = H[t0+11](len_)
   t0 = t0 + 14
   goto bit_string_from_code_and_length
  :return_id_50:
 t2 = t1
 
 t1 = H[t0+2](symbols) >> 31
 if t1 goto isM_331
 t1 = H[t0+2](symbols) + H[t0+4](i)
 t1 = H[t1]()
 goto MorHdone_332
:isM_331:
 t1 = H[t0+2](symbols) & 2147483647
 t1 = t1 + H[t0+4](i)
 t1 = M[t1]
:MorHdone_332:
 
    H[t0+13]() = t0
   # saved bsp, return id:
   H[t0+14]() = 51
   # push arguments:
   H[t0+15]() = H[t0+10](codes)
   H[t0+16]() = t2
   H[t0+17]() = t1
   t0 = t0 + 14
   goto insert
  :return_id_51:
 t4 = t1
 
 #                     643:       next_code[len_] = next_code[len_] + 1
 t2 = H[t0+8](next_code) + H[t0+11](len_)
 t2 = H[t2]()
 t1 = t2 + 1
 t2 = H[t0+8](next_code) + H[t0+11](len_)
 H[t2]() = t1
 goto endif_330
:else_329:
:endif_330:
 #                     644:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_321
:whileend_323:
 #                     645:   free_pH(bl_count)
 
    H[t0+13]() = t0
   # saved bsp, return id:
   H[t0+14]() = 52
   # push arguments:
   H[t0+15]() = H[t0+6](bl_count)
   t0 = t0 + 14
   goto addr_free_pH
  :return_id_52:
 
 #                     646:   free_pH(next_code)
 
    H[t0+13]() = t0
   # saved bsp, return id:
   H[t0+14]() = 53
   # push arguments:
   H[t0+15]() = H[t0+8](next_code)
   t0 = t0 + 14
   goto addr_free_pH
  :return_id_53:
 
 #                     647:   return codes
    t1 = H[t0+10](codes)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:codes_from_lengths_and_symbols_end~:
 #                     649: def codes_from_lengths(lengths): # [] -> Tree
 goto codes_from_lengths_end~
:codes_from_lengths:
 MarkTempVarStart
 # Arg lengths at t0 + 1
 #                     651:   symbols = alloc_pH(len_pM(lengths))
 t1 = H[t0+1](lengths)
 t1 = t1 & 2147483647
 t1 = t1 - 5
 t2 = M[t1] << 8
 t1 = t1 + 1
 t2 = t2 + M[t1]
 t2 = t2 << 8
 t1 = t1 + 1
 t2 = t2 + M[t1]
 t2 = t2 << 8
 t1 = t1 + 1
 t2 = t2 + M[t1]
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 54
   # push arguments:
   H[t0+4]() = t2
   t0 = t0 + 3
   goto addr_alloc_pH
  :return_id_54:
 
 H[t0+2](symbols) = t1
 #                     652:   i = 0
 H[t0+3](i) = 0
 #                     653:   while i < len_pM(lengths):
:while_333:
 t2 = H[t0+1](lengths)
 t2 = t2 & 2147483647
 t2 = t2 - 5
 t3 = M[t2] << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t3 = t3 << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t3 = t3 << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t1 = H[t0+3](i) < t3
 ifN t1 goto whileend_335
 #                     654:     symbols[i] = i
 t1 = H[t0+2](symbols) + H[t0+3](i)
 H[t1]() = H[t0+3](i)
 #                     655:     i += 1
 H[t0+3](i) = H[t0+3](i) + 1
 goto while_333
:whileend_335:
 #                     656:   ret = codes_from_lengths_and_symbols(lengths, symbols)
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 55
   # push arguments:
   H[t0+6]() = H[t0+1](lengths)
   H[t0+7]() = H[t0+2](symbols)
   t0 = t0 + 5
   goto codes_from_lengths_and_symbols
  :return_id_55:
 
 H[t0+4](ret) = t1
 #                     657:   free_pH(symbols)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 56
   # push arguments:
   H[t0+7]() = H[t0+2](symbols)
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_56:
 
 #                     658:   return ret
    t1 = H[t0+4](ret)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:codes_from_lengths_end~:
 #                     662: def uppercase_all(base_word):
 goto uppercase_all_end~
:uppercase_all:
 MarkTempVarStart
 # Arg base_word at t0 + 1
 #                     663:   base_word = array_pM(base_word)
 H[t0+1](base_word) = H[t0+1](base_word)
 #                     664:   l = len_pM(base_word)
 t1 = H[t0+1](base_word)
 t1 = t1 & 2147483647
 t1 = t1 - 5
 t2 = M[t1] << 8
 t1 = t1 + 1
 t2 = t2 + M[t1]
 t2 = t2 << 8
 t1 = t1 + 1
 t2 = t2 + M[t1]
 t2 = t2 << 8
 t1 = t1 + 1
 t2 = t2 + M[t1]
 H[t0+2](l) = t2
 #                     665:   v = alloc_pM(l)
 
    H[t0+3]() = t0
   # saved bsp, return id:
   H[t0+4]() = 57
   # push arguments:
   H[t0+5]() = H[t0+2](l)
   t0 = t0 + 4
   goto addr_alloc_pM
  :return_id_57:
 
 t1 = t1 | 2147483648
 H[t0+3](v) = t1
 #                     666:   i = 0
 H[t0+4](i) = 0
 #                     667:   while i < l:
:while_337:
 t1 = H[t0+4](i) < H[t0+2](l)
 ifN t1 goto whileend_339
 #                     668:     b = base_word[i]
 t1 = H[t0+1](base_word) & 2147483647
 t1 = t1 + H[t0+4](i)
 t1 = M[t1]
 H[t0+5](b) = t1
 #                     669:     if (b >= 0 and b <= 96) or (b >= 123 and b <= 191):
 t3 = H[t0+5](b) >= 0
 t4 = H[t0+5](b) <= 96
 t2 = t3 and t4
 t4 = H[t0+5](b) >= 123
 t5 = H[t0+5](b) <= 191
 t3 = t4 and t5
 t1 = t2 or t3
 ifN t1 goto else_345
 #                     670:       v[i] = b
 t1 = H[t0+3](v) & 2147483647
 t1 = t1 + H[t0+4](i)
 M[t1] = H[t0+5](b)
 #                     671:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto endif_346
:else_345:
 #                     672:     elif b >= 97 and b <= 122:
 t2 = H[t0+5](b) >= 97
 t3 = H[t0+5](b) <= 122
 t1 = t2 and t3
 ifN t1 goto else_349
 #                     673:       v[i] = b ^ 32
 t1 = H[t0+5](b) ^ 32
 t2 = H[t0+3](v) & 2147483647
 t2 = t2 + H[t0+4](i)
 M[t2] = t1
 #                     674:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto endif_350
:else_349:
 #                     675:     elif b >= 192 and b <= 223:
 t2 = H[t0+5](b) >= 192
 t3 = H[t0+5](b) <= 223
 t1 = t2 and t3
 ifN t1 goto else_353
 #                     676:       v[i] = b
 t1 = H[t0+3](v) & 2147483647
 t1 = t1 + H[t0+4](i)
 M[t1] = H[t0+5](b)
 #                     677:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     678:       if i < l:
 t1 = H[t0+4](i) < H[t0+2](l)
 ifN t1 goto else_356
 #                     679:         v[i] = base_word[i] ^ 32
 t2 = H[t0+1](base_word) & 2147483647
 t2 = t2 + H[t0+4](i)
 t2 = M[t2]
 t1 = t2 ^ 32
 t2 = H[t0+3](v) & 2147483647
 t2 = t2 + H[t0+4](i)
 M[t2] = t1
 goto endif_357
:else_356:
:endif_357:
 #                     680:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto endif_354
:else_353:
 #                     681:     elif b >= 224 and b <= 255:
 t2 = H[t0+5](b) >= 224
 t3 = H[t0+5](b) <= 255
 t1 = t2 and t3
 ifN t1 goto else_360
 #                     682:       v[i] = b
 t1 = H[t0+3](v) & 2147483647
 t1 = t1 + H[t0+4](i)
 M[t1] = H[t0+5](b)
 #                     683:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     684:       if i < l:
 t1 = H[t0+4](i) < H[t0+2](l)
 ifN t1 goto else_363
 #                     685:         v[i] = base_word[i]
 t1 = H[t0+1](base_word) & 2147483647
 t1 = t1 + H[t0+4](i)
 t1 = M[t1]
 t2 = H[t0+3](v) & 2147483647
 t2 = t2 + H[t0+4](i)
 M[t2] = t1
 goto endif_364
:else_363:
:endif_364:
 #                     686:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     687:       if i < l:
 t1 = H[t0+4](i) < H[t0+2](l)
 ifN t1 goto else_366
 #                     688:         v[i] = base_word[i] ^ 5
 t2 = H[t0+1](base_word) & 2147483647
 t2 = t2 + H[t0+4](i)
 t2 = M[t2]
 t1 = t2 ^ 5
 t2 = H[t0+3](v) & 2147483647
 t2 = t2 + H[t0+4](i)
 M[t2] = t1
 goto endif_367
:else_366:
:endif_367:
 #                     689:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto endif_361
:else_360:
 #                     691:       error() # unreachable
 error
:endif_361:
:endif_354:
:endif_350:
:endif_346:
 goto while_337
:whileend_339:
 #                     692:   return v
    t1 = H[t0+3](v)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:uppercase_all_end~:
 #                     694: def uppercase_first(base_word):
 goto uppercase_first_end~
:uppercase_first:
 MarkTempVarStart
 # Arg base_word at t0 + 1
 #                     695:   base_word = array_pM(base_word)
 H[t0+1](base_word) = H[t0+1](base_word)
 #                     696:   l = len_pM(base_word)
 t1 = H[t0+1](base_word)
 t1 = t1 & 2147483647
 t1 = t1 - 5
 t2 = M[t1] << 8
 t1 = t1 + 1
 t2 = t2 + M[t1]
 t2 = t2 << 8
 t1 = t1 + 1
 t2 = t2 + M[t1]
 t2 = t2 << 8
 t1 = t1 + 1
 t2 = t2 + M[t1]
 H[t0+2](l) = t2
 #                     697:   if l == 0:
 t1 = H[t0+2](l) == 0
 ifN t1 goto else_369
 #                     698:     return alloc_pM(0)
 
    H[t0+3]() = t0
   # saved bsp, return id:
   H[t0+4]() = 58
   # push arguments:
   H[t0+5]() = 0
   t0 = t0 + 4
   goto addr_alloc_pM
  :return_id_58:
 
 t1 = t1 | 2147483648
    t1 = t1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_370
:else_369:
:endif_370:
 #                     699:   v = alloc_pM(l)
 
    H[t0+3]() = t0
   # saved bsp, return id:
   H[t0+4]() = 59
   # push arguments:
   H[t0+5]() = H[t0+2](l)
   t0 = t0 + 4
   goto addr_alloc_pM
  :return_id_59:
 
 t1 = t1 | 2147483648
 H[t0+3](v) = t1
 #                     700:   i = 0
 H[t0+4](i) = 0
 #                     701:   b = base_word[0]
 t1 = H[t0+1](base_word) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
 H[t0+5](b) = t1
 #                     702:   if (b >= 1 and b <= 96) or (b >= 123 and b <= 191):
 t3 = H[t0+5](b) >= 1
 t4 = H[t0+5](b) <= 96
 t2 = t3 and t4
 t4 = H[t0+5](b) >= 123
 t5 = H[t0+5](b) <= 191
 t3 = t4 and t5
 t1 = t2 or t3
 ifN t1 goto else_375
 #                     703:     v[0] = b
 t1 = H[t0+3](v) & 2147483647
 t1 = t1 + 0
 M[t1] = H[t0+5](b)
 #                     704:     i = 1
 H[t0+4](i) = 1
 goto endif_376
:else_375:
 #                     705:   elif b >= 97 and b <= 122:
 t2 = H[t0+5](b) >= 97
 t3 = H[t0+5](b) <= 122
 t1 = t2 and t3
 ifN t1 goto else_379
 #                     706:     v[0] = b ^ 32
 t1 = H[t0+5](b) ^ 32
 t2 = H[t0+3](v) & 2147483647
 t2 = t2 + 0
 M[t2] = t1
 #                     707:     i = 1
 H[t0+4](i) = 1
 goto endif_380
:else_379:
 #                     708:   elif b >= 192 and b <= 223:
 t2 = H[t0+5](b) >= 192
 t3 = H[t0+5](b) <= 223
 t1 = t2 and t3
 ifN t1 goto else_383
 #                     709:     v[0] = b
 t1 = H[t0+3](v) & 2147483647
 t1 = t1 + 0
 M[t1] = H[t0+5](b)
 #                     710:     if 1 < l:
 t1 = 1 < H[t0+2](l)
 ifN t1 goto else_386
 #                     711:       v[1] = base_word[1] ^ 32
 t2 = H[t0+1](base_word) & 2147483647
 t2 = t2 + 1
 t2 = M[t2]
 t1 = t2 ^ 32
 t2 = H[t0+3](v) & 2147483647
 t2 = t2 + 1
 M[t2] = t1
 goto endif_387
:else_386:
:endif_387:
 #                     712:     i = 2
 H[t0+4](i) = 2
 goto endif_384
:else_383:
 #                     713:   elif b >= 224 and b <= 255:
 t2 = H[t0+5](b) >= 224
 t3 = H[t0+5](b) <= 255
 t1 = t2 and t3
 ifN t1 goto else_390
 #                     714:     v[0] = b
 t1 = H[t0+3](v) & 2147483647
 t1 = t1 + 0
 M[t1] = H[t0+5](b)
 #                     715:     if 1 < l:
 t1 = 1 < H[t0+2](l)
 ifN t1 goto else_393
 #                     716:       v[1] = base_word[1]
 t1 = H[t0+1](base_word) & 2147483647
 t1 = t1 + 1
 t1 = M[t1]
 t2 = H[t0+3](v) & 2147483647
 t2 = t2 + 1
 M[t2] = t1
 goto endif_394
:else_393:
:endif_394:
 #                     717:     if 2 < l:
 t1 = 2 < H[t0+2](l)
 ifN t1 goto else_396
 #                     718:       v[2] = base_word[2] ^ 5
 t2 = H[t0+1](base_word) & 2147483647
 t2 = t2 + 2
 t2 = M[t2]
 t1 = t2 ^ 5
 t2 = H[t0+3](v) & 2147483647
 t2 = t2 + 2
 M[t2] = t1
 goto endif_397
:else_396:
:endif_397:
 #                     719:     i = 3
 H[t0+4](i) = 3
 goto endif_391
:else_390:
 #                     721:     error() # unreachable
 error
:endif_391:
:endif_384:
:endif_380:
:endif_376:
 #                     722:   while i < l:
:while_398:
 t1 = H[t0+4](i) < H[t0+2](l)
 ifN t1 goto whileend_400
 #                     723:     v[i] = base_word[i]
 t1 = H[t0+1](base_word) & 2147483647
 t1 = t1 + H[t0+4](i)
 t1 = M[t1]
 t2 = H[t0+3](v) & 2147483647
 t2 = t2 + H[t0+4](i)
 M[t2] = t1
 #                     724:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_398
:whileend_400:
 #                     725:   return v
    t1 = H[t0+3](v)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:uppercase_first_end~:
 #                     727: def transformation(id_, base_word):
 goto transformation_end~
:transformation:
 MarkTempVarStart
 # Arg id_ at t0 + 1
 # Arg base_word at t0 + 2
 #                     730:   base_word = array_pM(base_word)
 H[t0+2](base_word) = H[t0+2](base_word)
 #                     731:   l = len_pM(base_word)
 t1 = H[t0+2](base_word)
 t1 = t1 & 2147483647
 t1 = t1 - 5
 t2 = M[t1] << 8
 t1 = t1 + 1
 t2 = t2 + M[t1]
 t2 = t2 << 8
 t1 = t1 + 1
 t2 = t2 + M[t1]
 t2 = t2 << 8
 t1 = t1 + 1
 t2 = t2 + M[t1]
 H[t0+3](l) = t2
 #                     732:   i = 0
 H[t0+4](i) = 0
 #                     733:   if id_ == 0:
 t1 = H[t0+1](id_) == 0
 ifN t1 goto else_403
 #                     734:     return base_word
    t1 = H[t0+2](base_word)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_404
:else_403:
 #                     735:   elif id_ == 1 or id_ == 19 or id_ == 20 or id_ == 22 or id_ == 24 or id_ == 36 or id_ == 51 or id_ == 57 or id_ == 76:  # 1 hinten an
 t9 = H[t0+1](id_) == 1
 t10 = H[t0+1](id_) == 19
 t8 = t9 or t10
 t9 = H[t0+1](id_) == 20
 t7 = t8 or t9
 t8 = H[t0+1](id_) == 22
 t6 = t7 or t8
 t7 = H[t0+1](id_) == 24
 t5 = t6 or t7
 t6 = H[t0+1](id_) == 36
 t4 = t5 or t6
 t5 = H[t0+1](id_) == 51
 t3 = t4 or t5
 t4 = H[t0+1](id_) == 57
 t2 = t3 or t4
 t3 = H[t0+1](id_) == 76
 t1 = t2 or t3
 ifN t1 goto else_414
 #                     736:     v = alloc_pM(l+1)
 t1 = H[t0+3](l) + 1
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 60
   # push arguments:
   H[t0+7]() = t1
   t0 = t0 + 6
   goto addr_alloc_pM
  :return_id_60:
 t2 = t1
 
 t2 = t2 | 2147483648
 H[t0+5](v) = t2
 #                     737:     while i < l:
:while_416:
 t1 = H[t0+4](i) < H[t0+3](l)
 ifN t1 goto whileend_418
 #                     738:       v[i] = base_word[i]
 t1 = H[t0+2](base_word) & 2147483647
 t1 = t1 + H[t0+4](i)
 t1 = M[t1]
 t2 = H[t0+5](v) & 2147483647
 t2 = t2 + H[t0+4](i)
 M[t2] = t1
 #                     739:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_416
:whileend_418:
 #                     740:     if id_ == 1:
 t1 = H[t0+1](id_) == 1
 ifN t1 goto else_421
 #                     741:       v[i] = 0x20
 t1 = H[t0+5](v) & 2147483647
 t1 = t1 + H[t0+4](i)
 M[t1] = 32
 goto endif_422
:else_421:
 #                     742:     elif id_ == 19:
 t1 = H[t0+1](id_) == 19
 ifN t1 goto else_424
 #                     743:       v[i] = 0x22
 t1 = H[t0+5](v) & 2147483647
 t1 = t1 + H[t0+4](i)
 M[t1] = 34
 goto endif_425
:else_424:
 #                     744:     elif id_ == 20:
 t1 = H[t0+1](id_) == 20
 ifN t1 goto else_427
 #                     745:       v[i] = 0x2e
 t1 = H[t0+5](v) & 2147483647
 t1 = t1 + H[t0+4](i)
 M[t1] = 46
 goto endif_428
:else_427:
 #                     746:     elif id_ == 22:
 t1 = H[t0+1](id_) == 22
 ifN t1 goto else_430
 #                     747:       v[i] = 0x0a
 t1 = H[t0+5](v) & 2147483647
 t1 = t1 + H[t0+4](i)
 M[t1] = 10
 goto endif_431
:else_430:
 #                     748:     elif id_ == 24:
 t1 = H[t0+1](id_) == 24
 ifN t1 goto else_433
 #                     749:       v[i] = 0x5d
 t1 = H[t0+5](v) & 2147483647
 t1 = t1 + H[t0+4](i)
 M[t1] = 93
 goto endif_434
:else_433:
 #                     750:     elif id_ == 36:
 t1 = H[t0+1](id_) == 36
 ifN t1 goto else_436
 #                     751:       v[i] = 0x27
 t1 = H[t0+5](v) & 2147483647
 t1 = t1 + H[t0+4](i)
 M[t1] = 39
 goto endif_437
:else_436:
 #                     752:     elif id_ == 51:
 t1 = H[t0+1](id_) == 51
 ifN t1 goto else_439
 #                     753:       v[i] = 0x3a
 t1 = H[t0+5](v) & 2147483647
 t1 = t1 + H[t0+4](i)
 M[t1] = 58
 goto endif_440
:else_439:
 #                     754:     elif id_ == 57:
 t1 = H[t0+1](id_) == 57
 ifN t1 goto else_442
 #                     755:       v[i] = 0x28
 t1 = H[t0+5](v) & 2147483647
 t1 = t1 + H[t0+4](i)
 M[t1] = 40
 goto endif_443
:else_442:
 #                     756:     elif id_ == 76:
 t1 = H[t0+1](id_) == 76
 ifN t1 goto else_445
 #                     757:       v[i] = 0x2c
 t1 = H[t0+5](v) & 2147483647
 t1 = t1 + H[t0+4](i)
 M[t1] = 44
 goto endif_446
:else_445:
:endif_446:
:endif_443:
:endif_440:
:endif_437:
:endif_434:
:endif_431:
:endif_428:
:endif_425:
:endif_422:
 goto endif_415
:else_414:
 #                     758:   elif id_ == 2 or id_ == 67 or id_ == 71 or id_ == 77 or id_ == 89 or id_ == 103:  # 1 vorne 1 hinten an
 t6 = H[t0+1](id_) == 2
 t7 = H[t0+1](id_) == 67
 t5 = t6 or t7
 t6 = H[t0+1](id_) == 71
 t4 = t5 or t6
 t5 = H[t0+1](id_) == 77
 t3 = t4 or t5
 t4 = H[t0+1](id_) == 89
 t2 = t3 or t4
 t3 = H[t0+1](id_) == 103
 t1 = t2 or t3
 ifN t1 goto else_453
 #                     759:     v = alloc_pM(l+2)
 t1 = H[t0+3](l) + 2
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 61
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_alloc_pM
  :return_id_61:
 t2 = t1
 
 t2 = t2 | 2147483648
 H[t0+5](v) = t2
 #                     760:     if id_ == 2 or id_ == 71 or id_ == 89 or id_ == 103:
 t4 = H[t0+1](id_) == 2
 t5 = H[t0+1](id_) == 71
 t3 = t4 or t5
 t4 = H[t0+1](id_) == 89
 t2 = t3 or t4
 t3 = H[t0+1](id_) == 103
 t1 = t2 or t3
 ifN t1 goto else_459
 #                     761:       v[i] = 0x20
 t1 = H[t0+5](v) & 2147483647
 t1 = t1 + H[t0+4](i)
 M[t1] = 32
 goto endif_460
:else_459:
 #                     762:     elif id_ == 67 or id_ == 77:
 t2 = H[t0+1](id_) == 67
 t3 = H[t0+1](id_) == 77
 t1 = t2 or t3
 ifN t1 goto else_463
 #                     763:       v[i] = 0x2e
 t1 = H[t0+5](v) & 2147483647
 t1 = t1 + H[t0+4](i)
 M[t1] = 46
 goto endif_464
:else_463:
:endif_464:
:endif_460:
 #                     764:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     765:     while i <= l:
:while_465:
 t1 = H[t0+4](i) <= H[t0+3](l)
 ifN t1 goto whileend_467
 #                     766:       v[i] = base_word[i-1]
 t1 = H[t0+4](i) - 1
 t2 = H[t0+2](base_word) & 2147483647
 t2 = t2 + t1
 t2 = M[t2]
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = t2
 #                     767:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_465
:whileend_467:
 #                     768:     if id_ == 2 or id_ == 77:
 t3 = H[t0+1](id_) == 2
 t4 = H[t0+1](id_) == 77
 t2 = t3 or t4
 ifN t2 goto else_471
 #                     769:       v[i] = 0x20
 t2 = H[t0+5](v) & 2147483647
 t2 = t2 + H[t0+4](i)
 M[t2] = 32
 goto endif_472
:else_471:
 #                     770:     elif id_ == 67 or id_ == 89:
 t3 = H[t0+1](id_) == 67
 t4 = H[t0+1](id_) == 89
 t2 = t3 or t4
 ifN t2 goto else_475
 #                     771:       v[i] = 0x28
 t2 = H[t0+5](v) & 2147483647
 t2 = t2 + H[t0+4](i)
 M[t2] = 40
 goto endif_476
:else_475:
 #                     772:     elif id_ == 71:
 t2 = H[t0+1](id_) == 71
 ifN t2 goto else_478
 #                     773:       v[i] = 0x2e
 t2 = H[t0+5](v) & 2147483647
 t2 = t2 + H[t0+4](i)
 M[t2] = 46
 goto endif_479
:else_478:
 #                     774:     elif id_ == 103:
 t2 = H[t0+1](id_) == 103
 ifN t2 goto else_481
 #                     775:       v[i] = 0x2c
 t2 = H[t0+5](v) & 2147483647
 t2 = t2 + H[t0+4](i)
 M[t2] = 44
 goto endif_482
:else_481:
:endif_482:
:endif_479:
:endif_476:
:endif_472:
 goto endif_454
:else_453:
 #                     776:   elif id_ == 3 or id_ == 11 or id_ == 26 or id_ == 34 or id_ == 39 or id_ == 40 or id_ == 54 or id_ == 55:
 t9 = H[t0+1](id_) == 3
 t10 = H[t0+1](id_) == 11
 t8 = t9 or t10
 t9 = H[t0+1](id_) == 26
 t7 = t8 or t9
 t8 = H[t0+1](id_) == 34
 t6 = t7 or t8
 t7 = H[t0+1](id_) == 39
 t5 = t6 or t7
 t6 = H[t0+1](id_) == 40
 t4 = t5 or t6
 t5 = H[t0+1](id_) == 54
 t3 = t4 or t5
 t4 = H[t0+1](id_) == 55
 t2 = t3 or t4
 ifN t2 goto else_491
 #                     777:     if id_ == 3:
 t2 = H[t0+1](id_) == 3
 ifN t2 goto else_494
 #                     778:       j = 1
 H[t0+6](j) = 1
 goto endif_495
:else_494:
 #                     779:     elif id_ == 11:
 t2 = H[t0+1](id_) == 11
 ifN t2 goto else_497
 #                     780:       j = 2
 H[t0+6](j) = 2
 goto endif_498
:else_497:
 #                     781:     elif id_ == 26:
 t2 = H[t0+1](id_) == 26
 ifN t2 goto else_500
 #                     782:       j = 3
 H[t0+6](j) = 3
 goto endif_501
:else_500:
 #                     783:     elif id_ == 34:
 t2 = H[t0+1](id_) == 34
 ifN t2 goto else_503
 #                     784:       j = 4
 H[t0+6](j) = 4
 goto endif_504
:else_503:
 #                     785:     elif id_ == 39:
 t2 = H[t0+1](id_) == 39
 ifN t2 goto else_506
 #                     786:       j = 5
 H[t0+6](j) = 5
 goto endif_507
:else_506:
 #                     787:     elif id_ == 40:
 t2 = H[t0+1](id_) == 40
 ifN t2 goto else_509
 #                     788:       j = 6
 H[t0+6](j) = 6
 goto endif_510
:else_509:
 #                     789:     elif id_ == 54:
 t2 = H[t0+1](id_) == 54
 ifN t2 goto else_512
 #                     790:       j = 9
 H[t0+6](j) = 9
 goto endif_513
:else_512:
 #                     791:     elif id_ == 55:
 t2 = H[t0+1](id_) == 55
 ifN t2 goto else_515
 #                     792:       j = 7
 H[t0+6](j) = 7
 goto endif_516
:else_515:
:endif_516:
:endif_513:
:endif_510:
:endif_507:
:endif_504:
:endif_501:
:endif_498:
:endif_495:
 #                     793:     if l-1 < j:
 t3 = H[t0+3](l) - 1
 t2 = t3 < H[t0+6](j)
 ifN t2 goto else_518
 #                     794:       j = l-1
 t2 = H[t0+3](l) - 1
 H[t0+6](j) = t2
 goto endif_519
:else_518:
:endif_519:
 #                     795:     v = alloc_pM(l-j)
 t2 = H[t0+3](l) - H[t0+6](j)
 
    H[t0+8]() = t0
   # saved bsp, return id:
   H[t0+9]() = 62
   # push arguments:
   H[t0+10]() = t2
   t0 = t0 + 9
   goto addr_alloc_pM
  :return_id_62:
 t3 = t1
 
 t3 = t3 | 2147483648
 H[t0+5](v) = t3
 #                     796:     while i < l-j:
:while_520:
 t3 = H[t0+3](l) - H[t0+6](j)
 t2 = H[t0+4](i) < t3
 ifN t2 goto whileend_522
 #                     797:       v[i] = base_word[i+j]
 t2 = H[t0+4](i) + H[t0+6](j)
 t3 = H[t0+2](base_word) & 2147483647
 t3 = t3 + t2
 t3 = M[t3]
 t4 = H[t0+5](v) & 2147483647
 t4 = t4 + H[t0+4](i)
 M[t4] = t3
 #                     798:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_520
:whileend_522:
 goto endif_492
:else_491:
 #                     799:   elif id_ == 4 or id_ == 66 or id_ == 74 or id_ == 78 or id_ == 79 or id_ == 99:  # upper first 1 hinten an
 t8 = H[t0+1](id_) == 4
 t9 = H[t0+1](id_) == 66
 t7 = t8 or t9
 t8 = H[t0+1](id_) == 74
 t6 = t7 or t8
 t7 = H[t0+1](id_) == 78
 t5 = t6 or t7
 t6 = H[t0+1](id_) == 79
 t4 = t5 or t6
 t5 = H[t0+1](id_) == 99
 t3 = t4 or t5
 ifN t3 goto else_530
 #                     800:     u = uppercase_first(base_word)
 
    H[t0+9]() = t0
   # saved bsp, return id:
   H[t0+10]() = 63
   # push arguments:
   H[t0+11]() = H[t0+2](base_word)
   t0 = t0 + 10
   goto uppercase_first
  :return_id_63:
 t3 = t1
 
 H[t0+7](u) = t3
 #                     801:     j = len_pM(u)
 t3 = H[t0+7](u)
 t3 = t3 & 2147483647
 t3 = t3 - 5
 t4 = M[t3] << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t4 = t4 << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t4 = t4 << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 H[t0+6](j) = t4
 #                     802:     v = alloc_pM(j+1)
 t3 = H[t0+6](j) + 1
 
    H[t0+10]() = t0
   # saved bsp, return id:
   H[t0+11]() = 64
   # push arguments:
   H[t0+12]() = t3
   t0 = t0 + 11
   goto addr_alloc_pM
  :return_id_64:
 t4 = t1
 
 t4 = t4 | 2147483648
 H[t0+5](v) = t4
 #                     803:     while i < j:
:while_532:
 t3 = H[t0+4](i) < H[t0+6](j)
 ifN t3 goto whileend_534
 #                     804:       v[i] = u[i]
 t3 = H[t0+7](u) >> 31
 if t3 goto isM_536
 t3 = H[t0+7](u) + H[t0+4](i)
 t3 = H[t3]()
 goto MorHdone_537
:isM_536:
 t3 = H[t0+7](u) & 2147483647
 t3 = t3 + H[t0+4](i)
 t3 = M[t3]
:MorHdone_537:
 t4 = H[t0+5](v) & 2147483647
 t4 = t4 + H[t0+4](i)
 M[t4] = t3
 #                     805:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_532
:whileend_534:
 #                     806:     if id_ == 4:
 t3 = H[t0+1](id_) == 4
 ifN t3 goto else_539
 #                     807:       v[i] = 0x20
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 32
 goto endif_540
:else_539:
 #                     808:     elif id_ == 66:
 t3 = H[t0+1](id_) == 66
 ifN t3 goto else_542
 #                     809:       v[i] = 0x22
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 34
 goto endif_543
:else_542:
 #                     810:     elif id_ == 74:
 t3 = H[t0+1](id_) == 74
 ifN t3 goto else_545
 #                     811:       v[i] = 0x27
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 39
 goto endif_546
:else_545:
 #                     812:     elif id_ == 78:
 t3 = H[t0+1](id_) == 78
 ifN t3 goto else_548
 #                     813:       v[i] = 0x28
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 40
 goto endif_549
:else_548:
 #                     814:     elif id_ == 79:
 t3 = H[t0+1](id_) == 79
 ifN t3 goto else_551
 #                     815:       v[i] = 0x2e
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 46
 goto endif_552
:else_551:
 #                     816:     elif id_ == 99:
 t3 = H[t0+1](id_) == 99
 ifN t3 goto else_554
 #                     817:       v[i] = 0x2c
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 44
 goto endif_555
:else_554:
:endif_555:
:endif_552:
:endif_549:
:endif_546:
:endif_543:
:endif_540:
 #                     818:     free_pM(u)
 t3 = H[t0+7](u) & 2147483647
 
    H[t0+10]() = t0
   # saved bsp, return id:
   H[t0+11]() = 65
   # push arguments:
   H[t0+12]() = t3
   t0 = t0 + 11
   goto addr_free_pM
  :return_id_65:
 t4 = t1
 
 goto endif_531
:else_530:
 #                     819:   elif id_ == 5 or id_ == 10 or id_ == 25 or id_ == 80 or id_ == 93:  # 5 hinten an
 t7 = H[t0+1](id_) == 5
 t8 = H[t0+1](id_) == 10
 t6 = t7 or t8
 t7 = H[t0+1](id_) == 25
 t5 = t6 or t7
 t6 = H[t0+1](id_) == 80
 t4 = t5 or t6
 t5 = H[t0+1](id_) == 93
 t3 = t4 or t5
 ifN t3 goto else_561
 #                     820:     v = alloc_pM(l+5)
 t3 = H[t0+3](l) + 5
 
    H[t0+10]() = t0
   # saved bsp, return id:
   H[t0+11]() = 66
   # push arguments:
   H[t0+12]() = t3
   t0 = t0 + 11
   goto addr_alloc_pM
  :return_id_66:
 t4 = t1
 
 t4 = t4 | 2147483648
 H[t0+5](v) = t4
 #                     821:     while i < l:
:while_563:
 t3 = H[t0+4](i) < H[t0+3](l)
 ifN t3 goto whileend_565
 #                     822:       v[i] = base_word[i]
 t3 = H[t0+2](base_word) & 2147483647
 t3 = t3 + H[t0+4](i)
 t3 = M[t3]
 t4 = H[t0+5](v) & 2147483647
 t4 = t4 + H[t0+4](i)
 M[t4] = t3
 #                     823:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_563
:whileend_565:
 #                     824:     if id_ == 93:
 t3 = H[t0+1](id_) == 93
 ifN t3 goto else_568
 #                     825:       v[i] = 0x6c
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 108
 goto endif_569
:else_568:
 #                     827:       v[i] = 0x20
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 32
:endif_569:
 #                     828:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     829:     if id_ == 5:
 t3 = H[t0+1](id_) == 5
 ifN t3 goto else_571
 #                     830:       v[i] = 0x74
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 116
 goto endif_572
:else_571:
 #                     831:     elif id_ == 10:
 t3 = H[t0+1](id_) == 10
 ifN t3 goto else_574
 #                     832:       v[i] = 0x61
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 97
 goto endif_575
:else_574:
 #                     833:     elif id_ == 25:
 t3 = H[t0+1](id_) == 25
 ifN t3 goto else_577
 #                     834:       v[i] = 0x66
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 102
 goto endif_578
:else_577:
 #                     835:     elif id_ == 80:
 t3 = H[t0+1](id_) == 80
 ifN t3 goto else_580
 #                     836:       v[i] = 0x6e
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 110
 goto endif_581
:else_580:
 #                     837:     elif id_ == 93:
 t3 = H[t0+1](id_) == 93
 ifN t3 goto else_583
 #                     838:       v[i] = 0x65
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 101
 goto endif_584
:else_583:
:endif_584:
:endif_581:
:endif_578:
:endif_575:
:endif_572:
 #                     839:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     840:     if id_ == 5:
 t3 = H[t0+1](id_) == 5
 ifN t3 goto else_586
 #                     841:       v[i] = 0x68
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 104
 goto endif_587
:else_586:
 #                     842:     elif id_ == 10:
 t3 = H[t0+1](id_) == 10
 ifN t3 goto else_589
 #                     843:       v[i] = 0x6e
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 110
 goto endif_590
:else_589:
 #                     844:     elif id_ == 25 or id_ == 80:
 t4 = H[t0+1](id_) == 25
 t5 = H[t0+1](id_) == 80
 t3 = t4 or t5
 ifN t3 goto else_593
 #                     845:       v[i] = 0x6f
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 111
 goto endif_594
:else_593:
 #                     846:     elif id_ == 93:
 t3 = H[t0+1](id_) == 93
 ifN t3 goto else_596
 #                     847:       v[i] = 0x73
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 115
 goto endif_597
:else_596:
:endif_597:
:endif_594:
:endif_590:
:endif_587:
 #                     848:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     849:     if id_ == 5:
 t3 = H[t0+1](id_) == 5
 ifN t3 goto else_599
 #                     850:       v[i] = 0x65
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 101
 goto endif_600
:else_599:
 #                     851:     elif id_ == 10:
 t3 = H[t0+1](id_) == 10
 ifN t3 goto else_602
 #                     852:       v[i] = 0x64
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 100
 goto endif_603
:else_602:
 #                     853:     elif id_ == 25:
 t3 = H[t0+1](id_) == 25
 ifN t3 goto else_605
 #                     854:       v[i] = 0x72
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 114
 goto endif_606
:else_605:
 #                     855:     elif id_ == 80:
 t3 = H[t0+1](id_) == 80
 ifN t3 goto else_608
 #                     856:       v[i] = 0x74
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 116
 goto endif_609
:else_608:
 #                     857:     elif id_ == 93:
 t3 = H[t0+1](id_) == 93
 ifN t3 goto else_611
 #                     858:       v[i] = 0x73
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 115
 goto endif_612
:else_611:
:endif_612:
:endif_609:
:endif_606:
:endif_603:
:endif_600:
 #                     859:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     860:     v[i] = 0x20
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 32
 goto endif_562
:else_561:
 #                     861:   elif id_ == 6 or id_ == 32:  # 1 vorne an
 t4 = H[t0+1](id_) == 6
 t5 = H[t0+1](id_) == 32
 t3 = t4 or t5
 ifN t3 goto else_615
 #                     862:     v = alloc_pM(l+1)
 t3 = H[t0+3](l) + 1
 
    H[t0+10]() = t0
   # saved bsp, return id:
   H[t0+11]() = 67
   # push arguments:
   H[t0+12]() = t3
   t0 = t0 + 11
   goto addr_alloc_pM
  :return_id_67:
 t4 = t1
 
 t4 = t4 | 2147483648
 H[t0+5](v) = t4
 #                     863:     if id_ == 6:
 t3 = H[t0+1](id_) == 6
 ifN t3 goto else_618
 #                     864:       v[i] = 0x20
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 32
 goto endif_619
:else_618:
 #                     865:     elif id_ == 32:
 t3 = H[t0+1](id_) == 32
 ifN t3 goto else_621
 #                     866:       v[i] = 0x2e
 t3 = H[t0+5](v) & 2147483647
 t3 = t3 + H[t0+4](i)
 M[t3] = 46
 goto endif_622
:else_621:
:endif_622:
:endif_619:
 #                     867:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     868:     while i <= l:
:while_623:
 t3 = H[t0+4](i) <= H[t0+3](l)
 ifN t3 goto whileend_625
 #                     869:       v[i] = base_word[i-1]
 t3 = H[t0+4](i) - 1
 t4 = H[t0+2](base_word) & 2147483647
 t4 = t4 + t3
 t4 = M[t4]
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = t4
 #                     870:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_623
:whileend_625:
 goto endif_616
:else_615:
 #                     871:   elif id_ == 7 or id_ == 13 or id_ == 18:  # 2 vorne an 1 hinten an
 t6 = H[t0+1](id_) == 7
 t7 = H[t0+1](id_) == 13
 t5 = t6 or t7
 t6 = H[t0+1](id_) == 18
 t4 = t5 or t6
 ifN t4 goto else_630
 #                     872:     v = alloc_pM(l+3)
 t4 = H[t0+3](l) + 3
 
    H[t0+11]() = t0
   # saved bsp, return id:
   H[t0+12]() = 68
   # push arguments:
   H[t0+13]() = t4
   t0 = t0 + 12
   goto addr_alloc_pM
  :return_id_68:
 t5 = t1
 
 t5 = t5 | 2147483648
 H[t0+5](v) = t5
 #                     873:     if id_ == 7:
 t4 = H[t0+1](id_) == 7
 ifN t4 goto else_633
 #                     874:       v[i] = 0x73
 t4 = H[t0+5](v) & 2147483647
 t4 = t4 + H[t0+4](i)
 M[t4] = 115
 goto endif_634
:else_633:
 #                     875:     elif id_ == 13:
 t4 = H[t0+1](id_) == 13
 ifN t4 goto else_636
 #                     876:       v[i] = 0x2c
 t4 = H[t0+5](v) & 2147483647
 t4 = t4 + H[t0+4](i)
 M[t4] = 44
 goto endif_637
:else_636:
 #                     877:     elif id_ == 18:
 t4 = H[t0+1](id_) == 18
 ifN t4 goto else_639
 #                     878:       v[i] = 0x65
 t4 = H[t0+5](v) & 2147483647
 t4 = t4 + H[t0+4](i)
 M[t4] = 101
 goto endif_640
:else_639:
:endif_640:
:endif_637:
:endif_634:
 #                     879:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     880:     v[i] = 0x20
 t4 = H[t0+5](v) & 2147483647
 t4 = t4 + H[t0+4](i)
 M[t4] = 32
 #                     881:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     882:     l += 1
 H[t0+3](l) = H[t0+3](l) + 1
 #                     883:     while i <= l:
:while_641:
 t4 = H[t0+4](i) <= H[t0+3](l)
 ifN t4 goto whileend_643
 #                     884:       v[i] = base_word[i-2]
 t4 = H[t0+4](i) - 2
 t5 = H[t0+2](base_word) & 2147483647
 t5 = t5 + t4
 t5 = M[t5]
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = t5
 #                     885:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_641
:whileend_643:
 #                     886:     v[i] = 0x20
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 32
 goto endif_631
:else_630:
 #                     887:   elif id_ == 8 or id_ == 16 or id_ == 17 or id_ == 38 or id_ == 45 or id_ == 46 or id_ == 47 or id_ == 60 or id_ == 90 or id_ == 92 or id_ == 95 or id_ == 100 or id_ == 106:  # 4 hinten an
 t17 = H[t0+1](id_) == 8
 t18 = H[t0+1](id_) == 16
 t16 = t17 or t18
 t17 = H[t0+1](id_) == 17
 t15 = t16 or t17
 t16 = H[t0+1](id_) == 38
 t14 = t15 or t16
 t15 = H[t0+1](id_) == 45
 t13 = t14 or t15
 t14 = H[t0+1](id_) == 46
 t12 = t13 or t14
 t13 = H[t0+1](id_) == 47
 t11 = t12 or t13
 t12 = H[t0+1](id_) == 60
 t10 = t11 or t12
 t11 = H[t0+1](id_) == 90
 t9 = t10 or t11
 t10 = H[t0+1](id_) == 92
 t8 = t9 or t10
 t9 = H[t0+1](id_) == 95
 t7 = t8 or t9
 t8 = H[t0+1](id_) == 100
 t6 = t7 or t8
 t7 = H[t0+1](id_) == 106
 t5 = t6 or t7
 ifN t5 goto else_658
 #                     888:     v = alloc_pM(l+4)
 t5 = H[t0+3](l) + 4
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 69
   # push arguments:
   H[t0+14]() = t5
   t0 = t0 + 13
   goto addr_alloc_pM
  :return_id_69:
 t6 = t1
 
 t6 = t6 | 2147483648
 H[t0+5](v) = t6
 #                     889:     while i < l:
:while_660:
 t5 = H[t0+4](i) < H[t0+3](l)
 ifN t5 goto whileend_662
 #                     890:       v[i] = base_word[i]
 t5 = H[t0+2](base_word) & 2147483647
 t5 = t5 + H[t0+4](i)
 t5 = M[t5]
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = t5
 #                     891:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_660
:whileend_662:
 #                     892:     if id_ == 90:
 t5 = H[t0+1](id_) == 90
 ifN t5 goto else_665
 #                     893:       v[i] = 0x66
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 102
 goto endif_666
:else_665:
 #                     894:     elif id_ == 92 or id_ == 100:
 t6 = H[t0+1](id_) == 92
 t7 = H[t0+1](id_) == 100
 t5 = t6 or t7
 ifN t5 goto else_669
 #                     895:       v[i] = 0x69
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 105
 goto endif_670
:else_669:
 #                     896:     elif id_ == 95:
 t5 = H[t0+1](id_) == 95
 ifN t5 goto else_672
 #                     897:       v[i] = 0x65
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 101
 goto endif_673
:else_672:
 #                     898:     elif id_ == 106:
 t5 = H[t0+1](id_) == 106
 ifN t5 goto else_675
 #                     899:       v[i] = 0x6f
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 111
 goto endif_676
:else_675:
 #                     901:       v[i] = 0x20
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 32
:endif_676:
:endif_673:
:endif_670:
:endif_666:
 #                     902:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     903:     if id_ == 8:
 t5 = H[t0+1](id_) == 8
 ifN t5 goto else_678
 #                     904:       v[i] = 0x6f
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 111
 goto endif_679
:else_678:
 #                     905:     elif id_ == 16:
 t5 = H[t0+1](id_) == 16
 ifN t5 goto else_681
 #                     906:       v[i] = 0x69
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 105
 goto endif_682
:else_681:
 #                     907:     elif id_ == 17:
 t5 = H[t0+1](id_) == 17
 ifN t5 goto else_684
 #                     908:       v[i] = 0x74
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 116
 goto endif_685
:else_684:
 #                     909:     elif id_ == 38:
 t5 = H[t0+1](id_) == 38
 ifN t5 goto else_687
 #                     910:       v[i] = 0x62
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 98
 goto endif_688
:else_687:
 #                     911:     elif id_ == 45:
 t5 = H[t0+1](id_) == 45
 ifN t5 goto else_690
 #                     912:       v[i] = 0x6f
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 111
 goto endif_691
:else_690:
 #                     913:     elif id_ == 46 or id_ == 60:
 t6 = H[t0+1](id_) == 46
 t7 = H[t0+1](id_) == 60
 t5 = t6 or t7
 ifN t5 goto else_694
 #                     914:       v[i] = 0x61
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 97
 goto endif_695
:else_694:
 #                     915:     elif id_ == 47:
 t5 = H[t0+1](id_) == 47
 ifN t5 goto else_697
 #                     916:       v[i] = 0x69
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 105
 goto endif_698
:else_697:
 #                     917:     elif id_ == 90 or id_ == 106:
 t6 = H[t0+1](id_) == 90
 t7 = H[t0+1](id_) == 106
 t5 = t6 or t7
 ifN t5 goto else_701
 #                     918:       v[i] = 0x75
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 117
 goto endif_702
:else_701:
 #                     919:     elif id_ == 92:
 t5 = H[t0+1](id_) == 92
 ifN t5 goto else_704
 #                     920:       v[i] = 0x76
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 118
 goto endif_705
:else_704:
 #                     921:     elif id_ == 95:
 t5 = H[t0+1](id_) == 95
 ifN t5 goto else_707
 #                     922:       v[i] = 0x73
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 115
 goto endif_708
:else_707:
 #                     923:     elif id_ == 100:
 t5 = H[t0+1](id_) == 100
 ifN t5 goto else_710
 #                     924:       v[i] = 0x7a
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 122
 goto endif_711
:else_710:
:endif_711:
:endif_708:
:endif_705:
:endif_702:
:endif_698:
:endif_695:
:endif_691:
:endif_688:
:endif_685:
:endif_682:
:endif_679:
 #                     925:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     926:     if id_ == 8:
 t5 = H[t0+1](id_) == 8
 ifN t5 goto else_713
 #                     927:       v[i] = 0x66
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 102
 goto endif_714
:else_713:
 #                     928:     elif id_ == 16:
 t5 = H[t0+1](id_) == 16
 ifN t5 goto else_716
 #                     929:       v[i] = 0x6e
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 110
 goto endif_717
:else_716:
 #                     930:     elif id_ == 17:
 t5 = H[t0+1](id_) == 17
 ifN t5 goto else_719
 #                     931:       v[i] = 0x6f
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 111
 goto endif_720
:else_719:
 #                     932:     elif id_ == 38:
 t5 = H[t0+1](id_) == 38
 ifN t5 goto else_722
 #                     933:       v[i] = 0x79
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 121
 goto endif_723
:else_722:
 #                     934:     elif id_ == 45:
 t5 = H[t0+1](id_) == 45
 ifN t5 goto else_725
 #                     935:       v[i] = 0x6e
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 110
 goto endif_726
:else_725:
 #                     936:     elif id_ == 46 or id_ == 47 or id_ == 106:
 t7 = H[t0+1](id_) == 46
 t8 = H[t0+1](id_) == 47
 t6 = t7 or t8
 t7 = H[t0+1](id_) == 106
 t5 = t6 or t7
 ifN t5 goto else_730
 #                     937:       v[i] = 0x73
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 115
 goto endif_731
:else_730:
 #                     938:     elif id_ == 60 or id_ == 95:
 t6 = H[t0+1](id_) == 60
 t7 = H[t0+1](id_) == 95
 t5 = t6 or t7
 ifN t5 goto else_734
 #                     939:       v[i] = 0x74
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 116
 goto endif_735
:else_734:
 #                     940:     elif id_ == 90:
 t5 = H[t0+1](id_) == 90
 ifN t5 goto else_737
 #                     941:       v[i] = 0x6c
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 108
 goto endif_738
:else_737:
 #                     942:     elif id_ == 92 or id_ == 100:
 t6 = H[t0+1](id_) == 92
 t7 = H[t0+1](id_) == 100
 t5 = t6 or t7
 ifN t5 goto else_741
 #                     943:       v[i] = 0x65
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 101
 goto endif_742
:else_741:
:endif_742:
:endif_738:
:endif_735:
:endif_731:
:endif_726:
:endif_723:
:endif_720:
:endif_717:
:endif_714:
 #                     944:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     945:     v[i] = 0x20
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 32
 goto endif_659
:else_658:
 #                     946:   elif id_ == 9:
 t5 = H[t0+1](id_) == 9
 ifN t5 goto else_744
 #                     947:     v = uppercase_first(base_word)
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 70
   # push arguments:
   H[t0+14]() = H[t0+2](base_word)
   t0 = t0 + 13
   goto uppercase_first
  :return_id_70:
 t5 = t1
 
 H[t0+5](v) = t5
 goto endif_745
:else_744:
 #                     948:   elif id_ == 12 or id_ == 23 or id_ == 27 or id_ == 42 or id_ == 48 or id_ == 56 or id_ == 59 or id_ == 63 or id_ == 64:
 t13 = H[t0+1](id_) == 12
 t14 = H[t0+1](id_) == 23
 t12 = t13 or t14
 t13 = H[t0+1](id_) == 27
 t11 = t12 or t13
 t12 = H[t0+1](id_) == 42
 t10 = t11 or t12
 t11 = H[t0+1](id_) == 48
 t9 = t10 or t11
 t10 = H[t0+1](id_) == 56
 t8 = t9 or t10
 t9 = H[t0+1](id_) == 59
 t7 = t8 or t9
 t8 = H[t0+1](id_) == 63
 t6 = t7 or t8
 t7 = H[t0+1](id_) == 64
 t5 = t6 or t7
 ifN t5 goto else_755
 #                     949:     if id_ == 12:
 t5 = H[t0+1](id_) == 12
 ifN t5 goto else_758
 #                     950:       j = 1
 H[t0+6](j) = 1
 goto endif_759
:else_758:
 #                     951:     elif id_ == 23:
 t5 = H[t0+1](id_) == 23
 ifN t5 goto else_761
 #                     952:       j = 3
 H[t0+6](j) = 3
 goto endif_762
:else_761:
 #                     953:     elif id_ == 27:
 t5 = H[t0+1](id_) == 27
 ifN t5 goto else_764
 #                     954:       j = 2
 H[t0+6](j) = 2
 goto endif_765
:else_764:
 #                     955:     elif id_ == 42:
 t5 = H[t0+1](id_) == 42
 ifN t5 goto else_767
 #                     956:       j = 4
 H[t0+6](j) = 4
 goto endif_768
:else_767:
 #                     957:     elif id_ == 48:
 t5 = H[t0+1](id_) == 48
 ifN t5 goto else_770
 #                     958:       j = 7
 H[t0+6](j) = 7
 goto endif_771
:else_770:
 #                     959:     elif id_ == 56:
 t5 = H[t0+1](id_) == 56
 ifN t5 goto else_773
 #                     960:       j = 6
 H[t0+6](j) = 6
 goto endif_774
:else_773:
 #                     961:     elif id_ == 59:
 t5 = H[t0+1](id_) == 59
 ifN t5 goto else_776
 #                     962:       j = 8
 H[t0+6](j) = 8
 goto endif_777
:else_776:
 #                     963:     elif id_ == 63:
 t5 = H[t0+1](id_) == 63
 ifN t5 goto else_779
 #                     964:       j = 5
 H[t0+6](j) = 5
 goto endif_780
:else_779:
 #                     965:     elif id_ == 64:
 t5 = H[t0+1](id_) == 64
 ifN t5 goto else_782
 #                     966:       j = 9
 H[t0+6](j) = 9
 goto endif_783
:else_782:
:endif_783:
:endif_780:
:endif_777:
:endif_774:
:endif_771:
:endif_768:
:endif_765:
:endif_762:
:endif_759:
 #                     967:     if l > j:
 t5 = H[t0+3](l) > H[t0+6](j)
 ifN t5 goto else_785
 #                     968:       j = l
 H[t0+6](j) = H[t0+3](l)
 goto endif_786
:else_785:
:endif_786:
 #                     969:     if id_ == 12:
 t5 = H[t0+1](id_) == 12
 ifN t5 goto else_788
 #                     970:       j -= 1
 H[t0+6](j) = H[t0+6](j) - 1
 goto endif_789
:else_788:
 #                     971:     elif id_ == 23:
 t5 = H[t0+1](id_) == 23
 ifN t5 goto else_791
 #                     972:       j -= 3
 H[t0+6](j) = H[t0+6](j) - 3
 goto endif_792
:else_791:
 #                     973:     elif id_ == 27:
 t5 = H[t0+1](id_) == 27
 ifN t5 goto else_794
 #                     974:       j -= 2
 H[t0+6](j) = H[t0+6](j) - 2
 goto endif_795
:else_794:
 #                     975:     elif id_ == 42:
 t5 = H[t0+1](id_) == 42
 ifN t5 goto else_797
 #                     976:       j -= 4
 H[t0+6](j) = H[t0+6](j) - 4
 goto endif_798
:else_797:
 #                     977:     elif id_ == 48:
 t5 = H[t0+1](id_) == 48
 ifN t5 goto else_800
 #                     978:       j -= 7
 H[t0+6](j) = H[t0+6](j) - 7
 goto endif_801
:else_800:
 #                     979:     elif id_ == 56:
 t5 = H[t0+1](id_) == 56
 ifN t5 goto else_803
 #                     980:       j -= 6
 H[t0+6](j) = H[t0+6](j) - 6
 goto endif_804
:else_803:
 #                     981:     elif id_ == 59:
 t5 = H[t0+1](id_) == 59
 ifN t5 goto else_806
 #                     982:       j -= 8
 H[t0+6](j) = H[t0+6](j) - 8
 goto endif_807
:else_806:
 #                     983:     elif id_ == 63:
 t5 = H[t0+1](id_) == 63
 ifN t5 goto else_809
 #                     984:       j -= 5
 H[t0+6](j) = H[t0+6](j) - 5
 goto endif_810
:else_809:
 #                     985:     elif id_ == 64:
 t5 = H[t0+1](id_) == 64
 ifN t5 goto else_812
 #                     986:       j -= 9
 H[t0+6](j) = H[t0+6](j) - 9
 goto endif_813
:else_812:
:endif_813:
:endif_810:
:endif_807:
:endif_804:
:endif_801:
:endif_798:
:endif_795:
:endif_792:
:endif_789:
 #                     987:     v = alloc_pM(j)
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 71
   # push arguments:
   H[t0+14]() = H[t0+6](j)
   t0 = t0 + 13
   goto addr_alloc_pM
  :return_id_71:
 t5 = t1
 
 t5 = t5 | 2147483648
 H[t0+5](v) = t5
 #                     988:     while i < j:
:while_814:
 t5 = H[t0+4](i) < H[t0+6](j)
 ifN t5 goto whileend_816
 #                     989:       v[i] = base_word[i]
 t5 = H[t0+2](base_word) & 2147483647
 t5 = t5 + H[t0+4](i)
 t5 = M[t5]
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = t5
 #                     990:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_814
:whileend_816:
 goto endif_756
:else_755:
 #                     991:   elif id_ == 14 or id_ == 21 or id_ == 31 or id_ == 50 or id_ == 70 or id_ == 86:  # 2 hinten an
 t10 = H[t0+1](id_) == 14
 t11 = H[t0+1](id_) == 21
 t9 = t10 or t11
 t10 = H[t0+1](id_) == 31
 t8 = t9 or t10
 t9 = H[t0+1](id_) == 50
 t7 = t8 or t9
 t8 = H[t0+1](id_) == 70
 t6 = t7 or t8
 t7 = H[t0+1](id_) == 86
 t5 = t6 or t7
 ifN t5 goto else_824
 #                     992:     v = alloc_pM(l+2)
 t5 = H[t0+3](l) + 2
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 72
   # push arguments:
   H[t0+14]() = t5
   t0 = t0 + 13
   goto addr_alloc_pM
  :return_id_72:
 t6 = t1
 
 t6 = t6 | 2147483648
 H[t0+5](v) = t6
 #                     993:     while i < l:
:while_826:
 t5 = H[t0+4](i) < H[t0+3](l)
 ifN t5 goto whileend_828
 #                     994:       v[i] = base_word[i]
 t5 = H[t0+2](base_word) & 2147483647
 t5 = t5 + H[t0+4](i)
 t5 = M[t5]
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = t5
 #                     995:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_826
:whileend_828:
 #                     996:     if id_ == 14:
 t5 = H[t0+1](id_) == 14
 ifN t5 goto else_831
 #                     997:       v[i] = 0x2c
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 44
 goto endif_832
:else_831:
 #                     998:     elif id_ == 21:
 t5 = H[t0+1](id_) == 21
 ifN t5 goto else_834
 #                     999:       v[i] = 0x22
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 34
 goto endif_835
:else_834:
 #                     1000:     elif id_ == 31:
 t5 = H[t0+1](id_) == 31
 ifN t5 goto else_837
 #                     1001:       v[i] = 0x2e
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 46
 goto endif_838
:else_837:
 #                     1002:     elif id_ == 50:
 t5 = H[t0+1](id_) == 50
 ifN t5 goto else_840
 #                     1003:       v[i] = 0x0a
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 10
 goto endif_841
:else_840:
 #                     1004:     elif id_ == 70 or id_ == 86:
 t6 = H[t0+1](id_) == 70
 t7 = H[t0+1](id_) == 86
 t5 = t6 or t7
 ifN t5 goto else_844
 #                     1005:       v[i] = 0x3d
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 61
 goto endif_845
:else_844:
:endif_845:
:endif_841:
:endif_838:
:endif_835:
:endif_832:
 #                     1006:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1007:     if id_ == 14 or id_ == 31:
 t6 = H[t0+1](id_) == 14
 t7 = H[t0+1](id_) == 31
 t5 = t6 or t7
 ifN t5 goto else_848
 #                     1008:       v[i] = 0x20
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 32
 goto endif_849
:else_848:
 #                     1009:     elif id_ == 21:
 t5 = H[t0+1](id_) == 21
 ifN t5 goto else_851
 #                     1010:       v[i] = 0x3e
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 62
 goto endif_852
:else_851:
 #                     1011:     elif id_ == 50:
 t5 = H[t0+1](id_) == 50
 ifN t5 goto else_854
 #                     1012:       v[i] = 0x09
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 9
 goto endif_855
:else_854:
 #                     1013:     elif id_ == 70:
 t5 = H[t0+1](id_) == 70
 ifN t5 goto else_857
 #                     1014:       v[i] = 0x22
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 34
 goto endif_858
:else_857:
 #                     1015:     elif id_ == 86:
 t5 = H[t0+1](id_) == 86
 ifN t5 goto else_860
 #                     1016:       v[i] = 0x27
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 39
 goto endif_861
:else_860:
:endif_861:
:endif_858:
:endif_855:
:endif_852:
:endif_849:
 goto endif_825
:else_824:
 #                     1017:   elif id_ == 15 or id_ == 96 or id_ == 109:  # upper first 1 vorne an 1 hinten an
 t7 = H[t0+1](id_) == 15
 t8 = H[t0+1](id_) == 96
 t6 = t7 or t8
 t7 = H[t0+1](id_) == 109
 t5 = t6 or t7
 ifN t5 goto else_865
 #                     1018:     u = uppercase_first(base_word)
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 73
   # push arguments:
   H[t0+14]() = H[t0+2](base_word)
   t0 = t0 + 13
   goto uppercase_first
  :return_id_73:
 t5 = t1
 
 H[t0+7](u) = t5
 #                     1019:     j = len_pM(u)
 t5 = H[t0+7](u)
 t5 = t5 & 2147483647
 t5 = t5 - 5
 t6 = M[t5] << 8
 t5 = t5 + 1
 t6 = t6 + M[t5]
 t6 = t6 << 8
 t5 = t5 + 1
 t6 = t6 + M[t5]
 t6 = t6 << 8
 t5 = t5 + 1
 t6 = t6 + M[t5]
 H[t0+6](j) = t6
 #                     1020:     v = alloc_pM(j+2)
 t5 = H[t0+6](j) + 2
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 74
   # push arguments:
   H[t0+14]() = t5
   t0 = t0 + 13
   goto addr_alloc_pM
  :return_id_74:
 t6 = t1
 
 t6 = t6 | 2147483648
 H[t0+5](v) = t6
 #                     1021:     v[0] = 0x20
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + 0
 M[t5] = 32
 #                     1022:     while i < j:
:while_867:
 t5 = H[t0+4](i) < H[t0+6](j)
 ifN t5 goto whileend_869
 #                     1023:       v[i+1] = u[i]
 t5 = H[t0+7](u) >> 31
 if t5 goto isM_871
 t5 = H[t0+7](u) + H[t0+4](i)
 t5 = H[t5]()
 goto MorHdone_872
:isM_871:
 t5 = H[t0+7](u) & 2147483647
 t5 = t5 + H[t0+4](i)
 t5 = M[t5]
:MorHdone_872:
 t6 = H[t0+4](i) + 1
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + t6
 M[t7] = t5
 #                     1024:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_867
:whileend_869:
 #                     1025:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1026:     if id_ == 96:
 t5 = H[t0+1](id_) == 96
 ifN t5 goto else_874
 #                     1027:       v[i] = 0x2e
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 46
 goto endif_875
:else_874:
 #                     1028:     elif id_ == 109:
 t5 = H[t0+1](id_) == 109
 ifN t5 goto else_877
 #                     1029:       v[i] = 0x2c
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 44
 goto endif_878
:else_877:
 #                     1031:       v[i] = 0x20
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 32
:endif_878:
:endif_875:
 #                     1032:     free_pM(u)
 t5 = H[t0+7](u) & 2147483647
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 75
   # push arguments:
   H[t0+14]() = t5
   t0 = t0 + 13
   goto addr_free_pM
  :return_id_75:
 t6 = t1
 
 goto endif_866
:else_865:
 #                     1033:   elif id_ == 28 or id_ == 53 or id_ == 61 or id_ == 82 or id_ == 84:  # 3 hinten an
 t9 = H[t0+1](id_) == 28
 t10 = H[t0+1](id_) == 53
 t8 = t9 or t10
 t9 = H[t0+1](id_) == 61
 t7 = t8 or t9
 t8 = H[t0+1](id_) == 82
 t6 = t7 or t8
 t7 = H[t0+1](id_) == 84
 t5 = t6 or t7
 ifN t5 goto else_884
 #                     1034:     v = alloc_pM(l+3)
 t5 = H[t0+3](l) + 3
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 76
   # push arguments:
   H[t0+14]() = t5
   t0 = t0 + 13
   goto addr_alloc_pM
  :return_id_76:
 t6 = t1
 
 t6 = t6 | 2147483648
 H[t0+5](v) = t6
 #                     1035:     while i < l:
:while_886:
 t5 = H[t0+4](i) < H[t0+3](l)
 ifN t5 goto whileend_888
 #                     1036:       v[i] = base_word[i]
 t5 = H[t0+2](base_word) & 2147483647
 t5 = t5 + H[t0+4](i)
 t5 = M[t5]
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = t5
 #                     1037:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_886
:whileend_888:
 #                     1038:     if id_ == 28:
 t5 = H[t0+1](id_) == 28
 ifN t5 goto else_891
 #                     1039:       v[i] = 0x20
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 32
 goto endif_892
:else_891:
 #                     1040:     elif id_ == 53 or id_ == 82:
 t6 = H[t0+1](id_) == 53
 t7 = H[t0+1](id_) == 82
 t5 = t6 or t7
 ifN t5 goto else_895
 #                     1041:       v[i] = 0x65
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 101
 goto endif_896
:else_895:
 #                     1042:     elif id_ == 61:
 t5 = H[t0+1](id_) == 61
 ifN t5 goto else_898
 #                     1043:       v[i] = 0x6c
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 108
 goto endif_899
:else_898:
 #                     1044:     elif id_ == 84:
 t5 = H[t0+1](id_) == 84
 ifN t5 goto else_901
 #                     1045:       v[i] = 0x61
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 97
 goto endif_902
:else_901:
:endif_902:
:endif_899:
:endif_896:
:endif_892:
 #                     1046:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1047:     if id_ == 28:
 t5 = H[t0+1](id_) == 28
 ifN t5 goto else_904
 #                     1048:       v[i] = 0x61
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 97
 goto endif_905
:else_904:
 #                     1049:     elif id_ == 53:
 t5 = H[t0+1](id_) == 53
 ifN t5 goto else_907
 #                     1050:       v[i] = 0x64
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 100
 goto endif_908
:else_907:
 #                     1051:     elif id_ == 61:
 t5 = H[t0+1](id_) == 61
 ifN t5 goto else_910
 #                     1052:       v[i] = 0x79
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 121
 goto endif_911
:else_910:
 #                     1053:     elif id_ == 82:
 t5 = H[t0+1](id_) == 82
 ifN t5 goto else_913
 #                     1054:       v[i] = 0x72
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 114
 goto endif_914
:else_913:
 #                     1055:     elif id_ == 84:
 t5 = H[t0+1](id_) == 84
 ifN t5 goto else_916
 #                     1056:       v[i] = 0x6c
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 108
 goto endif_917
:else_916:
:endif_917:
:endif_914:
:endif_911:
:endif_908:
:endif_905:
 #                     1057:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1058:     v[i] = 0x20
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 32
 goto endif_885
:else_884:
 #                     1059:   elif id_ == 29 or id_ == 35 or id_ == 37 or id_ == 43:  # 6 hinten an
 t8 = H[t0+1](id_) == 29
 t9 = H[t0+1](id_) == 35
 t7 = t8 or t9
 t8 = H[t0+1](id_) == 37
 t6 = t7 or t8
 t7 = H[t0+1](id_) == 43
 t5 = t6 or t7
 ifN t5 goto else_922
 #                     1060:     v = alloc_pM(l+6)
 t5 = H[t0+3](l) + 6
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 77
   # push arguments:
   H[t0+14]() = t5
   t0 = t0 + 13
   goto addr_alloc_pM
  :return_id_77:
 t6 = t1
 
 t6 = t6 | 2147483648
 H[t0+5](v) = t6
 #                     1061:     while i < l:
:while_924:
 t5 = H[t0+4](i) < H[t0+3](l)
 ifN t5 goto whileend_926
 #                     1062:       v[i] = base_word[i]
 t5 = H[t0+2](base_word) & 2147483647
 t5 = t5 + H[t0+4](i)
 t5 = M[t5]
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = t5
 #                     1063:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_924
:whileend_926:
 #                     1064:     if id_ == 43:
 t5 = H[t0+1](id_) == 43
 ifN t5 goto else_929
 #                     1065:       v[i] = 0x2e
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 46
 goto endif_930
:else_929:
 #                     1067:       v[i] = 0x20
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 32
:endif_930:
 #                     1068:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1069:     if id_ == 29:
 t5 = H[t0+1](id_) == 29
 ifN t5 goto else_932
 #                     1070:       v[i] = 0x74
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 116
 goto endif_933
:else_932:
 #                     1071:     elif id_ == 35:
 t5 = H[t0+1](id_) == 35
 ifN t5 goto else_935
 #                     1072:       v[i] = 0x77
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 119
 goto endif_936
:else_935:
 #                     1073:     elif id_ == 37:
 t5 = H[t0+1](id_) == 37
 ifN t5 goto else_938
 #                     1074:       v[i] = 0x66
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 102
 goto endif_939
:else_938:
 #                     1075:     elif id_ == 43:
 t5 = H[t0+1](id_) == 43
 ifN t5 goto else_941
 #                     1076:       v[i] = 0x20
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 32
 goto endif_942
:else_941:
:endif_942:
:endif_939:
:endif_936:
:endif_933:
 #                     1077:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1078:     if id_ == 29:
 t5 = H[t0+1](id_) == 29
 ifN t5 goto else_944
 #                     1079:       v[i] = 0x68
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 104
 goto endif_945
:else_944:
 #                     1080:     elif id_ == 35:
 t5 = H[t0+1](id_) == 35
 ifN t5 goto else_947
 #                     1081:       v[i] = 0x69
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 105
 goto endif_948
:else_947:
 #                     1082:     elif id_ == 37:
 t5 = H[t0+1](id_) == 37
 ifN t5 goto else_950
 #                     1083:       v[i] = 0x72
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 114
 goto endif_951
:else_950:
 #                     1084:     elif id_ == 43:
 t5 = H[t0+1](id_) == 43
 ifN t5 goto else_953
 #                     1085:       v[i] = 0x54
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 84
 goto endif_954
:else_953:
:endif_954:
:endif_951:
:endif_948:
:endif_945:
 #                     1086:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1087:     if id_ == 29:
 t5 = H[t0+1](id_) == 29
 ifN t5 goto else_956
 #                     1088:       v[i] = 0x61
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 97
 goto endif_957
:else_956:
 #                     1089:     elif id_ == 35:
 t5 = H[t0+1](id_) == 35
 ifN t5 goto else_959
 #                     1090:       v[i] = 0x74
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 116
 goto endif_960
:else_959:
 #                     1091:     elif id_ == 37:
 t5 = H[t0+1](id_) == 37
 ifN t5 goto else_962
 #                     1092:       v[i] = 0x6f
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 111
 goto endif_963
:else_962:
 #                     1093:     elif id_ == 43:
 t5 = H[t0+1](id_) == 43
 ifN t5 goto else_965
 #                     1094:       v[i] = 0x68
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 104
 goto endif_966
:else_965:
:endif_966:
:endif_963:
:endif_960:
:endif_957:
 #                     1095:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1096:     if id_ == 29:
 t5 = H[t0+1](id_) == 29
 ifN t5 goto else_968
 #                     1097:       v[i] = 0x74
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 116
 goto endif_969
:else_968:
 #                     1098:     elif id_ == 35:
 t5 = H[t0+1](id_) == 35
 ifN t5 goto else_971
 #                     1099:       v[i] = 0x68
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 104
 goto endif_972
:else_971:
 #                     1100:     elif id_ == 37:
 t5 = H[t0+1](id_) == 37
 ifN t5 goto else_974
 #                     1101:       v[i] = 0x6d
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 109
 goto endif_975
:else_974:
 #                     1102:     elif id_ == 43:
 t5 = H[t0+1](id_) == 43
 ifN t5 goto else_977
 #                     1103:       v[i] = 0x65
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 101
 goto endif_978
:else_977:
:endif_978:
:endif_975:
:endif_972:
:endif_969:
 #                     1104:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1105:     v[i] = 0x20
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 32
 goto endif_923
:else_922:
 #                     1106:   elif id_ == 30:  # upper first 1 vorne an
 t5 = H[t0+1](id_) == 30
 ifN t5 goto else_980
 #                     1107:     u = uppercase_first(base_word)
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 78
   # push arguments:
   H[t0+14]() = H[t0+2](base_word)
   t0 = t0 + 13
   goto uppercase_first
  :return_id_78:
 t5 = t1
 
 H[t0+7](u) = t5
 #                     1108:     j = len_pM(u)
 t5 = H[t0+7](u)
 t5 = t5 & 2147483647
 t5 = t5 - 5
 t6 = M[t5] << 8
 t5 = t5 + 1
 t6 = t6 + M[t5]
 t6 = t6 << 8
 t5 = t5 + 1
 t6 = t6 + M[t5]
 t6 = t6 << 8
 t5 = t5 + 1
 t6 = t6 + M[t5]
 H[t0+6](j) = t6
 #                     1109:     v = alloc_pM(j+1)
 t5 = H[t0+6](j) + 1
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 79
   # push arguments:
   H[t0+14]() = t5
   t0 = t0 + 13
   goto addr_alloc_pM
  :return_id_79:
 t6 = t1
 
 t6 = t6 | 2147483648
 H[t0+5](v) = t6
 #                     1110:     v[0] = 0x20
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + 0
 M[t5] = 32
 #                     1111:     while i < j:
:while_982:
 t5 = H[t0+4](i) < H[t0+6](j)
 ifN t5 goto whileend_984
 #                     1112:       v[i+1] = u[i]
 t5 = H[t0+7](u) >> 31
 if t5 goto isM_986
 t5 = H[t0+7](u) + H[t0+4](i)
 t5 = H[t5]()
 goto MorHdone_987
:isM_986:
 t5 = H[t0+7](u) & 2147483647
 t5 = t5 + H[t0+4](i)
 t5 = M[t5]
:MorHdone_987:
 t6 = H[t0+4](i) + 1
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + t6
 M[t7] = t5
 #                     1113:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_982
:whileend_984:
 #                     1114:     free_pM(u)
 t5 = H[t0+7](u) & 2147483647
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 80
   # push arguments:
   H[t0+14]() = t5
   t0 = t0 + 13
   goto addr_free_pM
  :return_id_80:
 t6 = t1
 
 goto endif_981
:else_980:
 #                     1115:   elif id_ == 33 or id_ == 52 or id_ == 81 or id_ == 98:  # 1 vorne 2 hinten an
 t8 = H[t0+1](id_) == 33
 t9 = H[t0+1](id_) == 52
 t7 = t8 or t9
 t8 = H[t0+1](id_) == 81
 t6 = t7 or t8
 t7 = H[t0+1](id_) == 98
 t5 = t6 or t7
 ifN t5 goto else_992
 #                     1116:     v = alloc_pM(l+3)
 t5 = H[t0+3](l) + 3
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 81
   # push arguments:
   H[t0+14]() = t5
   t0 = t0 + 13
   goto addr_alloc_pM
  :return_id_81:
 t6 = t1
 
 t6 = t6 | 2147483648
 H[t0+5](v) = t6
 #                     1117:     v[i] = 0x20
 t5 = H[t0+5](v) & 2147483647
 t5 = t5 + H[t0+4](i)
 M[t5] = 32
 #                     1118:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1119:     while i <= l:
:while_994:
 t5 = H[t0+4](i) <= H[t0+3](l)
 ifN t5 goto whileend_996
 #                     1120:       v[i] = base_word[i-1]
 t5 = H[t0+4](i) - 1
 t6 = H[t0+2](base_word) & 2147483647
 t6 = t6 + t5
 t6 = M[t6]
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = t6
 #                     1121:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_994
:whileend_996:
 #                     1122:     if id_ == 33:
 t6 = H[t0+1](id_) == 33
 ifN t6 goto else_999
 #                     1123:       v[i] = 0x2c
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = 44
 goto endif_1000
:else_999:
 #                     1124:     elif id_ == 52:
 t6 = H[t0+1](id_) == 52
 ifN t6 goto else_1002
 #                     1125:       v[i] = 0x2e
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = 46
 goto endif_1003
:else_1002:
 #                     1126:     elif id_ == 81 or id_ == 98:
 t7 = H[t0+1](id_) == 81
 t8 = H[t0+1](id_) == 98
 t6 = t7 or t8
 ifN t6 goto else_1006
 #                     1127:       v[i] = 0x3d
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = 61
 goto endif_1007
:else_1006:
:endif_1007:
:endif_1003:
:endif_1000:
 #                     1128:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1129:     if id_ == 81:
 t6 = H[t0+1](id_) == 81
 ifN t6 goto else_1009
 #                     1130:       v[i] = 0x22
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = 34
 goto endif_1010
:else_1009:
 #                     1131:     elif id_ == 98:
 t6 = H[t0+1](id_) == 98
 ifN t6 goto else_1012
 #                     1132:       v[i] = 0x27
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = 39
 goto endif_1013
:else_1012:
 #                     1134:       v[i] = 0x20
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = 32
:endif_1013:
:endif_1010:
 goto endif_993
:else_992:
 #                     1135:   elif id_ == 41 or id_ == 72:  # 5 vorne an
 t7 = H[t0+1](id_) == 41
 t8 = H[t0+1](id_) == 72
 t6 = t7 or t8
 ifN t6 goto else_1016
 #                     1136:     v = alloc_pM(l+5)
 t6 = H[t0+3](l) + 5
 
    H[t0+13]() = t0
   # saved bsp, return id:
   H[t0+14]() = 82
   # push arguments:
   H[t0+15]() = t6
   t0 = t0 + 14
   goto addr_alloc_pM
  :return_id_82:
 t7 = t1
 
 t7 = t7 | 2147483648
 H[t0+5](v) = t7
 #                     1137:     if id_ == 41:
 t6 = H[t0+1](id_) == 41
 ifN t6 goto else_1019
 #                     1138:       v[i] = 0x20
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = 32
 goto endif_1020
:else_1019:
 #                     1139:     elif id_ == 72:
 t6 = H[t0+1](id_) == 72
 ifN t6 goto else_1022
 #                     1140:       v[i] = 0x2e
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = 46
 goto endif_1023
:else_1022:
:endif_1023:
:endif_1020:
 #                     1141:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1142:     if id_ == 41:
 t6 = H[t0+1](id_) == 41
 ifN t6 goto else_1025
 #                     1143:       v[i] = 0x74
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = 116
 goto endif_1026
:else_1025:
 #                     1144:     elif id_ == 72:
 t6 = H[t0+1](id_) == 72
 ifN t6 goto else_1028
 #                     1145:       v[i] = 0x63
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = 99
 goto endif_1029
:else_1028:
:endif_1029:
:endif_1026:
 #                     1146:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1147:     if id_ == 41:
 t6 = H[t0+1](id_) == 41
 ifN t6 goto else_1031
 #                     1148:       v[i] = 0x68
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = 104
 goto endif_1032
:else_1031:
 #                     1149:     elif id_ == 72:
 t6 = H[t0+1](id_) == 72
 ifN t6 goto else_1034
 #                     1150:       v[i] = 0x6f
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = 111
 goto endif_1035
:else_1034:
:endif_1035:
:endif_1032:
 #                     1151:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1152:     if id_ == 41:
 t6 = H[t0+1](id_) == 41
 ifN t6 goto else_1037
 #                     1153:       v[i] = 0x65
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = 101
 goto endif_1038
:else_1037:
 #                     1154:     elif id_ == 72:
 t6 = H[t0+1](id_) == 72
 ifN t6 goto else_1040
 #                     1155:       v[i] = 0x6d
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = 109
 goto endif_1041
:else_1040:
:endif_1041:
:endif_1038:
 #                     1156:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1157:     if id_ == 41:
 t6 = H[t0+1](id_) == 41
 ifN t6 goto else_1043
 #                     1158:       v[i] = 0x20
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = 32
 goto endif_1044
:else_1043:
 #                     1159:     elif id_ == 72:
 t6 = H[t0+1](id_) == 72
 ifN t6 goto else_1046
 #                     1160:       v[i] = 0x2f
 t6 = H[t0+5](v) & 2147483647
 t6 = t6 + H[t0+4](i)
 M[t6] = 47
 goto endif_1047
:else_1046:
:endif_1047:
:endif_1044:
 #                     1161:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1162:     while i-5 < l:
:while_1048:
 t7 = H[t0+4](i) - 5
 t6 = t7 < H[t0+3](l)
 ifN t6 goto whileend_1050
 #                     1163:       v[i] = base_word[i-5]
 t6 = H[t0+4](i) - 5
 t7 = H[t0+2](base_word) & 2147483647
 t7 = t7 + t6
 t7 = M[t7]
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = t7
 #                     1164:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_1048
:whileend_1050:
 goto endif_1017
:else_1016:
 #                     1165:   elif id_ == 44:
 t7 = H[t0+1](id_) == 44
 ifN t7 goto else_1053
 #                     1166:     v = uppercase_all(base_word)
 
    H[t0+14]() = t0
   # saved bsp, return id:
   H[t0+15]() = 83
   # push arguments:
   H[t0+16]() = H[t0+2](base_word)
   t0 = t0 + 15
   goto uppercase_all
  :return_id_83:
 t7 = t1
 
 H[t0+5](v) = t7
 goto endif_1054
:else_1053:
 #                     1167:   elif id_ == 49:
 t7 = H[t0+1](id_) == 49
 ifN t7 goto else_1056
 #                     1168:     j = 1
 H[t0+6](j) = 1
 #                     1169:     if l > j:
 t7 = H[t0+3](l) > H[t0+6](j)
 ifN t7 goto else_1059
 #                     1170:       j = l
 H[t0+6](j) = H[t0+3](l)
 goto endif_1060
:else_1059:
:endif_1060:
 #                     1171:     j -= 1
 H[t0+6](j) = H[t0+6](j) - 1
 #                     1172:     v = alloc_pM(j+4)
 t7 = H[t0+6](j) + 4
 
    H[t0+14]() = t0
   # saved bsp, return id:
   H[t0+15]() = 84
   # push arguments:
   H[t0+16]() = t7
   t0 = t0 + 15
   goto addr_alloc_pM
  :return_id_84:
 t8 = t1
 
 t8 = t8 | 2147483648
 H[t0+5](v) = t8
 #                     1173:     while i < j:
:while_1061:
 t7 = H[t0+4](i) < H[t0+6](j)
 ifN t7 goto whileend_1063
 #                     1174:       v[i] = base_word[i]
 t7 = H[t0+2](base_word) & 2147483647
 t7 = t7 + H[t0+4](i)
 t7 = M[t7]
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = t7
 #                     1175:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_1061
:whileend_1063:
 #                     1176:     v[i] = 0x69
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 105
 #                     1177:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1178:     v[i] = 0x6e
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 110
 #                     1179:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1180:     v[i] = 0x67
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 103
 #                     1181:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1182:     v[i] = 0x20
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 32
 goto endif_1057
:else_1056:
 #                     1183:   elif id_ == 58 or id_ == 69 or id_ == 88 or id_ == 104 or id_ == 108:  # upper first 2 hinten an
 t11 = H[t0+1](id_) == 58
 t12 = H[t0+1](id_) == 69
 t10 = t11 or t12
 t11 = H[t0+1](id_) == 88
 t9 = t10 or t11
 t10 = H[t0+1](id_) == 104
 t8 = t9 or t10
 t9 = H[t0+1](id_) == 108
 t7 = t8 or t9
 ifN t7 goto else_1070
 #                     1184:     u = uppercase_first(base_word)
 
    H[t0+14]() = t0
   # saved bsp, return id:
   H[t0+15]() = 85
   # push arguments:
   H[t0+16]() = H[t0+2](base_word)
   t0 = t0 + 15
   goto uppercase_first
  :return_id_85:
 t7 = t1
 
 H[t0+7](u) = t7
 #                     1185:     j = len_pM(u)
 t7 = H[t0+7](u)
 t7 = t7 & 2147483647
 t7 = t7 - 5
 t8 = M[t7] << 8
 t7 = t7 + 1
 t8 = t8 + M[t7]
 t8 = t8 << 8
 t7 = t7 + 1
 t8 = t8 + M[t7]
 t8 = t8 << 8
 t7 = t7 + 1
 t8 = t8 + M[t7]
 H[t0+6](j) = t8
 #                     1186:     v = alloc_pM(j+2)
 t7 = H[t0+6](j) + 2
 
    H[t0+14]() = t0
   # saved bsp, return id:
   H[t0+15]() = 86
   # push arguments:
   H[t0+16]() = t7
   t0 = t0 + 15
   goto addr_alloc_pM
  :return_id_86:
 t8 = t1
 
 t8 = t8 | 2147483648
 H[t0+5](v) = t8
 #                     1187:     while i < j:
:while_1072:
 t7 = H[t0+4](i) < H[t0+6](j)
 ifN t7 goto whileend_1074
 #                     1188:       v[i] = u[i]
 t7 = H[t0+7](u) >> 31
 if t7 goto isM_1076
 t7 = H[t0+7](u) + H[t0+4](i)
 t7 = H[t7]()
 goto MorHdone_1077
:isM_1076:
 t7 = H[t0+7](u) & 2147483647
 t7 = t7 + H[t0+4](i)
 t7 = M[t7]
:MorHdone_1077:
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = t7
 #                     1189:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_1072
:whileend_1074:
 #                     1190:     if id_ == 58:
 t7 = H[t0+1](id_) == 58
 ifN t7 goto else_1079
 #                     1191:       v[i] = 0x2c
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 44
 goto endif_1080
:else_1079:
 #                     1192:     elif id_ == 69:
 t7 = H[t0+1](id_) == 69
 ifN t7 goto else_1082
 #                     1193:       v[i] = 0x22
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 34
 goto endif_1083
:else_1082:
 #                     1194:     elif id_ == 88:
 t7 = H[t0+1](id_) == 88
 ifN t7 goto else_1085
 #                     1195:       v[i] = 0x2e
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 46
 goto endif_1086
:else_1085:
 #                     1196:     elif id_ == 104 or id_ == 108:
 t8 = H[t0+1](id_) == 104
 t9 = H[t0+1](id_) == 108
 t7 = t8 or t9
 ifN t7 goto else_1089
 #                     1197:       v[i] = 0x3d
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 61
 goto endif_1090
:else_1089:
:endif_1090:
:endif_1086:
:endif_1083:
:endif_1080:
 #                     1198:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1199:     if id_ == 58 or id_ == 88:
 t8 = H[t0+1](id_) == 58
 t9 = H[t0+1](id_) == 88
 t7 = t8 or t9
 ifN t7 goto else_1093
 #                     1200:       v[i] = 0x20
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 32
 goto endif_1094
:else_1093:
 #                     1201:     elif id_ == 69:
 t7 = H[t0+1](id_) == 69
 ifN t7 goto else_1096
 #                     1202:       v[i] = 0x3e
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 62
 goto endif_1097
:else_1096:
 #                     1203:     elif id_ == 104:
 t7 = H[t0+1](id_) == 104
 ifN t7 goto else_1099
 #                     1204:       v[i] = 0x22
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 34
 goto endif_1100
:else_1099:
 #                     1205:     elif id_ == 108:
 t7 = H[t0+1](id_) == 108
 ifN t7 goto else_1102
 #                     1206:       v[i] = 0x27
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 39
 goto endif_1103
:else_1102:
:endif_1103:
:endif_1100:
:endif_1097:
:endif_1094:
 #                     1207:     free_pM(u)
 t7 = H[t0+7](u) & 2147483647
 
    H[t0+14]() = t0
   # saved bsp, return id:
   H[t0+15]() = 87
   # push arguments:
   H[t0+16]() = t7
   t0 = t0 + 15
   goto addr_free_pM
  :return_id_87:
 t8 = t1
 
 goto endif_1071
:else_1070:
 #                     1208:   elif id_ == 62:  # 5 vorne 4 hinten an
 t7 = H[t0+1](id_) == 62
 ifN t7 goto else_1105
 #                     1209:     v = alloc_pM(l+9)
 t7 = H[t0+3](l) + 9
 
    H[t0+14]() = t0
   # saved bsp, return id:
   H[t0+15]() = 88
   # push arguments:
   H[t0+16]() = t7
   t0 = t0 + 15
   goto addr_alloc_pM
  :return_id_88:
 t8 = t1
 
 t8 = t8 | 2147483648
 H[t0+5](v) = t8
 #                     1210:     v[i] = 0x20
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 32
 #                     1211:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1212:     v[i] = 0x74
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 116
 #                     1213:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1214:     v[i] = 0x68
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 104
 #                     1215:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1216:     v[i] = 0x65
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 101
 #                     1217:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1218:     v[i] = 0x20
 t7 = H[t0+5](v) & 2147483647
 t7 = t7 + H[t0+4](i)
 M[t7] = 32
 #                     1219:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1220:     while i-5 < l:
:while_1107:
 t8 = H[t0+4](i) - 5
 t7 = t8 < H[t0+3](l)
 ifN t7 goto whileend_1109
 #                     1221:       v[i] = base_word[i-5]
 t7 = H[t0+4](i) - 5
 t8 = H[t0+2](base_word) & 2147483647
 t8 = t8 + t7
 t8 = M[t8]
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = t8
 #                     1222:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_1107
:whileend_1109:
 #                     1223:     v[i] = 0x20
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 32
 #                     1224:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1225:     v[i] = 0x6f
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 111
 #                     1226:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1227:     v[i] = 0x66
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 102
 #                     1228:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1229:     v[i] = 0x20
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 32
 goto endif_1106
:else_1105:
 #                     1230:   elif id_ == 65 or id_ == 91 or id_ == 118 or id_ == 120:  # upper first 1 vorne 2 hinten an
 t11 = H[t0+1](id_) == 65
 t12 = H[t0+1](id_) == 91
 t10 = t11 or t12
 t11 = H[t0+1](id_) == 118
 t9 = t10 or t11
 t10 = H[t0+1](id_) == 120
 t8 = t9 or t10
 ifN t8 goto else_1115
 #                     1231:     u = uppercase_first(base_word)
 
    H[t0+15]() = t0
   # saved bsp, return id:
   H[t0+16]() = 89
   # push arguments:
   H[t0+17]() = H[t0+2](base_word)
   t0 = t0 + 16
   goto uppercase_first
  :return_id_89:
 t8 = t1
 
 H[t0+7](u) = t8
 #                     1232:     j = len_pM(u)
 t8 = H[t0+7](u)
 t8 = t8 & 2147483647
 t8 = t8 - 5
 t9 = M[t8] << 8
 t8 = t8 + 1
 t9 = t9 + M[t8]
 t9 = t9 << 8
 t8 = t8 + 1
 t9 = t9 + M[t8]
 t9 = t9 << 8
 t8 = t8 + 1
 t9 = t9 + M[t8]
 H[t0+6](j) = t9
 #                     1233:     v = alloc_pM(j+3)
 t8 = H[t0+6](j) + 3
 
    H[t0+15]() = t0
   # saved bsp, return id:
   H[t0+16]() = 90
   # push arguments:
   H[t0+17]() = t8
   t0 = t0 + 16
   goto addr_alloc_pM
  :return_id_90:
 t9 = t1
 
 t9 = t9 | 2147483648
 H[t0+5](v) = t9
 #                     1234:     v[0] = 0x20
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + 0
 M[t8] = 32
 #                     1235:     while i < j:
:while_1117:
 t8 = H[t0+4](i) < H[t0+6](j)
 ifN t8 goto whileend_1119
 #                     1236:       v[i+1] = u[i]
 t8 = H[t0+7](u) >> 31
 if t8 goto isM_1121
 t8 = H[t0+7](u) + H[t0+4](i)
 t8 = H[t8]()
 goto MorHdone_1122
:isM_1121:
 t8 = H[t0+7](u) & 2147483647
 t8 = t8 + H[t0+4](i)
 t8 = M[t8]
:MorHdone_1122:
 t9 = H[t0+4](i) + 1
 t10 = H[t0+5](v) & 2147483647
 t10 = t10 + t9
 M[t10] = t8
 #                     1237:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_1117
:whileend_1119:
 #                     1238:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1239:     if id_ == 65:
 t8 = H[t0+1](id_) == 65
 ifN t8 goto else_1124
 #                     1240:       v[i] = 0x2c
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 44
 goto endif_1125
:else_1124:
 #                     1241:     elif id_ == 91:
 t8 = H[t0+1](id_) == 91
 ifN t8 goto else_1127
 #                     1242:       v[i] = 0x2e
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 46
 goto endif_1128
:else_1127:
 #                     1244:       v[i] = 0x3d
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 61
:endif_1128:
:endif_1125:
 #                     1245:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1246:     if id_ == 118:
 t8 = H[t0+1](id_) == 118
 ifN t8 goto else_1130
 #                     1247:       v[i] = 0x22
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 34
 goto endif_1131
:else_1130:
 #                     1248:     elif id_ == 120:
 t8 = H[t0+1](id_) == 120
 ifN t8 goto else_1133
 #                     1249:       v[i] = 0x27
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 39
 goto endif_1134
:else_1133:
 #                     1251:       v[i] = 0x20
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 32
:endif_1134:
:endif_1131:
 #                     1252:     free_pM(u)
 t8 = H[t0+7](u) & 2147483647
 
    H[t0+15]() = t0
   # saved bsp, return id:
   H[t0+16]() = 91
   # push arguments:
   H[t0+17]() = t8
   t0 = t0 + 16
   goto addr_free_pM
  :return_id_91:
 t9 = t1
 
 goto endif_1116
:else_1115:
 #                     1253:   elif id_ == 68 or id_ == 87 or id_ == 94 or id_ == 101 or id_ == 112 or id_ == 113:  # upper all 1 hinten
 t13 = H[t0+1](id_) == 68
 t14 = H[t0+1](id_) == 87
 t12 = t13 or t14
 t13 = H[t0+1](id_) == 94
 t11 = t12 or t13
 t12 = H[t0+1](id_) == 101
 t10 = t11 or t12
 t11 = H[t0+1](id_) == 112
 t9 = t10 or t11
 t10 = H[t0+1](id_) == 113
 t8 = t9 or t10
 ifN t8 goto else_1141
 #                     1254:     u = uppercase_all(base_word)
 
    H[t0+15]() = t0
   # saved bsp, return id:
   H[t0+16]() = 92
   # push arguments:
   H[t0+17]() = H[t0+2](base_word)
   t0 = t0 + 16
   goto uppercase_all
  :return_id_92:
 t8 = t1
 
 H[t0+7](u) = t8
 #                     1255:     j = len_pM(u)
 t8 = H[t0+7](u)
 t8 = t8 & 2147483647
 t8 = t8 - 5
 t9 = M[t8] << 8
 t8 = t8 + 1
 t9 = t9 + M[t8]
 t9 = t9 << 8
 t8 = t8 + 1
 t9 = t9 + M[t8]
 t9 = t9 << 8
 t8 = t8 + 1
 t9 = t9 + M[t8]
 H[t0+6](j) = t9
 #                     1256:     v = alloc_pM(j+1)
 t8 = H[t0+6](j) + 1
 
    H[t0+15]() = t0
   # saved bsp, return id:
   H[t0+16]() = 93
   # push arguments:
   H[t0+17]() = t8
   t0 = t0 + 16
   goto addr_alloc_pM
  :return_id_93:
 t9 = t1
 
 t9 = t9 | 2147483648
 H[t0+5](v) = t9
 #                     1257:     while i < j:
:while_1143:
 t8 = H[t0+4](i) < H[t0+6](j)
 ifN t8 goto whileend_1145
 #                     1258:       v[i] = u[i]
 t8 = H[t0+7](u) >> 31
 if t8 goto isM_1147
 t8 = H[t0+7](u) + H[t0+4](i)
 t8 = H[t8]()
 goto MorHdone_1148
:isM_1147:
 t8 = H[t0+7](u) & 2147483647
 t8 = t8 + H[t0+4](i)
 t8 = M[t8]
:MorHdone_1148:
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = t8
 #                     1259:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_1143
:whileend_1145:
 #                     1260:     if id_ == 87:
 t8 = H[t0+1](id_) == 87
 ifN t8 goto else_1150
 #                     1261:       v[i] = 0x22
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 34
 goto endif_1151
:else_1150:
 #                     1262:     elif id_ == 94:
 t8 = H[t0+1](id_) == 94
 ifN t8 goto else_1153
 #                     1263:       v[i] = 0x27
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 39
 goto endif_1154
:else_1153:
 #                     1264:     elif id_ == 101:
 t8 = H[t0+1](id_) == 101
 ifN t8 goto else_1156
 #                     1265:       v[i] = 0x2e
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 46
 goto endif_1157
:else_1156:
 #                     1266:     elif id_ == 112:
 t8 = H[t0+1](id_) == 112
 ifN t8 goto else_1159
 #                     1267:       v[i] = 0x2c
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 44
 goto endif_1160
:else_1159:
 #                     1268:     elif id_ == 113:
 t8 = H[t0+1](id_) == 113
 ifN t8 goto else_1162
 #                     1269:       v[i] = 0x28
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 40
 goto endif_1163
:else_1162:
 #                     1271:       v[i] = 0x20
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 32
:endif_1163:
:endif_1160:
:endif_1157:
:endif_1154:
:endif_1151:
 #                     1272:     free_pM(u)
 t8 = H[t0+7](u) & 2147483647
 
    H[t0+15]() = t0
   # saved bsp, return id:
   H[t0+16]() = 94
   # push arguments:
   H[t0+17]() = t8
   t0 = t0 + 16
   goto addr_free_pM
  :return_id_94:
 t9 = t1
 
 goto endif_1142
:else_1141:
 #                     1273:   elif id_ == 73:  # 5 vorne 8 hinten an
 t8 = H[t0+1](id_) == 73
 ifN t8 goto else_1165
 #                     1274:     v = alloc_pM(l+13)
 t8 = H[t0+3](l) + 13
 
    H[t0+15]() = t0
   # saved bsp, return id:
   H[t0+16]() = 95
   # push arguments:
   H[t0+17]() = t8
   t0 = t0 + 16
   goto addr_alloc_pM
  :return_id_95:
 t9 = t1
 
 t9 = t9 | 2147483648
 H[t0+5](v) = t9
 #                     1275:     v[i] = 0x20
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 32
 #                     1276:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1277:     v[i] = 0x74
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 116
 #                     1278:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1279:     v[i] = 0x68
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 104
 #                     1280:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1281:     v[i] = 0x65
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 101
 #                     1282:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1283:     v[i] = 0x20
 t8 = H[t0+5](v) & 2147483647
 t8 = t8 + H[t0+4](i)
 M[t8] = 32
 #                     1284:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1285:     while i-5 < l:
:while_1167:
 t9 = H[t0+4](i) - 5
 t8 = t9 < H[t0+3](l)
 ifN t8 goto whileend_1169
 #                     1286:       v[i] = base_word[i-5]
 t8 = H[t0+4](i) - 5
 t9 = H[t0+2](base_word) & 2147483647
 t9 = t9 + t8
 t9 = M[t9]
 t10 = H[t0+5](v) & 2147483647
 t10 = t10 + H[t0+4](i)
 M[t10] = t9
 #                     1287:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_1167
:whileend_1169:
 #                     1288:     v[i] = 0x20
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 32
 #                     1289:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1290:     v[i] = 0x6f
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 111
 #                     1291:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1292:     v[i] = 0x66
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 102
 #                     1293:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1294:     v[i] = 0x20
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 32
 #                     1295:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1296:     v[i] = 0x74
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 116
 #                     1297:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1298:     v[i] = 0x68
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 104
 #                     1299:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1300:     v[i] = 0x65
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 101
 #                     1301:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1302:     v[i] = 0x20
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 32
 goto endif_1166
:else_1165:
 #                     1303:   elif id_ == 75:  # 7 hinten an
 t9 = H[t0+1](id_) == 75
 ifN t9 goto else_1172
 #                     1304:     v = alloc_pM(l+7)
 t9 = H[t0+3](l) + 7
 
    H[t0+16]() = t0
   # saved bsp, return id:
   H[t0+17]() = 96
   # push arguments:
   H[t0+18]() = t9
   t0 = t0 + 17
   goto addr_alloc_pM
  :return_id_96:
 t10 = t1
 
 t10 = t10 | 2147483648
 H[t0+5](v) = t10
 #                     1305:     while i < l:
:while_1174:
 t9 = H[t0+4](i) < H[t0+3](l)
 ifN t9 goto whileend_1176
 #                     1306:       v[i] = base_word[i]
 t9 = H[t0+2](base_word) & 2147483647
 t9 = t9 + H[t0+4](i)
 t9 = M[t9]
 t10 = H[t0+5](v) & 2147483647
 t10 = t10 + H[t0+4](i)
 M[t10] = t9
 #                     1307:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_1174
:whileend_1176:
 #                     1308:     v[i] = 0x2e
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 46
 #                     1309:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1310:     v[i] = 0x20
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 32
 #                     1311:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1312:     v[i] = 0x54
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 84
 #                     1313:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1314:     v[i] = 0x68
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 104
 #                     1315:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1316:     v[i] = 0x69
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 105
 #                     1317:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1318:     v[i] = 0x73
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 115
 #                     1319:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1320:     v[i] = 0x20
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 32
 goto endif_1173
:else_1172:
 #                     1321:   elif id_ == 83 or id_ == 115:  # upper all 1 vorne 1 hinten
 t10 = H[t0+1](id_) == 83
 t11 = H[t0+1](id_) == 115
 t9 = t10 or t11
 ifN t9 goto else_1180
 #                     1322:     u = uppercase_all(base_word)
 
    H[t0+16]() = t0
   # saved bsp, return id:
   H[t0+17]() = 97
   # push arguments:
   H[t0+18]() = H[t0+2](base_word)
   t0 = t0 + 17
   goto uppercase_all
  :return_id_97:
 t9 = t1
 
 H[t0+7](u) = t9
 #                     1323:     j = len_pM(u)
 t9 = H[t0+7](u)
 t9 = t9 & 2147483647
 t9 = t9 - 5
 t10 = M[t9] << 8
 t9 = t9 + 1
 t10 = t10 + M[t9]
 t10 = t10 << 8
 t9 = t9 + 1
 t10 = t10 + M[t9]
 t10 = t10 << 8
 t9 = t9 + 1
 t10 = t10 + M[t9]
 H[t0+6](j) = t10
 #                     1324:     v = alloc_pM(j+2)
 t9 = H[t0+6](j) + 2
 
    H[t0+16]() = t0
   # saved bsp, return id:
   H[t0+17]() = 98
   # push arguments:
   H[t0+18]() = t9
   t0 = t0 + 17
   goto addr_alloc_pM
  :return_id_98:
 t10 = t1
 
 t10 = t10 | 2147483648
 H[t0+5](v) = t10
 #                     1325:     v[0] = 0x20
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + 0
 M[t9] = 32
 #                     1326:     while i < j:
:while_1182:
 t9 = H[t0+4](i) < H[t0+6](j)
 ifN t9 goto whileend_1184
 #                     1327:       v[i+1] = u[i]
 t9 = H[t0+7](u) >> 31
 if t9 goto isM_1186
 t9 = H[t0+7](u) + H[t0+4](i)
 t9 = H[t9]()
 goto MorHdone_1187
:isM_1186:
 t9 = H[t0+7](u) & 2147483647
 t9 = t9 + H[t0+4](i)
 t9 = M[t9]
:MorHdone_1187:
 t10 = H[t0+4](i) + 1
 t11 = H[t0+5](v) & 2147483647
 t11 = t11 + t10
 M[t11] = t9
 #                     1328:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_1182
:whileend_1184:
 #                     1329:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1330:     if id_ == 83:
 t9 = H[t0+1](id_) == 83
 ifN t9 goto else_1189
 #                     1331:       v[i] = 0x20
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 32
 goto endif_1190
:else_1189:
 #                     1332:     elif id_ == 115:
 t9 = H[t0+1](id_) == 115
 ifN t9 goto else_1192
 #                     1333:       v[i] = 0x2e
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 46
 goto endif_1193
:else_1192:
:endif_1193:
:endif_1190:
 #                     1334:     free_pM(u)
 t9 = H[t0+7](u) & 2147483647
 
    H[t0+16]() = t0
   # saved bsp, return id:
   H[t0+17]() = 99
   # push arguments:
   H[t0+18]() = t9
   t0 = t0 + 17
   goto addr_free_pM
  :return_id_99:
 t10 = t1
 
 goto endif_1181
:else_1180:
 #                     1335:   elif id_ == 85:  # upper all 1 vorne
 t9 = H[t0+1](id_) == 85
 ifN t9 goto else_1195
 #                     1336:     u = uppercase_all(base_word)
 
    H[t0+16]() = t0
   # saved bsp, return id:
   H[t0+17]() = 100
   # push arguments:
   H[t0+18]() = H[t0+2](base_word)
   t0 = t0 + 17
   goto uppercase_all
  :return_id_100:
 t9 = t1
 
 H[t0+7](u) = t9
 #                     1337:     j = len_pM(u)
 t9 = H[t0+7](u)
 t9 = t9 & 2147483647
 t9 = t9 - 5
 t10 = M[t9] << 8
 t9 = t9 + 1
 t10 = t10 + M[t9]
 t10 = t10 << 8
 t9 = t9 + 1
 t10 = t10 + M[t9]
 t10 = t10 << 8
 t9 = t9 + 1
 t10 = t10 + M[t9]
 H[t0+6](j) = t10
 #                     1338:     v = alloc_pM(j+1)
 t9 = H[t0+6](j) + 1
 
    H[t0+16]() = t0
   # saved bsp, return id:
   H[t0+17]() = 101
   # push arguments:
   H[t0+18]() = t9
   t0 = t0 + 17
   goto addr_alloc_pM
  :return_id_101:
 t10 = t1
 
 t10 = t10 | 2147483648
 H[t0+5](v) = t10
 #                     1339:     v[0] = 0x20
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + 0
 M[t9] = 32
 #                     1340:     while i < j:
:while_1197:
 t9 = H[t0+4](i) < H[t0+6](j)
 ifN t9 goto whileend_1199
 #                     1341:       v[i+1] = u[i]
 t9 = H[t0+7](u) >> 31
 if t9 goto isM_1201
 t9 = H[t0+7](u) + H[t0+4](i)
 t9 = H[t9]()
 goto MorHdone_1202
:isM_1201:
 t9 = H[t0+7](u) & 2147483647
 t9 = t9 + H[t0+4](i)
 t9 = M[t9]
:MorHdone_1202:
 t10 = H[t0+4](i) + 1
 t11 = H[t0+5](v) & 2147483647
 t11 = t11 + t10
 M[t11] = t9
 #                     1342:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_1197
:whileend_1199:
 #                     1343:     free_pM(u)
 t9 = H[t0+7](u) & 2147483647
 
    H[t0+16]() = t0
   # saved bsp, return id:
   H[t0+17]() = 102
   # push arguments:
   H[t0+18]() = t9
   t0 = t0 + 17
   goto addr_free_pM
  :return_id_102:
 t10 = t1
 
 goto endif_1196
:else_1195:
 #                     1344:   elif id_ == 97 or id_ == 105 or id_ == 107 or id_ == 114 or id_ == 116:  # upper all 2 hinten
 t13 = H[t0+1](id_) == 97
 t14 = H[t0+1](id_) == 105
 t12 = t13 or t14
 t13 = H[t0+1](id_) == 107
 t11 = t12 or t13
 t12 = H[t0+1](id_) == 114
 t10 = t11 or t12
 t11 = H[t0+1](id_) == 116
 t9 = t10 or t11
 ifN t9 goto else_1208
 #                     1345:     u = uppercase_all(base_word)
 
    H[t0+16]() = t0
   # saved bsp, return id:
   H[t0+17]() = 103
   # push arguments:
   H[t0+18]() = H[t0+2](base_word)
   t0 = t0 + 17
   goto uppercase_all
  :return_id_103:
 t9 = t1
 
 H[t0+7](u) = t9
 #                     1346:     j = len_pM(u)
 t9 = H[t0+7](u)
 t9 = t9 & 2147483647
 t9 = t9 - 5
 t10 = M[t9] << 8
 t9 = t9 + 1
 t10 = t10 + M[t9]
 t10 = t10 << 8
 t9 = t9 + 1
 t10 = t10 + M[t9]
 t10 = t10 << 8
 t9 = t9 + 1
 t10 = t10 + M[t9]
 H[t0+6](j) = t10
 #                     1347:     v = alloc_pM(j+2)
 t9 = H[t0+6](j) + 2
 
    H[t0+16]() = t0
   # saved bsp, return id:
   H[t0+17]() = 104
   # push arguments:
   H[t0+18]() = t9
   t0 = t0 + 17
   goto addr_alloc_pM
  :return_id_104:
 t10 = t1
 
 t10 = t10 | 2147483648
 H[t0+5](v) = t10
 #                     1348:     while i < j:
:while_1210:
 t9 = H[t0+4](i) < H[t0+6](j)
 ifN t9 goto whileend_1212
 #                     1349:       v[i] = u[i]
 t9 = H[t0+7](u) >> 31
 if t9 goto isM_1214
 t9 = H[t0+7](u) + H[t0+4](i)
 t9 = H[t9]()
 goto MorHdone_1215
:isM_1214:
 t9 = H[t0+7](u) & 2147483647
 t9 = t9 + H[t0+4](i)
 t9 = M[t9]
:MorHdone_1215:
 t10 = H[t0+5](v) & 2147483647
 t10 = t10 + H[t0+4](i)
 M[t10] = t9
 #                     1350:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_1210
:whileend_1212:
 #                     1351:     if id_ == 97:
 t9 = H[t0+1](id_) == 97
 ifN t9 goto else_1217
 #                     1352:       v[i] = 0x22
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 34
 goto endif_1218
:else_1217:
 #                     1353:     elif id_ == 105 or id_ == 116:
 t10 = H[t0+1](id_) == 105
 t11 = H[t0+1](id_) == 116
 t9 = t10 or t11
 ifN t9 goto else_1221
 #                     1354:       v[i] = 0x3d
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 61
 goto endif_1222
:else_1221:
 #                     1355:     elif id_ == 107:
 t9 = H[t0+1](id_) == 107
 ifN t9 goto else_1224
 #                     1356:       v[i] = 0x2c
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 44
 goto endif_1225
:else_1224:
 #                     1357:     elif id_ == 114:
 t9 = H[t0+1](id_) == 114
 ifN t9 goto else_1227
 #                     1358:       v[i] = 0x2e
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 46
 goto endif_1228
:else_1227:
:endif_1228:
:endif_1225:
:endif_1222:
:endif_1218:
 #                     1359:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1360:     if id_ == 97:
 t9 = H[t0+1](id_) == 97
 ifN t9 goto else_1230
 #                     1361:       v[i] = 0x3e
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 62
 goto endif_1231
:else_1230:
 #                     1362:     elif id_ == 105:
 t9 = H[t0+1](id_) == 105
 ifN t9 goto else_1233
 #                     1363:       v[i] = 0x22
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 34
 goto endif_1234
:else_1233:
 #                     1364:     elif id_ == 116:
 t9 = H[t0+1](id_) == 116
 ifN t9 goto else_1236
 #                     1365:       v[i] = 0x27
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 39
 goto endif_1237
:else_1236:
 #                     1366:     elif id_ == 107 or id_ == 114:
 t10 = H[t0+1](id_) == 107
 t11 = H[t0+1](id_) == 114
 t9 = t10 or t11
 ifN t9 goto else_1240
 #                     1367:       v[i] = 0x20
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 32
 goto endif_1241
:else_1240:
:endif_1241:
:endif_1237:
:endif_1234:
:endif_1231:
 #                     1368:     free_pM(u)
 t9 = H[t0+7](u) & 2147483647
 
    H[t0+16]() = t0
   # saved bsp, return id:
   H[t0+17]() = 105
   # push arguments:
   H[t0+18]() = t9
   t0 = t0 + 17
   goto addr_free_pM
  :return_id_105:
 t10 = t1
 
 goto endif_1209
:else_1208:
 #                     1369:   elif id_ == 102: # 2 vorne
 t9 = H[t0+1](id_) == 102
 ifN t9 goto else_1243
 #                     1370:     v = alloc_pM(l+2)
 t9 = H[t0+3](l) + 2
 
    H[t0+16]() = t0
   # saved bsp, return id:
   H[t0+17]() = 106
   # push arguments:
   H[t0+18]() = t9
   t0 = t0 + 17
   goto addr_alloc_pM
  :return_id_106:
 t10 = t1
 
 t10 = t10 | 2147483648
 H[t0+5](v) = t10
 #                     1371:     v[i] = 0xc2
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 194
 #                     1372:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1373:     v[i] = 0xa0
 t9 = H[t0+5](v) & 2147483647
 t9 = t9 + H[t0+4](i)
 M[t9] = 160
 #                     1374:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1375:     l += 1
 H[t0+3](l) = H[t0+3](l) + 1
 #                     1376:     while i <= l:
:while_1245:
 t9 = H[t0+4](i) <= H[t0+3](l)
 ifN t9 goto whileend_1247
 #                     1377:       v[i] = base_word[i-2]
 t9 = H[t0+4](i) - 2
 t10 = H[t0+2](base_word) & 2147483647
 t10 = t10 + t9
 t10 = M[t10]
 t11 = H[t0+5](v) & 2147483647
 t11 = t11 + H[t0+4](i)
 M[t11] = t10
 #                     1378:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_1245
:whileend_1247:
 goto endif_1244
:else_1243:
 #                     1379:   elif id_ == 110 or id_ == 111 or id_ == 117 or id_ == 119:  # upper all 1 vorne 2 hinten
 t13 = H[t0+1](id_) == 110
 t14 = H[t0+1](id_) == 111
 t12 = t13 or t14
 t13 = H[t0+1](id_) == 117
 t11 = t12 or t13
 t12 = H[t0+1](id_) == 119
 t10 = t11 or t12
 ifN t10 goto else_1253
 #                     1380:     u = uppercase_all(base_word)
 
    H[t0+17]() = t0
   # saved bsp, return id:
   H[t0+18]() = 107
   # push arguments:
   H[t0+19]() = H[t0+2](base_word)
   t0 = t0 + 18
   goto uppercase_all
  :return_id_107:
 t10 = t1
 
 H[t0+7](u) = t10
 #                     1381:     j = len_pM(u)
 t10 = H[t0+7](u)
 t10 = t10 & 2147483647
 t10 = t10 - 5
 t11 = M[t10] << 8
 t10 = t10 + 1
 t11 = t11 + M[t10]
 t11 = t11 << 8
 t10 = t10 + 1
 t11 = t11 + M[t10]
 t11 = t11 << 8
 t10 = t10 + 1
 t11 = t11 + M[t10]
 H[t0+6](j) = t11
 #                     1382:     v = alloc_pM(j+3)
 t10 = H[t0+6](j) + 3
 
    H[t0+17]() = t0
   # saved bsp, return id:
   H[t0+18]() = 108
   # push arguments:
   H[t0+19]() = t10
   t0 = t0 + 18
   goto addr_alloc_pM
  :return_id_108:
 t11 = t1
 
 t11 = t11 | 2147483648
 H[t0+5](v) = t11
 #                     1383:     v[0] = 0x20
 t10 = H[t0+5](v) & 2147483647
 t10 = t10 + 0
 M[t10] = 32
 #                     1384:     while i < j:
:while_1255:
 t10 = H[t0+4](i) < H[t0+6](j)
 ifN t10 goto whileend_1257
 #                     1385:       v[i+1] = u[i]
 t10 = H[t0+7](u) >> 31
 if t10 goto isM_1259
 t10 = H[t0+7](u) + H[t0+4](i)
 t10 = H[t10]()
 goto MorHdone_1260
:isM_1259:
 t10 = H[t0+7](u) & 2147483647
 t10 = t10 + H[t0+4](i)
 t10 = M[t10]
:MorHdone_1260:
 t11 = H[t0+4](i) + 1
 t12 = H[t0+5](v) & 2147483647
 t12 = t12 + t11
 M[t12] = t10
 #                     1386:       i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 goto while_1255
:whileend_1257:
 #                     1387:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1388:     if id_ == 110 or id_ == 119:
 t11 = H[t0+1](id_) == 110
 t12 = H[t0+1](id_) == 119
 t10 = t11 or t12
 ifN t10 goto else_1263
 #                     1389:       v[i] = 0x3d
 t10 = H[t0+5](v) & 2147483647
 t10 = t10 + H[t0+4](i)
 M[t10] = 61
 goto endif_1264
:else_1263:
 #                     1390:     elif id_ == 111:
 t10 = H[t0+1](id_) == 111
 ifN t10 goto else_1266
 #                     1391:       v[i] = 0x2c
 t10 = H[t0+5](v) & 2147483647
 t10 = t10 + H[t0+4](i)
 M[t10] = 44
 goto endif_1267
:else_1266:
 #                     1392:     elif id_ == 117:
 t10 = H[t0+1](id_) == 117
 ifN t10 goto else_1269
 #                     1393:       v[i] = 0x2e
 t10 = H[t0+5](v) & 2147483647
 t10 = t10 + H[t0+4](i)
 M[t10] = 46
 goto endif_1270
:else_1269:
:endif_1270:
:endif_1267:
:endif_1264:
 #                     1394:     i += 1
 H[t0+4](i) = H[t0+4](i) + 1
 #                     1395:     if id_ == 110:
 t10 = H[t0+1](id_) == 110
 ifN t10 goto else_1272
 #                     1396:       v[i] = 0x22
 t10 = H[t0+5](v) & 2147483647
 t10 = t10 + H[t0+4](i)
 M[t10] = 34
 goto endif_1273
:else_1272:
 #                     1397:     elif id_ == 110:
 t10 = H[t0+1](id_) == 110
 ifN t10 goto else_1275
 #                     1398:       v[i] = 0x27
 t10 = H[t0+5](v) & 2147483647
 t10 = t10 + H[t0+4](i)
 M[t10] = 39
 goto endif_1276
:else_1275:
 #                     1400:       v[i] = 0x20
 t10 = H[t0+5](v) & 2147483647
 t10 = t10 + H[t0+4](i)
 M[t10] = 32
:endif_1276:
:endif_1273:
 #                     1401:     free_pM(u)
 t10 = H[t0+7](u) & 2147483647
 
    H[t0+17]() = t0
   # saved bsp, return id:
   H[t0+18]() = 109
   # push arguments:
   H[t0+19]() = t10
   t0 = t0 + 18
   goto addr_free_pM
  :return_id_109:
 t11 = t1
 
 goto endif_1254
:else_1253:
 #                     1403:     return NONE # unreachable
    t1 = 4294967295
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_1254:
:endif_1244:
:endif_1209:
:endif_1196:
:endif_1181:
:endif_1173:
:endif_1166:
:endif_1142:
:endif_1116:
:endif_1106:
:endif_1071:
:endif_1057:
:endif_1054:
:endif_1017:
:endif_993:
:endif_981:
:endif_923:
:endif_885:
:endif_866:
:endif_825:
:endif_756:
:endif_745:
:endif_659:
:endif_631:
:endif_616:
:endif_562:
:endif_531:
:endif_492:
:endif_454:
:endif_415:
:endif_404:
 #                     1404:   return v
    t1 = H[t0+5](v)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:transformation_end~:
 #                     1407: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH = alloc_pH(25)
 
    H[t0+9]() = t0
   # saved bsp, return id:
   H[t0+10]() = 110
   # push arguments:
   H[t0+11]() = 25
   t0 = t0 + 10
   goto addr_alloc_pH
  :return_id_110:
 
 H[t0+9](BROTLI_DICTIONARY_OFFSETS_BY_LENGTH) = t1
 #                     1408: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[0] = 0
 t1 = H[t0+9](BROTLI_DICTIONARY_OFFSETS_BY_LENGTH) + 0
 H[t1]() = 0
 #                     1409: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[1] = 0
 t1 = t1 + 1
 H[t1]() = 0
 #                     1410: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[2] = 0
 t1 = t1 + 1
 H[t1]() = 0
 #                     1411: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[3] = 0
 t1 = t1 + 1
 H[t1]() = 0
 #                     1412: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[4] = 0
 t1 = t1 + 1
 H[t1]() = 0
 #                     1413: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[5] = 4096
 t1 = t1 + 1
 H[t1]() = 4096
 #                     1414: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[6] = 9216
 t1 = t1 + 1
 H[t1]() = 9216
 #                     1415: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[7] = 21504
 t1 = t1 + 1
 H[t1]() = 21504
 #                     1416: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[8] = 35840
 t1 = t1 + 1
 H[t1]() = 35840
 #                     1417: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[9] = 44032
 t1 = t1 + 1
 H[t1]() = 44032
 #                     1418: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[10] = 53248
 t1 = t1 + 1
 H[t1]() = 53248
 #                     1419: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[11] = 63488
 t1 = t1 + 1
 H[t1]() = 63488
 #                     1420: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[12] = 74752
 t1 = t1 + 1
 H[t1]() = 74752
 #                     1421: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[13] = 87040
 t1 = t1 + 1
 H[t1]() = 87040
 #                     1422: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[14] = 93696
 t1 = t1 + 1
 H[t1]() = 93696
 #                     1423: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[15] = 100864
 t1 = t1 + 1
 H[t1]() = 100864
 #                     1424: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[16] = 104704
 t1 = t1 + 1
 H[t1]() = 104704
 #                     1425: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[17] = 106752
 t1 = t1 + 1
 H[t1]() = 106752
 #                     1426: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[18] = 108928
 t1 = t1 + 1
 H[t1]() = 108928
 #                     1427: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[19] = 113536
 t1 = t1 + 1
 H[t1]() = 113536
 #                     1428: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[20] = 115968
 t1 = t1 + 1
 H[t1]() = 115968
 #                     1429: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[21] = 118528
 t1 = t1 + 1
 H[t1]() = 118528
 #                     1430: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[22] = 119872
 t1 = t1 + 1
 H[t1]() = 119872
 #                     1431: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[23] = 121280
 t1 = t1 + 1
 H[t1]() = 121280
 #                     1432: BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[24] = 122016
 t1 = t1 + 1
 H[t1]() = 122016
 #                     1434: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH = alloc_pM(25)
 
    H[t0+10]() = t0
   # saved bsp, return id:
   H[t0+11]() = 111
   # push arguments:
   H[t0+12]() = 25
   t0 = t0 + 11
   goto addr_alloc_pM
  :return_id_111:
 
 t1 = t1 | 2147483648
 H[t0+10](BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH) = t1
 #                     1435: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[0] = 0
 t1 = H[t0+10](BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH) & 2147483647
 t1 = t1 + 0
 M[t1] = 0
 #                     1436: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[1] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1437: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[2] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1438: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[3] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1439: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[4] = 10
 t1 = t1 + 1
 M[t1] = 10
 #                     1440: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[5] = 10
 t1 = t1 + 1
 M[t1] = 10
 #                     1441: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[6] = 11
 t1 = t1 + 1
 M[t1] = 11
 #                     1442: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[7] = 11
 t1 = t1 + 1
 M[t1] = 11
 #                     1443: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[8] = 10
 t1 = t1 + 1
 M[t1] = 10
 #                     1444: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[9] = 10
 t1 = t1 + 1
 M[t1] = 10
 #                     1445: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[10] = 10
 t1 = t1 + 1
 M[t1] = 10
 #                     1446: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[11] = 10
 t1 = t1 + 1
 M[t1] = 10
 #                     1447: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[12] = 10
 t1 = t1 + 1
 M[t1] = 10
 #                     1448: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[13] = 9
 t1 = t1 + 1
 M[t1] = 9
 #                     1449: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[14] = 9
 t1 = t1 + 1
 M[t1] = 9
 #                     1450: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[15] = 8
 t1 = t1 + 1
 M[t1] = 8
 #                     1451: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[16] = 7
 t1 = t1 + 1
 M[t1] = 7
 #                     1452: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[17] = 7
 t1 = t1 + 1
 M[t1] = 7
 #                     1453: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[18] = 8
 t1 = t1 + 1
 M[t1] = 8
 #                     1454: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[19] = 7
 t1 = t1 + 1
 M[t1] = 7
 #                     1455: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[20] = 7
 t1 = t1 + 1
 M[t1] = 7
 #                     1456: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[21] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     1457: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[22] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     1458: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[23] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     1459: BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[24] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     1461: BROTLI_DICTIONARY = NONE
 H[t0+11](BROTLI_DICTIONARY) = 4294967295
 #                     1465: LUT_0 = alloc_pM(256)
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 112
   # push arguments:
   H[t0+14]() = 256
   t0 = t0 + 13
   goto addr_alloc_pM
  :return_id_112:
 
 t1 = t1 | 2147483648
 H[t0+12](LUT_0) = t1
 #                     1466: LUT_0[0] = 0
 t1 = H[t0+12](LUT_0) & 2147483647
 t1 = t1 + 0
 M[t1] = 0
 #                     1467: LUT_0[1] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1468: LUT_0[2] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1469: LUT_0[3] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1470: LUT_0[4] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1471: LUT_0[5] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1472: LUT_0[6] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1473: LUT_0[7] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1474: LUT_0[8] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1475: LUT_0[9] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     1476: LUT_0[10] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     1477: LUT_0[11] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1478: LUT_0[12] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1479: LUT_0[13] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     1480: LUT_0[14] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1481: LUT_0[15] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1482: LUT_0[16] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1483: LUT_0[17] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1484: LUT_0[18] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1485: LUT_0[19] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1486: LUT_0[20] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1487: LUT_0[21] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1488: LUT_0[22] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1489: LUT_0[23] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1490: LUT_0[24] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1491: LUT_0[25] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1492: LUT_0[26] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1493: LUT_0[27] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1494: LUT_0[28] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1495: LUT_0[29] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1496: LUT_0[30] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1497: LUT_0[31] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1498: LUT_0[32] = 8
 t1 = t1 + 1
 M[t1] = 8
 #                     1499: LUT_0[33] = 12
 t1 = t1 + 1
 M[t1] = 12
 #                     1500: LUT_0[34] = 16
 t1 = t1 + 1
 M[t1] = 16
 #                     1501: LUT_0[35] = 12
 t1 = t1 + 1
 M[t1] = 12
 #                     1502: LUT_0[36] = 12
 t1 = t1 + 1
 M[t1] = 12
 #                     1503: LUT_0[37] = 20
 t1 = t1 + 1
 M[t1] = 20
 #                     1504: LUT_0[38] = 12
 t1 = t1 + 1
 M[t1] = 12
 #                     1505: LUT_0[39] = 16
 t1 = t1 + 1
 M[t1] = 16
 #                     1506: LUT_0[40] = 24
 t1 = t1 + 1
 M[t1] = 24
 #                     1507: LUT_0[41] = 28
 t1 = t1 + 1
 M[t1] = 28
 #                     1508: LUT_0[42] = 12
 t1 = t1 + 1
 M[t1] = 12
 #                     1509: LUT_0[43] = 12
 t1 = t1 + 1
 M[t1] = 12
 #                     1510: LUT_0[44] = 32
 t1 = t1 + 1
 M[t1] = 32
 #                     1511: LUT_0[45] = 12
 t1 = t1 + 1
 M[t1] = 12
 #                     1512: LUT_0[46] = 36
 t1 = t1 + 1
 M[t1] = 36
 #                     1513: LUT_0[47] = 12
 t1 = t1 + 1
 M[t1] = 12
 #                     1514: LUT_0[48] = 44
 t1 = t1 + 1
 M[t1] = 44
 #                     1515: LUT_0[49] = 44
 t1 = t1 + 1
 M[t1] = 44
 #                     1516: LUT_0[50] = 44
 t1 = t1 + 1
 M[t1] = 44
 #                     1517: LUT_0[51] = 44
 t1 = t1 + 1
 M[t1] = 44
 #                     1518: LUT_0[52] = 44
 t1 = t1 + 1
 M[t1] = 44
 #                     1519: LUT_0[53] = 44
 t1 = t1 + 1
 M[t1] = 44
 #                     1520: LUT_0[54] = 44
 t1 = t1 + 1
 M[t1] = 44
 #                     1521: LUT_0[55] = 44
 t1 = t1 + 1
 M[t1] = 44
 #                     1522: LUT_0[56] = 44
 t1 = t1 + 1
 M[t1] = 44
 #                     1523: LUT_0[57] = 44
 t1 = t1 + 1
 M[t1] = 44
 #                     1524: LUT_0[58] = 32
 t1 = t1 + 1
 M[t1] = 32
 #                     1525: LUT_0[59] = 32
 t1 = t1 + 1
 M[t1] = 32
 #                     1526: LUT_0[60] = 24
 t1 = t1 + 1
 M[t1] = 24
 #                     1527: LUT_0[61] = 40
 t1 = t1 + 1
 M[t1] = 40
 #                     1528: LUT_0[62] = 28
 t1 = t1 + 1
 M[t1] = 28
 #                     1529: LUT_0[63] = 12
 t1 = t1 + 1
 M[t1] = 12
 #                     1530: LUT_0[64] = 12
 t1 = t1 + 1
 M[t1] = 12
 #                     1531: LUT_0[65] = 48
 t1 = t1 + 1
 M[t1] = 48
 #                     1532: LUT_0[66] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1533: LUT_0[67] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1534: LUT_0[68] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1535: LUT_0[69] = 48
 t1 = t1 + 1
 M[t1] = 48
 #                     1536: LUT_0[70] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1537: LUT_0[71] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1538: LUT_0[72] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1539: LUT_0[73] = 48
 t1 = t1 + 1
 M[t1] = 48
 #                     1540: LUT_0[74] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1541: LUT_0[75] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1542: LUT_0[76] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1543: LUT_0[77] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1544: LUT_0[78] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1545: LUT_0[79] = 48
 t1 = t1 + 1
 M[t1] = 48
 #                     1546: LUT_0[80] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1547: LUT_0[81] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1548: LUT_0[82] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1549: LUT_0[83] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1550: LUT_0[84] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1551: LUT_0[85] = 48
 t1 = t1 + 1
 M[t1] = 48
 #                     1552: LUT_0[86] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1553: LUT_0[87] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1554: LUT_0[88] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1555: LUT_0[89] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1556: LUT_0[90] = 52
 t1 = t1 + 1
 M[t1] = 52
 #                     1557: LUT_0[91] = 24
 t1 = t1 + 1
 M[t1] = 24
 #                     1558: LUT_0[92] = 12
 t1 = t1 + 1
 M[t1] = 12
 #                     1559: LUT_0[93] = 28
 t1 = t1 + 1
 M[t1] = 28
 #                     1560: LUT_0[94] = 12
 t1 = t1 + 1
 M[t1] = 12
 #                     1561: LUT_0[95] = 12
 t1 = t1 + 1
 M[t1] = 12
 #                     1562: LUT_0[96] = 12
 t1 = t1 + 1
 M[t1] = 12
 #                     1563: LUT_0[97] = 56
 t1 = t1 + 1
 M[t1] = 56
 #                     1564: LUT_0[98] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1565: LUT_0[99] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1566: LUT_0[100] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1567: LUT_0[101] = 56
 t1 = t1 + 1
 M[t1] = 56
 #                     1568: LUT_0[102] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1569: LUT_0[103] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1570: LUT_0[104] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1571: LUT_0[105] = 56
 t1 = t1 + 1
 M[t1] = 56
 #                     1572: LUT_0[106] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1573: LUT_0[107] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1574: LUT_0[108] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1575: LUT_0[109] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1576: LUT_0[110] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1577: LUT_0[111] = 56
 t1 = t1 + 1
 M[t1] = 56
 #                     1578: LUT_0[112] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1579: LUT_0[113] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1580: LUT_0[114] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1581: LUT_0[115] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1582: LUT_0[116] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1583: LUT_0[117] = 56
 t1 = t1 + 1
 M[t1] = 56
 #                     1584: LUT_0[118] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1585: LUT_0[119] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1586: LUT_0[120] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1587: LUT_0[121] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1588: LUT_0[122] = 60
 t1 = t1 + 1
 M[t1] = 60
 #                     1589: LUT_0[123] = 24
 t1 = t1 + 1
 M[t1] = 24
 #                     1590: LUT_0[124] = 12
 t1 = t1 + 1
 M[t1] = 12
 #                     1591: LUT_0[125] = 28
 t1 = t1 + 1
 M[t1] = 28
 #                     1592: LUT_0[126] = 12
 t1 = t1 + 1
 M[t1] = 12
 #                     1593: LUT_0[127] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1594: LUT_0[128] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1595: LUT_0[129] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1596: LUT_0[130] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1597: LUT_0[131] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1598: LUT_0[132] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1599: LUT_0[133] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1600: LUT_0[134] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1601: LUT_0[135] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1602: LUT_0[136] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1603: LUT_0[137] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1604: LUT_0[138] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1605: LUT_0[139] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1606: LUT_0[140] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1607: LUT_0[141] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1608: LUT_0[142] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1609: LUT_0[143] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1610: LUT_0[144] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1611: LUT_0[145] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1612: LUT_0[146] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1613: LUT_0[147] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1614: LUT_0[148] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1615: LUT_0[149] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1616: LUT_0[150] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1617: LUT_0[151] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1618: LUT_0[152] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1619: LUT_0[153] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1620: LUT_0[154] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1621: LUT_0[155] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1622: LUT_0[156] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1623: LUT_0[157] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1624: LUT_0[158] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1625: LUT_0[159] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1626: LUT_0[160] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1627: LUT_0[161] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1628: LUT_0[162] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1629: LUT_0[163] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1630: LUT_0[164] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1631: LUT_0[165] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1632: LUT_0[166] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1633: LUT_0[167] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1634: LUT_0[168] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1635: LUT_0[169] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1636: LUT_0[170] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1637: LUT_0[171] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1638: LUT_0[172] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1639: LUT_0[173] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1640: LUT_0[174] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1641: LUT_0[175] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1642: LUT_0[176] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1643: LUT_0[177] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1644: LUT_0[178] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1645: LUT_0[179] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1646: LUT_0[180] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1647: LUT_0[181] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1648: LUT_0[182] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1649: LUT_0[183] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1650: LUT_0[184] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1651: LUT_0[185] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1652: LUT_0[186] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1653: LUT_0[187] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1654: LUT_0[188] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1655: LUT_0[189] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1656: LUT_0[190] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1657: LUT_0[191] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1658: LUT_0[192] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1659: LUT_0[193] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1660: LUT_0[194] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1661: LUT_0[195] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1662: LUT_0[196] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1663: LUT_0[197] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1664: LUT_0[198] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1665: LUT_0[199] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1666: LUT_0[200] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1667: LUT_0[201] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1668: LUT_0[202] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1669: LUT_0[203] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1670: LUT_0[204] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1671: LUT_0[205] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1672: LUT_0[206] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1673: LUT_0[207] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1674: LUT_0[208] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1675: LUT_0[209] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1676: LUT_0[210] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1677: LUT_0[211] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1678: LUT_0[212] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1679: LUT_0[213] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1680: LUT_0[214] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1681: LUT_0[215] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1682: LUT_0[216] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1683: LUT_0[217] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1684: LUT_0[218] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1685: LUT_0[219] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1686: LUT_0[220] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1687: LUT_0[221] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1688: LUT_0[222] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1689: LUT_0[223] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1690: LUT_0[224] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1691: LUT_0[225] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1692: LUT_0[226] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1693: LUT_0[227] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1694: LUT_0[228] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1695: LUT_0[229] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1696: LUT_0[230] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1697: LUT_0[231] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1698: LUT_0[232] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1699: LUT_0[233] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1700: LUT_0[234] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1701: LUT_0[235] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1702: LUT_0[236] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1703: LUT_0[237] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1704: LUT_0[238] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1705: LUT_0[239] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1706: LUT_0[240] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1707: LUT_0[241] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1708: LUT_0[242] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1709: LUT_0[243] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1710: LUT_0[244] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1711: LUT_0[245] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1712: LUT_0[246] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1713: LUT_0[247] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1714: LUT_0[248] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1715: LUT_0[249] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1716: LUT_0[250] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1717: LUT_0[251] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1718: LUT_0[252] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1719: LUT_0[253] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1720: LUT_0[254] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1721: LUT_0[255] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1723: LUT_1 = alloc_pM(256)
 
    H[t0+13]() = t0
   # saved bsp, return id:
   H[t0+14]() = 113
   # push arguments:
   H[t0+15]() = 256
   t0 = t0 + 14
   goto addr_alloc_pM
  :return_id_113:
 
 t1 = t1 | 2147483648
 H[t0+13](LUT_1) = t1
 #                     1724: LUT_1[0] = 0
 t1 = H[t0+13](LUT_1) & 2147483647
 t1 = t1 + 0
 M[t1] = 0
 #                     1725: LUT_1[1] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1726: LUT_1[2] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1727: LUT_1[3] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1728: LUT_1[4] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1729: LUT_1[5] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1730: LUT_1[6] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1731: LUT_1[7] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1732: LUT_1[8] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1733: LUT_1[9] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1734: LUT_1[10] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1735: LUT_1[11] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1736: LUT_1[12] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1737: LUT_1[13] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1738: LUT_1[14] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1739: LUT_1[15] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1740: LUT_1[16] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1741: LUT_1[17] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1742: LUT_1[18] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1743: LUT_1[19] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1744: LUT_1[20] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1745: LUT_1[21] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1746: LUT_1[22] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1747: LUT_1[23] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1748: LUT_1[24] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1749: LUT_1[25] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1750: LUT_1[26] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1751: LUT_1[27] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1752: LUT_1[28] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1753: LUT_1[29] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1754: LUT_1[30] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1755: LUT_1[31] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1756: LUT_1[32] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1757: LUT_1[33] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1758: LUT_1[34] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1759: LUT_1[35] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1760: LUT_1[36] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1761: LUT_1[37] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1762: LUT_1[38] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1763: LUT_1[39] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1764: LUT_1[40] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1765: LUT_1[41] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1766: LUT_1[42] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1767: LUT_1[43] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1768: LUT_1[44] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1769: LUT_1[45] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1770: LUT_1[46] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1771: LUT_1[47] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1772: LUT_1[48] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1773: LUT_1[49] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1774: LUT_1[50] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1775: LUT_1[51] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1776: LUT_1[52] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1777: LUT_1[53] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1778: LUT_1[54] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1779: LUT_1[55] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1780: LUT_1[56] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1781: LUT_1[57] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1782: LUT_1[58] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1783: LUT_1[59] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1784: LUT_1[60] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1785: LUT_1[61] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1786: LUT_1[62] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1787: LUT_1[63] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1788: LUT_1[64] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1789: LUT_1[65] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1790: LUT_1[66] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1791: LUT_1[67] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1792: LUT_1[68] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1793: LUT_1[69] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1794: LUT_1[70] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1795: LUT_1[71] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1796: LUT_1[72] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1797: LUT_1[73] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1798: LUT_1[74] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1799: LUT_1[75] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1800: LUT_1[76] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1801: LUT_1[77] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1802: LUT_1[78] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1803: LUT_1[79] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1804: LUT_1[80] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1805: LUT_1[81] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1806: LUT_1[82] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1807: LUT_1[83] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1808: LUT_1[84] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1809: LUT_1[85] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1810: LUT_1[86] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1811: LUT_1[87] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1812: LUT_1[88] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1813: LUT_1[89] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1814: LUT_1[90] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1815: LUT_1[91] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1816: LUT_1[92] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1817: LUT_1[93] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1818: LUT_1[94] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1819: LUT_1[95] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1820: LUT_1[96] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1821: LUT_1[97] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1822: LUT_1[98] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1823: LUT_1[99] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1824: LUT_1[100] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1825: LUT_1[101] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1826: LUT_1[102] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1827: LUT_1[103] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1828: LUT_1[104] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1829: LUT_1[105] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1830: LUT_1[106] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1831: LUT_1[107] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1832: LUT_1[108] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1833: LUT_1[109] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1834: LUT_1[110] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1835: LUT_1[111] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1836: LUT_1[112] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1837: LUT_1[113] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1838: LUT_1[114] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1839: LUT_1[115] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1840: LUT_1[116] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1841: LUT_1[117] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1842: LUT_1[118] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1843: LUT_1[119] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1844: LUT_1[120] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1845: LUT_1[121] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1846: LUT_1[122] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     1847: LUT_1[123] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1848: LUT_1[124] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1849: LUT_1[125] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1850: LUT_1[126] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1851: LUT_1[127] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1852: LUT_1[128] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1853: LUT_1[129] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1854: LUT_1[130] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1855: LUT_1[131] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1856: LUT_1[132] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1857: LUT_1[133] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1858: LUT_1[134] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1859: LUT_1[135] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1860: LUT_1[136] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1861: LUT_1[137] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1862: LUT_1[138] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1863: LUT_1[139] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1864: LUT_1[140] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1865: LUT_1[141] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1866: LUT_1[142] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1867: LUT_1[143] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1868: LUT_1[144] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1869: LUT_1[145] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1870: LUT_1[146] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1871: LUT_1[147] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1872: LUT_1[148] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1873: LUT_1[149] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1874: LUT_1[150] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1875: LUT_1[151] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1876: LUT_1[152] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1877: LUT_1[153] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1878: LUT_1[154] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1879: LUT_1[155] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1880: LUT_1[156] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1881: LUT_1[157] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1882: LUT_1[158] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1883: LUT_1[159] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1884: LUT_1[160] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1885: LUT_1[161] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1886: LUT_1[162] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1887: LUT_1[163] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1888: LUT_1[164] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1889: LUT_1[165] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1890: LUT_1[166] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1891: LUT_1[167] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1892: LUT_1[168] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1893: LUT_1[169] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1894: LUT_1[170] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1895: LUT_1[171] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1896: LUT_1[172] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1897: LUT_1[173] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1898: LUT_1[174] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1899: LUT_1[175] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1900: LUT_1[176] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1901: LUT_1[177] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1902: LUT_1[178] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1903: LUT_1[179] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1904: LUT_1[180] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1905: LUT_1[181] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1906: LUT_1[182] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1907: LUT_1[183] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1908: LUT_1[184] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1909: LUT_1[185] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1910: LUT_1[186] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1911: LUT_1[187] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1912: LUT_1[188] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1913: LUT_1[189] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1914: LUT_1[190] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1915: LUT_1[191] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1916: LUT_1[192] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1917: LUT_1[193] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1918: LUT_1[194] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1919: LUT_1[195] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1920: LUT_1[196] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1921: LUT_1[197] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1922: LUT_1[198] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1923: LUT_1[199] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1924: LUT_1[200] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1925: LUT_1[201] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1926: LUT_1[202] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1927: LUT_1[203] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1928: LUT_1[204] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1929: LUT_1[205] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1930: LUT_1[206] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1931: LUT_1[207] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1932: LUT_1[208] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1933: LUT_1[209] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1934: LUT_1[210] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1935: LUT_1[211] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1936: LUT_1[212] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1937: LUT_1[213] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1938: LUT_1[214] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1939: LUT_1[215] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1940: LUT_1[216] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1941: LUT_1[217] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1942: LUT_1[218] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1943: LUT_1[219] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1944: LUT_1[220] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1945: LUT_1[221] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1946: LUT_1[222] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1947: LUT_1[223] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     1948: LUT_1[224] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1949: LUT_1[225] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1950: LUT_1[226] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1951: LUT_1[227] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1952: LUT_1[228] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1953: LUT_1[229] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1954: LUT_1[230] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1955: LUT_1[231] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1956: LUT_1[232] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1957: LUT_1[233] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1958: LUT_1[234] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1959: LUT_1[235] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1960: LUT_1[236] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1961: LUT_1[237] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1962: LUT_1[238] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1963: LUT_1[239] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1964: LUT_1[240] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1965: LUT_1[241] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1966: LUT_1[242] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1967: LUT_1[243] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1968: LUT_1[244] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1969: LUT_1[245] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1970: LUT_1[246] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1971: LUT_1[247] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1972: LUT_1[248] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1973: LUT_1[249] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1974: LUT_1[250] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1975: LUT_1[251] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1976: LUT_1[252] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1977: LUT_1[253] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1978: LUT_1[254] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1979: LUT_1[255] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1981: LUT_2 = alloc_pM(256)
 
    H[t0+14]() = t0
   # saved bsp, return id:
   H[t0+15]() = 114
   # push arguments:
   H[t0+16]() = 256
   t0 = t0 + 15
   goto addr_alloc_pM
  :return_id_114:
 
 t1 = t1 | 2147483648
 H[t0+14](LUT_2) = t1
 #                     1982: LUT_2[0] = 0
 t1 = H[t0+14](LUT_2) & 2147483647
 t1 = t1 + 0
 M[t1] = 0
 #                     1983: LUT_2[1] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1984: LUT_2[2] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1985: LUT_2[3] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1986: LUT_2[4] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1987: LUT_2[5] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1988: LUT_2[6] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1989: LUT_2[7] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1990: LUT_2[8] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1991: LUT_2[9] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1992: LUT_2[10] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1993: LUT_2[11] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1994: LUT_2[12] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1995: LUT_2[13] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1996: LUT_2[14] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1997: LUT_2[15] = 1
 t1 = t1 + 1
 M[t1] = 1
 #                     1998: LUT_2[16] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     1999: LUT_2[17] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2000: LUT_2[18] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2001: LUT_2[19] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2002: LUT_2[20] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2003: LUT_2[21] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2004: LUT_2[22] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2005: LUT_2[23] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2006: LUT_2[24] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2007: LUT_2[25] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2008: LUT_2[26] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2009: LUT_2[27] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2010: LUT_2[28] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2011: LUT_2[29] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2012: LUT_2[30] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2013: LUT_2[31] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2014: LUT_2[32] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2015: LUT_2[33] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2016: LUT_2[34] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2017: LUT_2[35] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2018: LUT_2[36] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2019: LUT_2[37] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2020: LUT_2[38] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2021: LUT_2[39] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2022: LUT_2[40] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2023: LUT_2[41] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2024: LUT_2[42] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2025: LUT_2[43] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2026: LUT_2[44] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2027: LUT_2[45] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2028: LUT_2[46] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2029: LUT_2[47] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2030: LUT_2[48] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2031: LUT_2[49] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2032: LUT_2[50] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2033: LUT_2[51] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2034: LUT_2[52] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2035: LUT_2[53] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2036: LUT_2[54] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2037: LUT_2[55] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2038: LUT_2[56] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2039: LUT_2[57] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2040: LUT_2[58] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2041: LUT_2[59] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2042: LUT_2[60] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2043: LUT_2[61] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2044: LUT_2[62] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2045: LUT_2[63] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2046: LUT_2[64] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2047: LUT_2[65] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2048: LUT_2[66] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2049: LUT_2[67] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2050: LUT_2[68] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2051: LUT_2[69] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2052: LUT_2[70] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2053: LUT_2[71] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2054: LUT_2[72] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2055: LUT_2[73] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2056: LUT_2[74] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2057: LUT_2[75] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2058: LUT_2[76] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2059: LUT_2[77] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2060: LUT_2[78] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2061: LUT_2[79] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2062: LUT_2[80] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2063: LUT_2[81] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2064: LUT_2[82] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2065: LUT_2[83] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2066: LUT_2[84] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2067: LUT_2[85] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2068: LUT_2[86] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2069: LUT_2[87] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2070: LUT_2[88] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2071: LUT_2[89] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2072: LUT_2[90] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2073: LUT_2[91] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2074: LUT_2[92] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2075: LUT_2[93] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2076: LUT_2[94] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2077: LUT_2[95] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2078: LUT_2[96] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2079: LUT_2[97] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2080: LUT_2[98] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2081: LUT_2[99] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2082: LUT_2[100] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2083: LUT_2[101] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2084: LUT_2[102] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2085: LUT_2[103] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2086: LUT_2[104] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2087: LUT_2[105] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2088: LUT_2[106] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2089: LUT_2[107] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2090: LUT_2[108] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2091: LUT_2[109] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2092: LUT_2[110] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2093: LUT_2[111] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2094: LUT_2[112] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2095: LUT_2[113] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2096: LUT_2[114] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2097: LUT_2[115] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2098: LUT_2[116] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2099: LUT_2[117] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2100: LUT_2[118] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2101: LUT_2[119] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2102: LUT_2[120] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2103: LUT_2[121] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2104: LUT_2[122] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2105: LUT_2[123] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2106: LUT_2[124] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2107: LUT_2[125] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2108: LUT_2[126] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2109: LUT_2[127] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2110: LUT_2[128] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2111: LUT_2[129] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2112: LUT_2[130] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2113: LUT_2[131] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2114: LUT_2[132] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2115: LUT_2[133] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2116: LUT_2[134] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2117: LUT_2[135] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2118: LUT_2[136] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2119: LUT_2[137] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2120: LUT_2[138] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2121: LUT_2[139] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2122: LUT_2[140] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2123: LUT_2[141] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2124: LUT_2[142] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2125: LUT_2[143] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2126: LUT_2[144] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2127: LUT_2[145] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2128: LUT_2[146] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2129: LUT_2[147] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2130: LUT_2[148] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2131: LUT_2[149] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2132: LUT_2[150] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2133: LUT_2[151] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2134: LUT_2[152] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2135: LUT_2[153] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2136: LUT_2[154] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2137: LUT_2[155] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2138: LUT_2[156] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2139: LUT_2[157] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2140: LUT_2[158] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2141: LUT_2[159] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2142: LUT_2[160] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2143: LUT_2[161] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2144: LUT_2[162] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2145: LUT_2[163] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2146: LUT_2[164] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2147: LUT_2[165] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2148: LUT_2[166] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2149: LUT_2[167] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2150: LUT_2[168] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2151: LUT_2[169] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2152: LUT_2[170] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2153: LUT_2[171] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2154: LUT_2[172] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2155: LUT_2[173] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2156: LUT_2[174] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2157: LUT_2[175] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2158: LUT_2[176] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2159: LUT_2[177] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2160: LUT_2[178] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2161: LUT_2[179] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2162: LUT_2[180] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2163: LUT_2[181] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2164: LUT_2[182] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2165: LUT_2[183] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2166: LUT_2[184] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2167: LUT_2[185] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2168: LUT_2[186] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2169: LUT_2[187] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2170: LUT_2[188] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2171: LUT_2[189] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2172: LUT_2[190] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2173: LUT_2[191] = 4
 t1 = t1 + 1
 M[t1] = 4
 #                     2174: LUT_2[192] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2175: LUT_2[193] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2176: LUT_2[194] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2177: LUT_2[195] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2178: LUT_2[196] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2179: LUT_2[197] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2180: LUT_2[198] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2181: LUT_2[199] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2182: LUT_2[200] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2183: LUT_2[201] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2184: LUT_2[202] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2185: LUT_2[203] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2186: LUT_2[204] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2187: LUT_2[205] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2188: LUT_2[206] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2189: LUT_2[207] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2190: LUT_2[208] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2191: LUT_2[209] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2192: LUT_2[210] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2193: LUT_2[211] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2194: LUT_2[212] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2195: LUT_2[213] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2196: LUT_2[214] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2197: LUT_2[215] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2198: LUT_2[216] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2199: LUT_2[217] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2200: LUT_2[218] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2201: LUT_2[219] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2202: LUT_2[220] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2203: LUT_2[221] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2204: LUT_2[222] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2205: LUT_2[223] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2206: LUT_2[224] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2207: LUT_2[225] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2208: LUT_2[226] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2209: LUT_2[227] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2210: LUT_2[228] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2211: LUT_2[229] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2212: LUT_2[230] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2213: LUT_2[231] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2214: LUT_2[232] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2215: LUT_2[233] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2216: LUT_2[234] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2217: LUT_2[235] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2218: LUT_2[236] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2219: LUT_2[237] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2220: LUT_2[238] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2221: LUT_2[239] = 5
 t1 = t1 + 1
 M[t1] = 5
 #                     2222: LUT_2[240] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     2223: LUT_2[241] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     2224: LUT_2[242] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     2225: LUT_2[243] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     2226: LUT_2[244] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     2227: LUT_2[245] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     2228: LUT_2[246] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     2229: LUT_2[247] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     2230: LUT_2[248] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     2231: LUT_2[249] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     2232: LUT_2[250] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     2233: LUT_2[251] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     2234: LUT_2[252] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     2235: LUT_2[253] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     2236: LUT_2[254] = 6
 t1 = t1 + 1
 M[t1] = 6
 #                     2237: LUT_2[255] = 7
 t1 = t1 + 1
 M[t1] = 7
 #                     2240: table = alloc_pH(704*4)
 t1 = 704 * 4
 
    H[t0+15]() = t0
   # saved bsp, return id:
   H[t0+16]() = 115
   # push arguments:
   H[t0+17]() = t1
   t0 = t0 + 16
   goto addr_alloc_pH
  :return_id_115:
 t2 = t1
 
 H[t0+15](table) = t2
 #                     2241: insert_and_copy_length = 0
 H[t0+16](insert_and_copy_length) = 0
 #                     2242: while insert_and_copy_length < 704:
:while_1277:
 t1 = H[t0+16](insert_and_copy_length) < 704
 ifN t1 goto whileend_1279
 #                     2243:   if insert_and_copy_length >= 0 and insert_and_copy_length <= 63:
 t2 = H[t0+16](insert_and_copy_length) >= 0
 t3 = H[t0+16](insert_and_copy_length) <= 63
 t1 = t2 and t3
 ifN t1 goto else_1283
 #                     2244:     insert_length_code = 0
 H[t0+17](insert_length_code) = 0
 #                     2245:     copy_length_code = 0
 H[t0+18](copy_length_code) = 0
 goto endif_1284
:else_1283:
 #                     2246:   elif insert_and_copy_length >= 64 and insert_and_copy_length <= 127:
 t2 = H[t0+16](insert_and_copy_length) >= 64
 t3 = H[t0+16](insert_and_copy_length) <= 127
 t1 = t2 and t3
 ifN t1 goto else_1287
 #                     2247:     insert_length_code = 0
 H[t0+17](insert_length_code) = 0
 #                     2248:     copy_length_code = 8
 H[t0+18](copy_length_code) = 8
 goto endif_1288
:else_1287:
 #                     2249:   elif insert_and_copy_length >= 128 and insert_and_copy_length <= 191:
 t2 = H[t0+16](insert_and_copy_length) >= 128
 t3 = H[t0+16](insert_and_copy_length) <= 191
 t1 = t2 and t3
 ifN t1 goto else_1291
 #                     2250:     insert_length_code = 0
 H[t0+17](insert_length_code) = 0
 #                     2251:     copy_length_code = 0
 H[t0+18](copy_length_code) = 0
 goto endif_1292
:else_1291:
 #                     2252:   elif insert_and_copy_length >= 192 and insert_and_copy_length <= 255:
 t2 = H[t0+16](insert_and_copy_length) >= 192
 t3 = H[t0+16](insert_and_copy_length) <= 255
 t1 = t2 and t3
 ifN t1 goto else_1295
 #                     2253:     insert_length_code = 0
 H[t0+17](insert_length_code) = 0
 #                     2254:     copy_length_code = 8
 H[t0+18](copy_length_code) = 8
 goto endif_1296
:else_1295:
 #                     2255:   elif insert_and_copy_length >= 256 and insert_and_copy_length <= 319:
 t2 = H[t0+16](insert_and_copy_length) >= 256
 t3 = H[t0+16](insert_and_copy_length) <= 319
 t1 = t2 and t3
 ifN t1 goto else_1299
 #                     2256:     insert_length_code = 8
 H[t0+17](insert_length_code) = 8
 #                     2257:     copy_length_code = 0
 H[t0+18](copy_length_code) = 0
 goto endif_1300
:else_1299:
 #                     2258:   elif insert_and_copy_length >= 320 and insert_and_copy_length <= 383:
 t2 = H[t0+16](insert_and_copy_length) >= 320
 t3 = H[t0+16](insert_and_copy_length) <= 383
 t1 = t2 and t3
 ifN t1 goto else_1303
 #                     2259:     insert_length_code = 8
 H[t0+17](insert_length_code) = 8
 #                     2260:     copy_length_code = 8
 H[t0+18](copy_length_code) = 8
 goto endif_1304
:else_1303:
 #                     2261:   elif insert_and_copy_length >= 384 and insert_and_copy_length <= 447:
 t2 = H[t0+16](insert_and_copy_length) >= 384
 t3 = H[t0+16](insert_and_copy_length) <= 447
 t1 = t2 and t3
 ifN t1 goto else_1307
 #                     2262:     insert_length_code = 0
 H[t0+17](insert_length_code) = 0
 #                     2263:     copy_length_code = 16
 H[t0+18](copy_length_code) = 16
 goto endif_1308
:else_1307:
 #                     2264:   elif insert_and_copy_length >= 448 and insert_and_copy_length <= 511:
 t2 = H[t0+16](insert_and_copy_length) >= 448
 t3 = H[t0+16](insert_and_copy_length) <= 511
 t1 = t2 and t3
 ifN t1 goto else_1311
 #                     2265:     insert_length_code = 16
 H[t0+17](insert_length_code) = 16
 #                     2266:     copy_length_code = 0
 H[t0+18](copy_length_code) = 0
 goto endif_1312
:else_1311:
 #                     2267:   elif insert_and_copy_length >= 512 and insert_and_copy_length <= 575:
 t2 = H[t0+16](insert_and_copy_length) >= 512
 t3 = H[t0+16](insert_and_copy_length) <= 575
 t1 = t2 and t3
 ifN t1 goto else_1315
 #                     2268:     insert_length_code = 8
 H[t0+17](insert_length_code) = 8
 #                     2269:     copy_length_code = 16
 H[t0+18](copy_length_code) = 16
 goto endif_1316
:else_1315:
 #                     2270:   elif insert_and_copy_length >= 576 and insert_and_copy_length <= 639:
 t2 = H[t0+16](insert_and_copy_length) >= 576
 t3 = H[t0+16](insert_and_copy_length) <= 639
 t1 = t2 and t3
 ifN t1 goto else_1319
 #                     2271:     insert_length_code = 16
 H[t0+17](insert_length_code) = 16
 #                     2272:     copy_length_code = 8
 H[t0+18](copy_length_code) = 8
 goto endif_1320
:else_1319:
 #                     2273:   elif insert_and_copy_length >= 640 and insert_and_copy_length <= 703:
 t2 = H[t0+16](insert_and_copy_length) >= 640
 t3 = H[t0+16](insert_and_copy_length) <= 703
 t1 = t2 and t3
 ifN t1 goto else_1323
 #                     2274:     insert_length_code = 16
 H[t0+17](insert_length_code) = 16
 #                     2275:     copy_length_code = 16
 H[t0+18](copy_length_code) = 16
 goto endif_1324
:else_1323:
 #                     2277:     error() # print('unreachable')
 error
:endif_1324:
:endif_1320:
:endif_1316:
:endif_1312:
:endif_1308:
:endif_1304:
:endif_1300:
:endif_1296:
:endif_1292:
:endif_1288:
:endif_1284:
 #                     2278:   insert_length_code += 0x07 & (insert_and_copy_length >> 3)
 t2 = H[t0+16](insert_and_copy_length) >> 3
 t1 = 7 & t2
 H[t0+17](insert_length_code) = H[t0+17](insert_length_code) + t1
 #                     2279:   copy_length_code += 0x07 & insert_and_copy_length
 t1 = 7 & H[t0+16](insert_and_copy_length)
 H[t0+18](copy_length_code) = H[t0+18](copy_length_code) + t1
 #                     2280:   if insert_length_code >= 0 and insert_length_code <= 5:
 t2 = H[t0+17](insert_length_code) >= 0
 t3 = H[t0+17](insert_length_code) <= 5
 t1 = t2 and t3
 ifN t1 goto else_1327
 #                     2281:     insert_length = insert_length_code
 H[t0+19](insert_length) = H[t0+17](insert_length_code)
 #                     2282:     extra_bits_insert = 0
 H[t0+20](extra_bits_insert) = 0
 goto endif_1328
:else_1327:
 #                     2283:   elif insert_length_code == 6 or insert_length_code == 7:
 t2 = H[t0+17](insert_length_code) == 6
 t3 = H[t0+17](insert_length_code) == 7
 t1 = t2 or t3
 ifN t1 goto else_1331
 #                     2284:     insert_length = 6 + 2 * (insert_length_code - 6)
 t3 = H[t0+17](insert_length_code) - 6
 t2 = 2 * t3
 t1 = 6 + t2
 H[t0+19](insert_length) = t1
 #                     2285:     extra_bits_insert = 1
 H[t0+20](extra_bits_insert) = 1
 goto endif_1332
:else_1331:
 #                     2286:   elif insert_length_code == 8 or insert_length_code == 9:
 t2 = H[t0+17](insert_length_code) == 8
 t3 = H[t0+17](insert_length_code) == 9
 t1 = t2 or t3
 ifN t1 goto else_1335
 #                     2287:     insert_length = 10 + 4 * (insert_length_code - 8)
 t3 = H[t0+17](insert_length_code) - 8
 t2 = 4 * t3
 t1 = 10 + t2
 H[t0+19](insert_length) = t1
 #                     2288:     extra_bits_insert = 2
 H[t0+20](extra_bits_insert) = 2
 goto endif_1336
:else_1335:
 #                     2289:   elif insert_length_code == 10 or insert_length_code == 11:
 t2 = H[t0+17](insert_length_code) == 10
 t3 = H[t0+17](insert_length_code) == 11
 t1 = t2 or t3
 ifN t1 goto else_1339
 #                     2290:     insert_length = 18 + 8 * (insert_length_code - 10)
 t3 = H[t0+17](insert_length_code) - 10
 t2 = 8 * t3
 t1 = 18 + t2
 H[t0+19](insert_length) = t1
 #                     2291:     extra_bits_insert = 3
 H[t0+20](extra_bits_insert) = 3
 goto endif_1340
:else_1339:
 #                     2292:   elif insert_length_code == 12 or insert_length_code == 13:
 t2 = H[t0+17](insert_length_code) == 12
 t3 = H[t0+17](insert_length_code) == 13
 t1 = t2 or t3
 ifN t1 goto else_1343
 #                     2293:     insert_length = 34 + 16 * (insert_length_code - 12)
 t3 = H[t0+17](insert_length_code) - 12
 t2 = 16 * t3
 t1 = 34 + t2
 H[t0+19](insert_length) = t1
 #                     2294:     extra_bits_insert = 4
 H[t0+20](extra_bits_insert) = 4
 goto endif_1344
:else_1343:
 #                     2295:   elif insert_length_code == 14 or insert_length_code == 15:
 t2 = H[t0+17](insert_length_code) == 14
 t3 = H[t0+17](insert_length_code) == 15
 t1 = t2 or t3
 ifN t1 goto else_1347
 #                     2296:     insert_length = 66 + 32 * (insert_length_code - 14)
 t3 = H[t0+17](insert_length_code) - 14
 t2 = 32 * t3
 t1 = 66 + t2
 H[t0+19](insert_length) = t1
 #                     2297:     extra_bits_insert = 5
 H[t0+20](extra_bits_insert) = 5
 goto endif_1348
:else_1347:
 #                     2298:   elif insert_length_code == 16:
 t1 = H[t0+17](insert_length_code) == 16
 ifN t1 goto else_1350
 #                     2299:     insert_length = 130
 H[t0+19](insert_length) = 130
 #                     2300:     extra_bits_insert = 6
 H[t0+20](extra_bits_insert) = 6
 goto endif_1351
:else_1350:
 #                     2301:   elif insert_length_code == 17:
 t1 = H[t0+17](insert_length_code) == 17
 ifN t1 goto else_1353
 #                     2302:     insert_length = 194
 H[t0+19](insert_length) = 194
 #                     2303:     extra_bits_insert = 7
 H[t0+20](extra_bits_insert) = 7
 goto endif_1354
:else_1353:
 #                     2304:   elif insert_length_code == 18:
 t1 = H[t0+17](insert_length_code) == 18
 ifN t1 goto else_1356
 #                     2305:     insert_length = 322
 H[t0+19](insert_length) = 322
 #                     2306:     extra_bits_insert = 8
 H[t0+20](extra_bits_insert) = 8
 goto endif_1357
:else_1356:
 #                     2307:   elif insert_length_code == 19:
 t1 = H[t0+17](insert_length_code) == 19
 ifN t1 goto else_1359
 #                     2308:     insert_length = 578
 H[t0+19](insert_length) = 578
 #                     2309:     extra_bits_insert = 9
 H[t0+20](extra_bits_insert) = 9
 goto endif_1360
:else_1359:
 #                     2310:   elif insert_length_code == 20:
 t1 = H[t0+17](insert_length_code) == 20
 ifN t1 goto else_1362
 #                     2311:     insert_length = 1090
 H[t0+19](insert_length) = 1090
 #                     2312:     extra_bits_insert = 10
 H[t0+20](extra_bits_insert) = 10
 goto endif_1363
:else_1362:
 #                     2313:   elif insert_length_code == 21:
 t1 = H[t0+17](insert_length_code) == 21
 ifN t1 goto else_1365
 #                     2314:     insert_length = 2114
 H[t0+19](insert_length) = 2114
 #                     2315:     extra_bits_insert = 12
 H[t0+20](extra_bits_insert) = 12
 goto endif_1366
:else_1365:
 #                     2316:   elif insert_length_code == 22:
 t1 = H[t0+17](insert_length_code) == 22
 ifN t1 goto else_1368
 #                     2317:     insert_length = 6210
 H[t0+19](insert_length) = 6210
 #                     2318:     extra_bits_insert = 14
 H[t0+20](extra_bits_insert) = 14
 goto endif_1369
:else_1368:
 #                     2319:   elif insert_length_code == 23:
 t1 = H[t0+17](insert_length_code) == 23
 ifN t1 goto else_1371
 #                     2320:     insert_length = 22594
 H[t0+19](insert_length) = 22594
 #                     2321:     extra_bits_insert = 24
 H[t0+20](extra_bits_insert) = 24
 goto endif_1372
:else_1371:
 #                     2323:     error() # print('unreachable')
 error
:endif_1372:
:endif_1369:
:endif_1366:
:endif_1363:
:endif_1360:
:endif_1357:
:endif_1354:
:endif_1351:
:endif_1348:
:endif_1344:
:endif_1340:
:endif_1336:
:endif_1332:
:endif_1328:
 #                     2324:   if copy_length_code >= 0 and copy_length_code <= 7:
 t2 = H[t0+18](copy_length_code) >= 0
 t3 = H[t0+18](copy_length_code) <= 7
 t1 = t2 and t3
 ifN t1 goto else_1375
 #                     2325:     copy_length = copy_length_code + 2
 t1 = H[t0+18](copy_length_code) + 2
 H[t0+21](copy_length) = t1
 #                     2326:     extra_bits_copy = 0
 H[t0+22](extra_bits_copy) = 0
 goto endif_1376
:else_1375:
 #                     2327:   elif copy_length_code == 8 or copy_length_code == 9:
 t2 = H[t0+18](copy_length_code) == 8
 t3 = H[t0+18](copy_length_code) == 9
 t1 = t2 or t3
 ifN t1 goto else_1379
 #                     2328:     copy_length = 10 + 2 * (copy_length_code - 8)
 t3 = H[t0+18](copy_length_code) - 8
 t2 = 2 * t3
 t1 = 10 + t2
 H[t0+21](copy_length) = t1
 #                     2329:     extra_bits_copy = 1
 H[t0+22](extra_bits_copy) = 1
 goto endif_1380
:else_1379:
 #                     2330:   elif copy_length_code == 10 or copy_length_code == 11:
 t2 = H[t0+18](copy_length_code) == 10
 t3 = H[t0+18](copy_length_code) == 11
 t1 = t2 or t3
 ifN t1 goto else_1383
 #                     2331:     copy_length = 14 + 4 * (copy_length_code - 10)
 t3 = H[t0+18](copy_length_code) - 10
 t2 = 4 * t3
 t1 = 14 + t2
 H[t0+21](copy_length) = t1
 #                     2332:     extra_bits_copy = 2
 H[t0+22](extra_bits_copy) = 2
 goto endif_1384
:else_1383:
 #                     2333:   elif copy_length_code == 12 or copy_length_code == 13:
 t2 = H[t0+18](copy_length_code) == 12
 t3 = H[t0+18](copy_length_code) == 13
 t1 = t2 or t3
 ifN t1 goto else_1387
 #                     2334:     copy_length = 22 + 8 * (copy_length_code - 12)
 t3 = H[t0+18](copy_length_code) - 12
 t2 = 8 * t3
 t1 = 22 + t2
 H[t0+21](copy_length) = t1
 #                     2335:     extra_bits_copy = 3
 H[t0+22](extra_bits_copy) = 3
 goto endif_1388
:else_1387:
 #                     2336:   elif copy_length_code == 14 or copy_length_code == 15:
 t2 = H[t0+18](copy_length_code) == 14
 t3 = H[t0+18](copy_length_code) == 15
 t1 = t2 or t3
 ifN t1 goto else_1391
 #                     2337:     copy_length = 38 + 16 * (copy_length_code - 14)
 t3 = H[t0+18](copy_length_code) - 14
 t2 = 16 * t3
 t1 = 38 + t2
 H[t0+21](copy_length) = t1
 #                     2338:     extra_bits_copy = 4
 H[t0+22](extra_bits_copy) = 4
 goto endif_1392
:else_1391:
 #                     2339:   elif copy_length_code == 16 or copy_length_code == 17:
 t2 = H[t0+18](copy_length_code) == 16
 t3 = H[t0+18](copy_length_code) == 17
 t1 = t2 or t3
 ifN t1 goto else_1395
 #                     2340:     copy_length = 70 + 32 * (copy_length_code - 16)
 t3 = H[t0+18](copy_length_code) - 16
 t2 = 32 * t3
 t1 = 70 + t2
 H[t0+21](copy_length) = t1
 #                     2341:     extra_bits_copy = 5
 H[t0+22](extra_bits_copy) = 5
 goto endif_1396
:else_1395:
 #                     2342:   elif copy_length_code == 18:
 t1 = H[t0+18](copy_length_code) == 18
 ifN t1 goto else_1398
 #                     2343:     copy_length = 134
 H[t0+21](copy_length) = 134
 #                     2344:     extra_bits_copy = 6
 H[t0+22](extra_bits_copy) = 6
 goto endif_1399
:else_1398:
 #                     2345:   elif copy_length_code == 19:
 t1 = H[t0+18](copy_length_code) == 19
 ifN t1 goto else_1401
 #                     2346:     copy_length = 198
 H[t0+21](copy_length) = 198
 #                     2347:     extra_bits_copy = 7
 H[t0+22](extra_bits_copy) = 7
 goto endif_1402
:else_1401:
 #                     2348:   elif copy_length_code == 20:
 t1 = H[t0+18](copy_length_code) == 20
 ifN t1 goto else_1404
 #                     2349:     copy_length = 326
 H[t0+21](copy_length) = 326
 #                     2350:     extra_bits_copy = 8
 H[t0+22](extra_bits_copy) = 8
 goto endif_1405
:else_1404:
 #                     2351:   elif copy_length_code == 21:
 t1 = H[t0+18](copy_length_code) == 21
 ifN t1 goto else_1407
 #                     2352:     copy_length = 582
 H[t0+21](copy_length) = 582
 #                     2353:     extra_bits_copy = 9
 H[t0+22](extra_bits_copy) = 9
 goto endif_1408
:else_1407:
 #                     2354:   elif copy_length_code == 22:
 t1 = H[t0+18](copy_length_code) == 22
 ifN t1 goto else_1410
 #                     2355:     copy_length = 1094
 H[t0+21](copy_length) = 1094
 #                     2356:     extra_bits_copy = 10
 H[t0+22](extra_bits_copy) = 10
 goto endif_1411
:else_1410:
 #                     2357:   elif copy_length_code == 23:
 t1 = H[t0+18](copy_length_code) == 23
 ifN t1 goto else_1413
 #                     2358:     copy_length = 2118
 H[t0+21](copy_length) = 2118
 #                     2359:     extra_bits_copy = 24
 H[t0+22](extra_bits_copy) = 24
 goto endif_1414
:else_1413:
 #                     2361:     error() # print('unreachable')
 error
:endif_1414:
:endif_1411:
:endif_1408:
:endif_1405:
:endif_1402:
:endif_1399:
:endif_1396:
:endif_1392:
:endif_1388:
:endif_1384:
:endif_1380:
:endif_1376:
 #                     2362:   table[insert_and_copy_length*4] = insert_length
 t1 = H[t0+16](insert_and_copy_length) * 4
 t2 = H[t0+15](table) + t1
 H[t2]() = H[t0+19](insert_length)
 #                     2363:   table[insert_and_copy_length*4 + 1] = extra_bits_insert
 t2 = H[t0+16](insert_and_copy_length) * 4
 t1 = t2 + 1
 t2 = H[t0+15](table) + t1
 H[t2]() = H[t0+20](extra_bits_insert)
 #                     2364:   table[insert_and_copy_length*4 + 2] = copy_length
 t2 = H[t0+16](insert_and_copy_length) * 4
 t1 = t2 + 2
 t2 = H[t0+15](table) + t1
 H[t2]() = H[t0+21](copy_length)
 #                     2365:   table[insert_and_copy_length*4 + 3] = extra_bits_copy
 t2 = H[t0+16](insert_and_copy_length) * 4
 t1 = t2 + 3
 t2 = H[t0+15](table) + t1
 H[t2]() = H[t0+22](extra_bits_copy)
 #                     2366:   insert_and_copy_length += 1
 H[t0+16](insert_and_copy_length) = H[t0+16](insert_and_copy_length) + 1
 goto while_1277
:whileend_1279:
 #                     2368: INSERT_LENGTHS_AND_COPY_LENGTHS = table
 H[t0+23](INSERT_LENGTHS_AND_COPY_LENGTHS) = H[t0+15](table)
 #                     2372: PrefixCodeKind_Simple = 1
 H[t0+24](PrefixCodeKind_Simple) = 1
 #                     2373: PrefixCodeKind_Complex = 2
 H[t0+25](PrefixCodeKind_Complex) = 2
 #                     2374: PrefixCodeKind_Complex_data = NONE
 H[t0+26](PrefixCodeKind_Complex_data) = 4294967295
 #                     2378: StreamBegin = 1
 H[t0+27](StreamBegin) = 1
 #                     2379: HeaderBegin = 2
 H[t0+28](HeaderBegin) = 2
 #                     2380: WBits = 3
 H[t0+29](WBits) = 3
 #                     2381: WBits_data = 0
 H[t0+30](WBits_data) = 0
 #                     2382: HeaderEnd = 4
 H[t0+31](HeaderEnd) = 4
 #                     2383: HeaderMetaBlockBegin = 5
 H[t0+32](HeaderMetaBlockBegin) = 5
 #                     2384: IsLast = 6
 H[t0+33](IsLast) = 6
 #                     2385: IsLast_data = 0
 H[t0+34](IsLast_data) = 0
 #                     2386: IsLastEmpty = 7
 H[t0+35](IsLastEmpty) = 7
 #                     2387: IsLastEmpty_data = 0
 H[t0+36](IsLastEmpty_data) = 0
 #                     2388: MNibbles = 8
 H[t0+37](MNibbles) = 8
 #                     2389: MNibbles_data = 0
 H[t0+38](MNibbles_data) = 0
 #                     2390: MSkipBytes = 9
 H[t0+39](MSkipBytes) = 9
 #                     2391: MSkipBytes_data = 0
 H[t0+40](MSkipBytes_data) = 0
 #                     2392: MSkipLen = 10
 H[t0+41](MSkipLen) = 10
 #                     2393: MSkipLen_data = 0
 H[t0+42](MSkipLen_data) = 0
 #                     2394: MLen = 11
 H[t0+43](MLen) = 11
 #                     2395: MLen_data = 0
 H[t0+44](MLen_data) = 0
 #                     2396: IsUncompressed = 12
 H[t0+45](IsUncompressed) = 12
 #                     2397: IsUncompressed_data = 0
 H[t0+46](IsUncompressed_data) = 0
 #                     2398: MLenLiterals = 13
 H[t0+47](MLenLiterals) = 13
 #                     2399: MLenLiterals_data = 0 # []
 H[t0+48](MLenLiterals_data) = 0
 #                     2400: NBltypesL = 14
 H[t0+49](NBltypesL) = 14
 #                     2401: NBltypesL_data = 0
 H[t0+50](NBltypesL_data) = 0
 #                     2402: PrefixCodeBlockTypesLiterals = 15
 H[t0+51](PrefixCodeBlockTypesLiterals) = 15
 #                     2403: PrefixCodeBlockTypesLiterals_data = 0  # (HuffmanCodes)
 H[t0+52](PrefixCodeBlockTypesLiterals_data) = 0
 #                     2404: PrefixCodeBlockCountsLiterals = 16
 H[t0+53](PrefixCodeBlockCountsLiterals) = 16
 #                     2405: PrefixCodeBlockCountsLiterals_data = 0 # (HuffmanCodes)
 H[t0+54](PrefixCodeBlockCountsLiterals_data) = 0
 #                     2406: FirstBlockCountLiterals = 17
 H[t0+55](FirstBlockCountLiterals) = 17
 #                     2407: FirstBlockCountLiterals_data = 0 # (BLen)
 H[t0+56](FirstBlockCountLiterals_data) = 0
 #                     2408: NBltypesI = 18
 H[t0+57](NBltypesI) = 18
 #                     2409: NBltypesI_data = 0
 H[t0+58](NBltypesI_data) = 0
 #                     2410: PrefixCodeBlockTypesInsertAndCopyLengths = 19
 H[t0+59](PrefixCodeBlockTypesInsertAndCopyLengths) = 19
 #                     2411: PrefixCodeBlockTypesInsertAndCopyLengths_data = 0 # (HuffmanCodes)
 H[t0+60](PrefixCodeBlockTypesInsertAndCopyLengths_data) = 0
 #                     2412: PrefixCodeBlockCountsInsertAndCopyLengths = 20
 H[t0+61](PrefixCodeBlockCountsInsertAndCopyLengths) = 20
 #                     2413: PrefixCodeBlockCountsInsertAndCopyLengths_data = 0 # (HuffmanCodes)
 H[t0+62](PrefixCodeBlockCountsInsertAndCopyLengths_data) = 0
 #                     2414: FirstBlockCountInsertAndCopyLengths = 21
 H[t0+63](FirstBlockCountInsertAndCopyLengths) = 21
 #                     2415: FirstBlockCountInsertAndCopyLengths_data = 0
 H[t0+64](FirstBlockCountInsertAndCopyLengths_data) = 0
 #                     2416: NBltypesD = 22
 H[t0+65](NBltypesD) = 22
 #                     2417: NBltypesD_data = 0 # (NBltypes)
 H[t0+66](NBltypesD_data) = 0
 #                     2418: PrefixCodeBlockTypesDistances = 23
 H[t0+67](PrefixCodeBlockTypesDistances) = 23
 #                     2419: PrefixCodeBlockTypesDistances_data = 0 # (HuffmanCodes)
 H[t0+68](PrefixCodeBlockTypesDistances_data) = 0
 #                     2420: PrefixCodeBlockCountsDistances = 24
 H[t0+69](PrefixCodeBlockCountsDistances) = 24
 #                     2421: PrefixCodeBlockCountsDistances_data = 0 # (HuffmanCodes)
 H[t0+70](PrefixCodeBlockCountsDistances_data) = 0
 #                     2422: FirstBlockCountDistances = 25
 H[t0+71](FirstBlockCountDistances) = 25
 #                     2423: FirstBlockCountDistances_data = 0 #(BLen)
 H[t0+72](FirstBlockCountDistances_data) = 0
 #                     2424: NPostfix = 26
 H[t0+73](NPostfix) = 26
 #                     2425: NPostfix_data = 0
 H[t0+74](NPostfix_data) = 0
 #                     2426: NDirect = 27
 H[t0+75](NDirect) = 27
 #                     2427: NDirect_data = 0
 H[t0+76](NDirect_data) = 0
 #                     2428: ContextModesLiterals = 28
 H[t0+77](ContextModesLiterals) = 28
 #                     2429: ContextModesLiterals_data = 0 # (ContextModes)
 H[t0+78](ContextModesLiterals_data) = 0
 #                     2430: NTreesL = 29
 H[t0+79](NTreesL) = 29
 #                     2431: NTreesL_data = 0 # (NTrees)
 H[t0+80](NTreesL_data) = 0
 #                     2432: NTreesD = 30
 H[t0+81](NTreesD) = 30
 #                     2433: NTreesD_data = 0 #(NTrees)
 H[t0+82](NTreesD_data) = 0
 #                     2434: ContextMapDistances = 31
 H[t0+83](ContextMapDistances) = 31
 #                     2435: ContextMapDistances_data = 0 # (ContextMap)
 H[t0+84](ContextMapDistances_data) = 0
 #                     2436: ContextMapLiterals = 32
 H[t0+85](ContextMapLiterals) = 32
 #                     2437: ContextMapLiterals_data = 0 # (ContextMap)
 H[t0+86](ContextMapLiterals_data) = 0
 #                     2438: PrefixCodesLiterals = 33
 H[t0+87](PrefixCodesLiterals) = 33
 #                     2439: PrefixCodesLiterals_data = 0 # (Vec<HuffmanCodes>)
 H[t0+88](PrefixCodesLiterals_data) = 0
 #                     2440: PrefixCodesInsertAndCopyLengths = 34
 H[t0+89](PrefixCodesInsertAndCopyLengths) = 34
 #                     2441: PrefixCodesInsertAndCopyLengths_data = 0 # (Vec<HuffmanCodes>)
 H[t0+90](PrefixCodesInsertAndCopyLengths_data) = 0
 #                     2442: PrefixCodesDistances = 35
 H[t0+91](PrefixCodesDistances) = 35
 #                     2443: PrefixCodesDistances_data = 0 # (Vec<HuffmanCodes>)
 H[t0+92](PrefixCodesDistances_data) = 0
 #                     2444: DataMetaBlockBegin = 36
 H[t0+93](DataMetaBlockBegin) = 36
 #                     2445: InsertAndCopyLength = 37
 H[t0+94](InsertAndCopyLength) = 37
 #                     2446: InsertAndCopyLength_data = 0
 H[t0+95](InsertAndCopyLength_data) = 0
 #                     2447: InsertLengthAndCopyLength = 38
 H[t0+96](InsertLengthAndCopyLength) = 38
 #                     2448: InsertLengthAndCopyLength_data_co_len = NONE
 H[t0+97](InsertLengthAndCopyLength_data_co_len) = 4294967295
 #                     2449: InsertLengthAndCopyLength_data_in_len = NONE
 H[t0+98](InsertLengthAndCopyLength_data_in_len) = 4294967295
 #                     2450: InsertLiterals = 39
 H[t0+99](InsertLiterals) = 39
 #                     2451: InsertLiterals_data = 0 #(Literals)
 H[t0+100](InsertLiterals_data) = 0
 #                     2452: DistanceCode = 40
 H[t0+101](DistanceCode) = 40
 #                     2453: DistanceCode_data = 0 #(DistanceCode)
 H[t0+102](DistanceCode_data) = 0
 #                     2454: Distance = 41
 H[t0+103](Distance) = 41
 #                     2455: Distance_data = 0 # (Distance)
 H[t0+104](Distance_data) = 0
 #                     2456: CopyLiterals = 42
 H[t0+105](CopyLiterals) = 42
 #                     2457: CopyLiterals_data = 0 # (Literals)
 H[t0+106](CopyLiterals_data) = 0
 #                     2458: DataMetaBlockEnd = 43
 H[t0+107](DataMetaBlockEnd) = 43
 #                     2459: MetaBlockEnd = 44
 H[t0+108](MetaBlockEnd) = 44
 #                     2460: StreamEnd = 45
 H[t0+109](StreamEnd) = 45
 #                     2462: t_array = alloc_pH(255)
 
    H[t0+110]() = t0
   # saved bsp, return id:
   H[t0+111]() = 116
   # push arguments:
   H[t0+112]() = 255
   t0 = t0 + 111
   goto addr_alloc_pH
  :return_id_116:
 
 H[t0+110](t_array) = t1
 #                     2463: i = 0
 H[t0+111](i) = 0
 #                     2464: while i < 255:
:while_1415:
 t1 = H[t0+111](i) < 255
 ifN t1 goto whileend_1417
 #                     2465:   t_array[i] = NONE
 t1 = H[t0+110](t_array) + H[t0+111](i)
 H[t1]() = 4294967295
 #                     2466:   i += 1
 H[t0+111](i) = H[t0+111](i) + 1
 goto while_1415
:whileend_1417:
 #                     2467: t_array[1] = 16
 t1 = H[t0+110](t_array) + 1
 H[t1]() = 16
 #                     2468: t_array[24] = 21
 t1 = H[t0+110](t_array) + 24
 H[t1]() = 21
 #                     2469: t_array[25] = 19
 t1 = t1 + 1
 H[t1]() = 19
 #                     2470: t_array[26] = 23
 t1 = t1 + 1
 H[t1]() = 23
 #                     2471: t_array[27] = 18
 t1 = t1 + 1
 H[t1]() = 18
 #                     2472: t_array[28] = 22
 t1 = t1 + 1
 H[t1]() = 22
 #                     2473: t_array[29] = 20
 t1 = t1 + 1
 H[t1]() = 20
 #                     2474: t_array[30] = 24
 t1 = t1 + 1
 H[t1]() = 24
 #                     2475: t_array[191] = 17
 t1 = H[t0+110](t_array) + 191
 H[t1]() = 17
 #                     2476: t_array[192] = 12
 t1 = t1 + 1
 H[t1]() = 12
 #                     2477: t_array[193] = 10
 t1 = t1 + 1
 H[t1]() = 10
 #                     2478: t_array[194] = 14
 t1 = t1 + 1
 H[t1]() = 14
 #                     2479: t_array[196] = 13
 t1 = H[t0+110](t_array) + 196
 H[t1]() = 13
 #                     2480: t_array[197] = 11
 t1 = t1 + 1
 H[t1]() = 11
 #                     2481: t_array[198] = 15
 t1 = t1 + 1
 H[t1]() = 15
 #                     2482: header_wbits_codes = tree_from_raw_data(t_array, 15, 24)
 
    H[t0+112]() = t0
   # saved bsp, return id:
   H[t0+113]() = 117
   # push arguments:
   H[t0+114]() = H[t0+110](t_array)
   H[t0+115]() = 15
   H[t0+116]() = 24
   t0 = t0 + 113
   goto tree_from_raw_data
  :return_id_117:
 
 H[t0+112](header_wbits_codes) = t1
 #                     2484: t_array = alloc_pH(31)
 
    H[t0+113]() = t0
   # saved bsp, return id:
   H[t0+114]() = 118
   # push arguments:
   H[t0+115]() = 31
   t0 = t0 + 114
   goto addr_alloc_pH
  :return_id_118:
 
 H[t0+110](t_array) = t1
 #                     2485: i = 0
 H[t0+111](i) = 0
 #                     2486: while i < 31:
:while_1419:
 t1 = H[t0+111](i) < 31
 ifN t1 goto whileend_1421
 #                     2487:   t_array[i] = NONE
 t1 = H[t0+110](t_array) + H[t0+111](i)
 H[t1]() = 4294967295
 #                     2488:   i += 1
 H[t0+111](i) = H[t0+111](i) + 1
 goto while_1419
:whileend_1421:
 #                     2489: t_array[3] = 0
 t1 = H[t0+110](t_array) + 3
 H[t1]() = 0
 #                     2490: t_array[4] = 3
 t1 = t1 + 1
 H[t1]() = 3
 #                     2491: t_array[5] = 4
 t1 = t1 + 1
 H[t1]() = 4
 #                     2492: t_array[13] = 2
 t1 = H[t0+110](t_array) + 13
 H[t1]() = 2
 #                     2493: t_array[29] = 1
 t1 = H[t0+110](t_array) + 29
 H[t1]() = 1
 #                     2494: t_array[30] = 5
 t1 = t1 + 1
 H[t1]() = 5
 #                     2495: header_bit_lengths_code = tree_from_raw_data(t_array, 6, 5)
 
    H[t0+113]() = t0
   # saved bsp, return id:
   H[t0+114]() = 119
   # push arguments:
   H[t0+115]() = H[t0+110](t_array)
   H[t0+116]() = 6
   H[t0+117]() = 5
   t0 = t0 + 114
   goto tree_from_raw_data
  :return_id_119:
 
 H[t0+113](header_bit_lengths_code) = t1
 #                     2497: t_array = alloc_pH(31)
 
    H[t0+114]() = t0
   # saved bsp, return id:
   H[t0+115]() = 120
   # push arguments:
   H[t0+116]() = 31
   t0 = t0 + 115
   goto addr_alloc_pH
  :return_id_120:
 
 H[t0+110](t_array) = t1
 #                     2498: i = 0
 H[t0+111](i) = 0
 #                     2499: while i < 31:
:while_1423:
 t1 = H[t0+111](i) < 31
 ifN t1 goto whileend_1425
 #                     2500:   t_array[i] = NONE
 t1 = H[t0+110](t_array) + H[t0+111](i)
 H[t1]() = 4294967295
 #                     2501:   i += 1
 H[t0+111](i) = H[t0+111](i) + 1
 goto while_1423
:whileend_1425:
 #                     2502: t_array[1] = 1
 t1 = H[t0+110](t_array) + 1
 H[t1]() = 1
 #                     2503: t_array[23] = 2
 t1 = H[t0+110](t_array) + 23
 H[t1]() = 2
 #                     2504: t_array[24] = 17
 t1 = t1 + 1
 H[t1]() = 17
 #                     2505: t_array[25] = 5
 t1 = t1 + 1
 H[t1]() = 5
 #                     2506: t_array[26] = 65
 t1 = t1 + 1
 H[t1]() = 65
 #                     2507: t_array[27] = 3
 t1 = t1 + 1
 H[t1]() = 3
 #                     2508: t_array[28] = 33
 t1 = t1 + 1
 H[t1]() = 33
 #                     2509: t_array[29] = 9
 t1 = t1 + 1
 H[t1]() = 9
 #                     2510: t_array[30] = 129
 t1 = t1 + 1
 H[t1]() = 129
 #                     2511: header_bltype_codes = tree_from_raw_data(t_array, 9, 129)
 
    H[t0+114]() = t0
   # saved bsp, return id:
   H[t0+115]() = 121
   # push arguments:
   H[t0+116]() = H[t0+110](t_array)
   H[t0+117]() = 9
   H[t0+118]() = 129
   t0 = t0 + 115
   goto tree_from_raw_data
  :return_id_121:
 
 H[t0+114](header_bltype_codes) = t1
 #                     2513: header_wbits = NONE
 H[t0+115](header_wbits) = 4294967295
 #                     2514: header_window_size = NONE
 H[t0+116](header_window_size) = 4294967295
 #                     2515: output_window = NONE # RingBuffer []
 H[t0+117](output_window) = 4294967295
 #                     2516: output_window_pointer = 0  # or NONE... # @TODO: add % NONE+1(?) for + 1
 H[t0+118](output_window_pointer) = 0
 #                     2517: count_output = 0 # Decompressor.count_output
 H[t0+119](count_output) = 0
 #                     2518: distance_buf = alloc_pH(4)
 
    H[t0+120]() = t0
   # saved bsp, return id:
   H[t0+121]() = 122
   # push arguments:
   H[t0+122]() = 4
   t0 = t0 + 121
   goto addr_alloc_pH
  :return_id_122:
 
 H[t0+120](distance_buf) = t1
 #                     2519: distance_buf[0] = 16  # reversed!
 t1 = H[t0+120](distance_buf) + 0
 H[t1]() = 16
 #                     2520: distance_buf[1] = 15
 t1 = t1 + 1
 H[t1]() = 15
 #                     2521: distance_buf[2] = 11
 t1 = t1 + 1
 H[t1]() = 11
 #                     2522: distance_buf[3] = 4
 t1 = t1 + 1
 H[t1]() = 4
 #                     2523: distance_buf_pointer = 3
 H[t0+121](distance_buf_pointer) = 3
 #                     2524: literal_buf = alloc_pM(2)
 
    H[t0+122]() = t0
   # saved bsp, return id:
   H[t0+123]() = 123
   # push arguments:
   H[t0+124]() = 2
   t0 = t0 + 123
   goto addr_alloc_pM
  :return_id_123:
 
 t1 = t1 | 2147483648
 H[t0+122](literal_buf) = t1
 #                     2525: literal_buf[0] = 0
 t1 = H[t0+122](literal_buf) & 2147483647
 t1 = t1 + 0
 M[t1] = 0
 #                     2526: literal_buf[1] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     2527: literal_buf_pointer = 0
 H[t0+123](literal_buf_pointer) = 0
 #                     2528: meta_block_header_is_last = NONE
 H[t0+124](meta_block_header_is_last) = 4294967295
 #                     2529: meta_block_header_is_last_empty = NONE
 H[t0+125](meta_block_header_is_last_empty) = 4294967295
 #                     2530: meta_block_header_m_nibbles = NONE
 H[t0+126](meta_block_header_m_nibbles) = 4294967295
 #                     2531: meta_block_header_m_skip_bytes = NONE
 H[t0+127](meta_block_header_m_skip_bytes) = 4294967295
 #                     2532: meta_block_header_m_skip_len = NONE
 H[t0+128](meta_block_header_m_skip_len) = 4294967295
 #                     2533: meta_block_header_m_len = NONE
 H[t0+129](meta_block_header_m_len) = 4294967295
 #                     2534: meta_block_header_is_uncompressed = NONE
 H[t0+130](meta_block_header_is_uncompressed) = 4294967295
 #                     2535: meta_block_header_n_bltypes_l = NONE
 H[t0+131](meta_block_header_n_bltypes_l) = 4294967295
 #                     2536: meta_block_header_n_bltypes_i = NONE
 H[t0+132](meta_block_header_n_bltypes_i) = 4294967295
 #                     2537: meta_block_header_n_bltypes_d = NONE
 H[t0+133](meta_block_header_n_bltypes_d) = 4294967295
 #                     2538: meta_block_header_n_postfix = NONE
 H[t0+134](meta_block_header_n_postfix) = 4294967295
 #                     2539: meta_block_header_n_direct = NONE
 H[t0+135](meta_block_header_n_direct) = 4294967295
 #                     2540: meta_block_header_n_trees_l = NONE
 H[t0+136](meta_block_header_n_trees_l) = 4294967295
 #                     2541: meta_block_header_n_trees_d = NONE
 H[t0+137](meta_block_header_n_trees_d) = 4294967295
 #                     2542: meta_block_header_c_map_l = NONE
 H[t0+138](meta_block_header_c_map_l) = 4294967295
 #                     2543: meta_block_header_c_map_d = NONE
 H[t0+139](meta_block_header_c_map_d) = 4294967295
 #                     2544: meta_block_prefix_tree_block_types_literals = NONE
 H[t0+140](meta_block_prefix_tree_block_types_literals) = 4294967295
 #                     2545: meta_block_prefix_tree_block_counts_literals = NONE
 H[t0+141](meta_block_prefix_tree_block_counts_literals) = 4294967295
 #                     2546: meta_block_prefix_trees_literals = NONE
 H[t0+142](meta_block_prefix_trees_literals) = 4294967295
 #                     2547: meta_block_count_output = 0
 H[t0+143](meta_block_count_output) = 0
 #                     2548: meta_block_btype_l = 0
 H[t0+144](meta_block_btype_l) = 0
 #                     2549: meta_block_btype_l_prev = 1
 H[t0+145](meta_block_btype_l_prev) = 1
 #                     2550: meta_block_blen_l = NONE
 H[t0+146](meta_block_blen_l) = 4294967295
 #                     2551: meta_block_blen_i = NONE
 H[t0+147](meta_block_blen_i) = 4294967295
 #                     2552: meta_block_blen_d = NONE
 H[t0+148](meta_block_blen_d) = 4294967295
 #                     2553: meta_block_btype_i = 0
 H[t0+149](meta_block_btype_i) = 0
 #                     2554: meta_block_btype_i_prev = 1
 H[t0+150](meta_block_btype_i_prev) = 1
 #                     2555: meta_block_btype_d = 0
 H[t0+151](meta_block_btype_d) = 0
 #                     2556: meta_block_btype_d_prev = 1
 H[t0+152](meta_block_btype_d_prev) = 1
 #                     2557: meta_block_prefix_tree_block_types_insert_and_copy_lengths = NONE    # @TODO: cast here already for type information
 H[t0+153](meta_block_prefix_tree_block_types_insert_and_copy_lengths) = 4294967295
 #                     2558: meta_block_prefix_tree_block_counts_insert_and_copy_lengths = NONE
 H[t0+154](meta_block_prefix_tree_block_counts_insert_and_copy_lengths) = 4294967295
 #                     2559: meta_block_prefix_tree_block_types_distances = NONE
 H[t0+155](meta_block_prefix_tree_block_types_distances) = 4294967295
 #                     2560: meta_block_prefix_tree_block_counts_distances = NONE
 H[t0+156](meta_block_prefix_tree_block_counts_distances) = 4294967295
 #                     2561: meta_block_prefix_trees_insert_and_copy_lengths = NONE
 H[t0+157](meta_block_prefix_trees_insert_and_copy_lengths) = 4294967295
 #                     2562: meta_block_prefix_trees_distances = NONE
 H[t0+158](meta_block_prefix_trees_distances) = 4294967295
 #                     2563: meta_block_context_modes_literals = NONE
 H[t0+159](meta_block_context_modes_literals) = 4294967295
 #                     2564: meta_block_insert_and_copy_length = NONE
 H[t0+160](meta_block_insert_and_copy_length) = 4294967295
 #                     2565: meta_block_copy_length = NONE
 H[t0+161](meta_block_copy_length) = 4294967295
 #                     2566: meta_block_insert_length = NONE
 H[t0+162](meta_block_insert_length) = 4294967295
 #                     2567: meta_block_distance = NONE
 H[t0+163](meta_block_distance) = 4294967295
 #                     2568: meta_block_distance_code = NONE
 H[t0+164](meta_block_distance_code) = 4294967295
 #                     2571: state = StreamBegin
 H[t0+165](state) = H[t0+27](StreamBegin)
 #                     2573: def parse_wbits():
 goto parse_wbits_end~
:parse_wbits:
 MarkTempVarStart
 #                     2574:   return lookup_symbol(header_wbits_codes)
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 124
   # push arguments:
   H[t0+3]() = H[t252+112](header_wbits_codes)
   t0 = t0 + 2
   goto lookup_symbol
  :return_id_124:
 
    t1 = t1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_wbits_end~:
 #                     2576: def parse_is_last():
 goto parse_is_last_end~
:parse_is_last:
 MarkTempVarStart
 #                     2577:   global IsLast_data
 # Global IsLast_data via H[t252+34]
 #                     2578:   if read_bit():
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 125
   # push arguments:
   t0 = t0 + 2
   goto read_bit
  :return_id_125:
 
 ifN t1 goto else_1427
 #                     2579:     error() # eof
 error
 goto endif_1428
:else_1427:
 #                     2581:     IsLast_data = read_bit_result
 H[t252+34](IsLast_data) = H[t252+6](read_bit_result)
 #                     2582:     return IsLast
    t1 = H[t252+33](IsLast)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_1428:
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_is_last_end~:
 #                     2584: def parse_is_last_empty():
 goto parse_is_last_empty_end~
:parse_is_last_empty:
 MarkTempVarStart
 #                     2585:   global IsLastEmpty_data
 # Global IsLastEmpty_data via H[t252+36]
 #                     2586:   if read_bit():
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 126
   # push arguments:
   t0 = t0 + 2
   goto read_bit
  :return_id_126:
 
 ifN t1 goto else_1429
 #                     2587:     error() # eof
 error
 goto endif_1430
:else_1429:
 #                     2589:     IsLastEmpty_data = read_bit_result
 H[t252+36](IsLastEmpty_data) = H[t252+6](read_bit_result)
 #                     2590:     return IsLastEmpty
    t1 = H[t252+35](IsLastEmpty)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_1430:
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_is_last_empty_end~:
 #                     2592: def parse_m_nibbles():
 goto parse_m_nibbles_end~
:parse_m_nibbles:
 MarkTempVarStart
 #                     2593:   global MNibbles_data
 # Global MNibbles_data via H[t252+38]
 #                     2594:   if read_u32_from_n_bits(2):
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 127
   # push arguments:
   H[t0+3]() = 2
   t0 = t0 + 2
   goto read_u32_from_n_bits
  :return_id_127:
 
 ifN t1 goto else_1431
 #                     2595:     error() # eof
 error
 goto endif_1432
:else_1431:
:endif_1432:
 #                     2596:   if read_u32_from_n_bits_result == 3:
 t1 = H[t252+7](read_u32_from_n_bits_result) == 3
 ifN t1 goto else_1434
 #                     2597:     MNibbles_data = 0
 H[t252+38](MNibbles_data) = 0
 #                     2598:     return MNibbles
    t1 = H[t252+37](MNibbles)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_1435
:else_1434:
 #                     2600:     MNibbles_data = read_u32_from_n_bits_result + 4
 t1 = H[t252+7](read_u32_from_n_bits_result) + 4
 H[t252+38](MNibbles_data) = t1
 #                     2601:     return MNibbles
    t1 = H[t252+37](MNibbles)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_1435:
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_m_nibbles_end~:
 #                     2603: def parse_m_skip_bytes():
 goto parse_m_skip_bytes_end~
:parse_m_skip_bytes:
 MarkTempVarStart
 #                     2604:   global MSkipBytes_data
 # Global MSkipBytes_data via H[t252+40]
 #                     2605:   if read_u32_from_n_bits(2):
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 128
   # push arguments:
   H[t0+3]() = 2
   t0 = t0 + 2
   goto read_u32_from_n_bits
  :return_id_128:
 
 ifN t1 goto else_1436
 #                     2606:     error() # eof
 error
 goto endif_1437
:else_1436:
:endif_1437:
 #                     2607:   MSkipBytes_data = read_u32_from_n_bits_result
 H[t252+40](MSkipBytes_data) = H[t252+7](read_u32_from_n_bits_result)
 #                     2608:   return MSkipBytes
    t1 = H[t252+39](MSkipBytes)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_m_skip_bytes_end~:
 #                     2610: def parse_m_skip_len():
 goto parse_m_skip_len_end~
:parse_m_skip_len:
 MarkTempVarStart
 #                     2611:     global MSkipLen_data
 # Global MSkipLen_data via H[t252+42]
 #                     2612:     bytes_ = read_fixed_length_string(meta_block_header_m_skip_bytes)
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 129
   # push arguments:
   H[t0+3]() = H[t252+127](meta_block_header_m_skip_bytes)
   t0 = t0 + 2
   goto read_fixed_length_string
  :return_id_129:
 
 H[t0+1](bytes_) = t1
 #                     2613:     if bytes_ == NONE:
 t1 = H[t0+1](bytes_) == 4294967295
 ifN t1 goto else_1439
 #                     2614:       error() # eof
 error
 goto endif_1440
:else_1439:
:endif_1440:
 #                     2615:     if meta_block_header_m_skip_bytes > 1 and bytes_[meta_block_header_m_skip_bytes - 1] == 0:
 t2 = H[t252+127](meta_block_header_m_skip_bytes) > 1
 t4 = H[t252+127](meta_block_header_m_skip_bytes) - 1
 t5 = H[t0+1](bytes_) >> 31
 if t5 goto isM_1442
 t5 = H[t0+1](bytes_) + t4
 t5 = H[t5]()
 goto MorHdone_1443
:isM_1442:
 t5 = H[t0+1](bytes_) & 2147483647
 t5 = t5 + t4
 t5 = M[t5]
:MorHdone_1443:
 t3 = t5 == 0
 t1 = t2 and t3
 ifN t1 goto else_1445
 #                     2616:       error()
 error
 goto endif_1446
:else_1445:
:endif_1446:
 #                     2617:     MSkipLen_data = 0
 H[t252+42](MSkipLen_data) = 0
 #                     2618:     i = 0
 H[t0+2](i) = 0
 #                     2619:     while i < meta_block_header_m_skip_bytes:
:while_1447:
 t1 = H[t0+2](i) < H[t252+127](meta_block_header_m_skip_bytes)
 ifN t1 goto whileend_1449
 #                     2620:       MSkipLen_data = MSkipLen_data | (bytes_[i] << i)  # u32!
 t3 = H[t0+1](bytes_) >> 31
 if t3 goto isM_1451
 t3 = H[t0+1](bytes_) + H[t0+2](i)
 t3 = H[t3]()
 goto MorHdone_1452
:isM_1451:
 t3 = H[t0+1](bytes_) & 2147483647
 t3 = t3 + H[t0+2](i)
 t3 = M[t3]
:MorHdone_1452:
 t2 = t3 << H[t0+2](i)
 t1 = H[t252+42](MSkipLen_data) | t2
 H[t252+42](MSkipLen_data) = t1
 #                     2621:       i += 1
 H[t0+2](i) = H[t0+2](i) + 1
 goto while_1447
:whileend_1449:
 #                     2622:     free_pM(bytes_)
 t1 = H[t0+1](bytes_) & 2147483647
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 130
   # push arguments:
   H[t0+6]() = t1
   t0 = t0 + 5
   goto addr_free_pM
  :return_id_130:
 t2 = t1
 
 #                     2623:     return MSkipLen
    t1 = H[t252+41](MSkipLen)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_m_skip_len_end~:
 #                     2625: def parse_m_len():
 goto parse_m_len_end~
:parse_m_len:
 MarkTempVarStart
 #                     2626:     global MLen_data
 # Global MLen_data via H[t252+44]
 #                     2627:     if read_u32_from_n_nibbles(meta_block_header_m_nibbles):
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 131
   # push arguments:
   H[t0+3]() = H[t252+126](meta_block_header_m_nibbles)
   t0 = t0 + 2
   goto read_u32_from_n_nibbles
  :return_id_131:
 
 ifN t1 goto else_1453
 #                     2628:       error()
 error
 goto endif_1454
:else_1453:
:endif_1454:
 #                     2629:     if meta_block_header_m_nibbles > 4 and (read_u32_from_n_nibbles_result >> ((meta_block_header_m_nibbles - 1)*4) == 0):
 t2 = H[t252+126](meta_block_header_m_nibbles) > 4
 t6 = H[t252+126](meta_block_header_m_nibbles) - 1
 t5 = t6 * 4
 t4 = H[t252+8](read_u32_from_n_nibbles_result) >> t5
 t3 = t4 == 0
 t1 = t2 and t3
 ifN t1 goto else_1457
 #                     2630:       error() # NonZeroTrailerNibble
 error
 goto endif_1458
:else_1457:
:endif_1458:
 #                     2631:     MLen_data = read_u32_from_n_nibbles_result + 1
 t1 = H[t252+8](read_u32_from_n_nibbles_result) + 1
 H[t252+44](MLen_data) = t1
 #                     2632:     return MLen
    t1 = H[t252+43](MLen)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_m_len_end~:
 #                     2634: def parse_is_uncompressed():
 goto parse_is_uncompressed_end~
:parse_is_uncompressed:
 MarkTempVarStart
 #                     2635:     global IsUncompressed_data
 # Global IsUncompressed_data via H[t252+46]
 #                     2636:     if read_bit():
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 132
   # push arguments:
   t0 = t0 + 2
   goto read_bit
  :return_id_132:
 
 ifN t1 goto else_1459
 #                     2637:       error()
 error
 goto endif_1460
:else_1459:
:endif_1460:
 #                     2638:     IsUncompressed_data = read_bit_result
 H[t252+46](IsUncompressed_data) = H[t252+6](read_bit_result)
 #                     2639:     return IsUncompressed
    t1 = H[t252+45](IsUncompressed)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_is_uncompressed_end~:
 #                     2641: def parse_mlen_literals():
 goto parse_mlen_literals_end~
:parse_mlen_literals:
 MarkTempVarStart
 #                     2642:     global MLenLiterals_data
 # Global MLenLiterals_data via H[t252+48]
 #                     2643:     MLenLiterals_data = read_fixed_length_string(meta_block_header_m_len)
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 133
   # push arguments:
   H[t0+3]() = H[t252+129](meta_block_header_m_len)
   t0 = t0 + 2
   goto read_fixed_length_string
  :return_id_133:
 
 H[t252+48](MLenLiterals_data) = t1
 #                     2644:     if MLenLiterals_data == NONE:
 t1 = H[t252+48](MLenLiterals_data) == 4294967295
 ifN t1 goto else_1462
 #                     2645:       error()
 error
 goto endif_1463
:else_1462:
:endif_1463:
 #                     2646:     return MLenLiterals
    t1 = H[t252+47](MLenLiterals)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_mlen_literals_end~:
 #                     2648: def parse_n_bltypes():
 goto parse_n_bltypes_end~
:parse_n_bltypes:
 MarkTempVarStart
 #                     2649:   value = lookup_symbol(header_bltype_codes)
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 134
   # push arguments:
   H[t0+3]() = H[t252+114](header_bltype_codes)
   t0 = t0 + 2
   goto lookup_symbol
  :return_id_134:
 
 H[t0+1](value) = t1
 #                     2650:   if value == 1 or value == 2:
 t2 = H[t0+1](value) == 1
 t3 = H[t0+1](value) == 2
 t1 = t2 or t3
 ifN t1 goto else_1466
 #                     2651:     extra_bits = 0
 H[t0+2](extra_bits) = 0
 goto endif_1467
:else_1466:
 #                     2652:   elif value == 3:
 t1 = H[t0+1](value) == 3
 ifN t1 goto else_1469
 #                     2653:     extra_bits = 1
 H[t0+2](extra_bits) = 1
 goto endif_1470
:else_1469:
 #                     2654:   elif value == 5:
 t1 = H[t0+1](value) == 5
 ifN t1 goto else_1472
 #                     2655:     extra_bits = 2
 H[t0+2](extra_bits) = 2
 goto endif_1473
:else_1472:
 #                     2656:   elif value == 9:
 t1 = H[t0+1](value) == 9
 ifN t1 goto else_1475
 #                     2657:     extra_bits = 3
 H[t0+2](extra_bits) = 3
 goto endif_1476
:else_1475:
 #                     2658:   elif value == 17:
 t1 = H[t0+1](value) == 17
 ifN t1 goto else_1478
 #                     2659:     extra_bits = 4
 H[t0+2](extra_bits) = 4
 goto endif_1479
:else_1478:
 #                     2660:   elif value == 33:
 t1 = H[t0+1](value) == 33
 ifN t1 goto else_1481
 #                     2661:     extra_bits = 5
 H[t0+2](extra_bits) = 5
 goto endif_1482
:else_1481:
 #                     2662:   elif value == 65:
 t1 = H[t0+1](value) == 65
 ifN t1 goto else_1484
 #                     2663:     extra_bits = 6
 H[t0+2](extra_bits) = 6
 goto endif_1485
:else_1484:
 #                     2664:   elif value == 129:
 t1 = H[t0+1](value) == 129
 ifN t1 goto else_1487
 #                     2665:     extra_bits = 7
 H[t0+2](extra_bits) = 7
 goto endif_1488
:else_1487:
:endif_1488:
:endif_1485:
:endif_1482:
:endif_1479:
:endif_1476:
:endif_1473:
:endif_1470:
:endif_1467:
 #                     2666:   if extra_bits > 0:
 t1 = H[t0+2](extra_bits) > 0
 ifN t1 goto else_1490
 #                     2667:     if read_u32_from_n_bits(extra_bits):
 
    H[t0+3]() = t0
   # saved bsp, return id:
   H[t0+4]() = 135
   # push arguments:
   H[t0+5]() = H[t0+2](extra_bits)
   t0 = t0 + 4
   goto read_u32_from_n_bits
  :return_id_135:
 
 ifN t1 goto else_1492
 #                     2668:       error()
 error
 goto endif_1493
:else_1492:
:endif_1493:
 #                     2669:     return value + read_u32_from_n_bits_result
 t1 = H[t0+1](value) + H[t252+7](read_u32_from_n_bits_result)
    t1 = t1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_1491
:else_1490:
 #                     2671:     return value
    t1 = H[t0+1](value)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_1491:
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_n_bltypes_end~:
 #                     2673: def parse_n_bltypes_l():
 goto parse_n_bltypes_l_end~
:parse_n_bltypes_l:
 MarkTempVarStart
 #                     2674:   global NBltypesL_data
 # Global NBltypesL_data via H[t252+50]
 #                     2675:   NBltypesL_data = parse_n_bltypes()
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 136
   # push arguments:
   t0 = t0 + 2
   goto parse_n_bltypes
  :return_id_136:
 
 H[t252+50](NBltypesL_data) = t1
 #                     2676:   if NBltypesL_data == NONE:
 t1 = H[t252+50](NBltypesL_data) == 4294967295
 ifN t1 goto else_1495
 #                     2677:     error()
 error
 goto endif_1496
:else_1495:
:endif_1496:
 #                     2678:   return NBltypesL
    t1 = H[t252+49](NBltypesL)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_n_bltypes_l_end~:
 #                     2680: def parse_n_bltypes_i():
 goto parse_n_bltypes_i_end~
:parse_n_bltypes_i:
 MarkTempVarStart
 #                     2681:   global NBltypesI_data
 # Global NBltypesI_data via H[t252+58]
 #                     2682:   NBltypesI_data = parse_n_bltypes()
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 137
   # push arguments:
   t0 = t0 + 2
   goto parse_n_bltypes
  :return_id_137:
 
 H[t252+58](NBltypesI_data) = t1
 #                     2683:   if NBltypesI_data == NONE:
 t1 = H[t252+58](NBltypesI_data) == 4294967295
 ifN t1 goto else_1498
 #                     2684:     error()
 error
 goto endif_1499
:else_1498:
:endif_1499:
 #                     2685:   return NBltypesI
    t1 = H[t252+57](NBltypesI)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_n_bltypes_i_end~:
 #                     2687: def parse_n_bltypes_d():
 goto parse_n_bltypes_d_end~
:parse_n_bltypes_d:
 MarkTempVarStart
 #                     2688:   global NBltypesD_data
 # Global NBltypesD_data via H[t252+66]
 #                     2689:   NBltypesD_data = parse_n_bltypes()
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 138
   # push arguments:
   t0 = t0 + 2
   goto parse_n_bltypes
  :return_id_138:
 
 H[t252+66](NBltypesD_data) = t1
 #                     2690:   if NBltypesD_data == NONE:
 t1 = H[t252+66](NBltypesD_data) == 4294967295
 ifN t1 goto else_1501
 #                     2691:     error()
 error
 goto endif_1502
:else_1501:
:endif_1502:
 #                     2692:   return NBltypesD
    t1 = H[t252+65](NBltypesD)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_n_bltypes_d_end~:
 #                     2694: def parse_n_postfix():
 goto parse_n_postfix_end~
:parse_n_postfix:
 MarkTempVarStart
 #                     2695:   global NPostfix_data
 # Global NPostfix_data via H[t252+74]
 #                     2696:   if read_u32_from_n_bits(2):
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 139
   # push arguments:
   H[t0+3]() = 2
   t0 = t0 + 2
   goto read_u32_from_n_bits
  :return_id_139:
 
 ifN t1 goto else_1503
 #                     2697:     error()
 error
 goto endif_1504
:else_1503:
:endif_1504:
 #                     2698:   NPostfix_data = read_u32_from_n_bits_result
 H[t252+74](NPostfix_data) = H[t252+7](read_u32_from_n_bits_result)
 #                     2699:   return NPostfix
    t1 = H[t252+73](NPostfix)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_n_postfix_end~:
 #                     2701: def parse_n_direct():
 goto parse_n_direct_end~
:parse_n_direct:
 MarkTempVarStart
 #                     2702:   global NDirect_data
 # Global NDirect_data via H[t252+76]
 #                     2703:   if read_u32_from_n_bits(4):
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 140
   # push arguments:
   H[t0+3]() = 4
   t0 = t0 + 2
   goto read_u32_from_n_bits
  :return_id_140:
 
 ifN t1 goto else_1505
 #                     2704:     error()
 error
 goto endif_1506
:else_1505:
:endif_1506:
 #                     2705:   NDirect_data = read_u32_from_n_bits_result << meta_block_header_n_postfix
 t1 = H[t252+7](read_u32_from_n_bits_result) << H[t252+134](meta_block_header_n_postfix)
 H[t252+76](NDirect_data) = t1
 #                     2706:   return NDirect
    t1 = H[t252+75](NDirect)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_n_direct_end~:
 #                     2708: def parse_context_modes_literals():
 goto parse_context_modes_literals_end~
:parse_context_modes_literals:
 MarkTempVarStart
 #                     2709:   global ContextModesLiterals_data
 # Global ContextModesLiterals_data via H[t252+78]
 #                     2710:   ContextModesLiterals_data = alloc_pM(meta_block_header_n_bltypes_l)
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 141
   # push arguments:
   H[t0+3]() = H[t252+131](meta_block_header_n_bltypes_l)
   t0 = t0 + 2
   goto addr_alloc_pM
  :return_id_141:
 
 t1 = t1 | 2147483648
 H[t252+78](ContextModesLiterals_data) = t1
 #                     2711:   i = 0
 H[t0+1](i) = 0
 #                     2712:   while i < meta_block_header_n_bltypes_l:
:while_1507:
 t1 = H[t0+1](i) < H[t252+131](meta_block_header_n_bltypes_l)
 ifN t1 goto whileend_1509
 #                     2713:     if read_u32_from_n_bits(2):
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 142
   # push arguments:
   H[t0+4]() = 2
   t0 = t0 + 3
   goto read_u32_from_n_bits
  :return_id_142:
 
 ifN t1 goto else_1511
 #                     2714:       error()
 error
 goto endif_1512
:else_1511:
:endif_1512:
 #                     2715:     ContextModesLiterals_data[i] = read_u32_from_n_bits_result
 t1 = H[t252+78](ContextModesLiterals_data) & 2147483647
 t1 = t1 + H[t0+1](i)
 M[t1] = H[t252+7](read_u32_from_n_bits_result)
 #                     2716:     i += 1
 H[t0+1](i) = H[t0+1](i) + 1
 goto while_1507
:whileend_1509:
 #                     2717:   return ContextModesLiterals
    t1 = H[t252+77](ContextModesLiterals)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_context_modes_literals_end~:
 #                     2719: def parse_n_trees_l():
 goto parse_n_trees_l_end~
:parse_n_trees_l:
 MarkTempVarStart
 #                     2720:   global NTreesL_data
 # Global NTreesL_data via H[t252+80]
 #                     2721:   NTreesL_data = parse_n_bltypes()
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 143
   # push arguments:
   t0 = t0 + 2
   goto parse_n_bltypes
  :return_id_143:
 
 H[t252+80](NTreesL_data) = t1
 #                     2722:   if NTreesL_data == NONE:
 t1 = H[t252+80](NTreesL_data) == 4294967295
 ifN t1 goto else_1514
 #                     2723:     error()
 error
 goto endif_1515
:else_1514:
:endif_1515:
 #                     2724:   return NTreesL
    t1 = H[t252+79](NTreesL)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_n_trees_l_end~:
 #                     2726: def parse_n_trees_d():
 goto parse_n_trees_d_end~
:parse_n_trees_d:
 MarkTempVarStart
 #                     2727:   global NTreesD_data
 # Global NTreesD_data via H[t252+82]
 #                     2728:   NTreesD_data = parse_n_bltypes()
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 144
   # push arguments:
   t0 = t0 + 2
   goto parse_n_bltypes
  :return_id_144:
 
 H[t252+82](NTreesD_data) = t1
 #                     2729:   if NTreesD_data == NONE:
 t1 = H[t252+82](NTreesD_data) == 4294967295
 ifN t1 goto else_1517
 #                     2730:     error()
 error
 goto endif_1518
:else_1517:
:endif_1518:
 #                     2731:   return NTreesD
    t1 = H[t252+81](NTreesD)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_n_trees_d_end~:
 #                     2733: def parse_prefix_code_kind():
 goto parse_prefix_code_kind_end~
:parse_prefix_code_kind:
 MarkTempVarStart
 #                     2734:   global PrefixCodeKind_Complex_data
 # Global PrefixCodeKind_Complex_data via H[t252+26]
 #                     2735:   if read_u32_from_n_bits(2):
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 145
   # push arguments:
   H[t0+3]() = 2
   t0 = t0 + 2
   goto read_u32_from_n_bits
  :return_id_145:
 
 ifN t1 goto else_1519
 #                     2736:     error()
 error
 goto endif_1520
:else_1519:
:endif_1520:
 #                     2737:   if read_u32_from_n_bits_result == 1:
 t1 = H[t252+7](read_u32_from_n_bits_result) == 1
 ifN t1 goto else_1522
 #                     2738:     return PrefixCodeKind_Simple
    t1 = H[t252+24](PrefixCodeKind_Simple)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_1523
:else_1522:
:endif_1523:
 #                     2739:   PrefixCodeKind_Complex_data = read_u32_from_n_bits_result
 H[t252+26](PrefixCodeKind_Complex_data) = H[t252+7](read_u32_from_n_bits_result)
 #                     2740:   return PrefixCodeKind_Complex
    t1 = H[t252+25](PrefixCodeKind_Complex)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_prefix_code_kind_end~:
 #                     2742: def parse_simple_prefix_code(alphabet_size):
 goto parse_simple_prefix_code_end~
:parse_simple_prefix_code:
 MarkTempVarStart
 # Arg alphabet_size at t0 + 1
 #                     2744:   bit_width = alphabet_size - 1
 t1 = H[t0+1](alphabet_size) - 1
 H[t0+2](bit_width) = t1
 #                     2745:   n = 0
 H[t0+3](n) = 0
 #                     2747:   if bit_width == 0:
 t1 = H[t0+2](bit_width) == 0
 ifN t1 goto else_1525
 #                     2748:     n = 16
 H[t0+3](n) = 16
 goto endif_1526
:else_1525:
 #                     2750:     while True:
:while_1527:
 ifN 1 goto whileend_1529
 #                     2751:         if bit_width >= 32768:  # 2**15
 t1 = H[t0+2](bit_width) >= 32768
 ifN t1 goto else_1531
 #                     2752:           break
 goto whileend_1529
 goto endif_1532
:else_1531:
:endif_1532:
 #                     2753:         n += 1
 H[t0+3](n) = H[t0+3](n) + 1
 #                     2754:         bit_width <<= 1
 H[t0+2](bit_width) = H[t0+2](bit_width) << 1
 goto while_1527
:whileend_1529:
:endif_1526:
 #                     2755:   bit_width = 16 - n
 t1 = 16 - H[t0+3](n)
 H[t0+2](bit_width) = t1
 #                     2756:   if read_u32_from_n_bits(2):
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 146
   # push arguments:
   H[t0+6]() = 2
   t0 = t0 + 5
   goto read_u32_from_n_bits
  :return_id_146:
 
 ifN t1 goto else_1533
 #                     2757:     error()
 error
 goto endif_1534
:else_1533:
:endif_1534:
 #                     2758:   n_sym = read_u32_from_n_bits_result + 1
 t1 = H[t252+7](read_u32_from_n_bits_result) + 1
 H[t0+4](n_sym) = t1
 #                     2759:   symbols = alloc_pH(n_sym)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 147
   # push arguments:
   H[t0+7]() = H[t0+4](n_sym)
   t0 = t0 + 6
   goto addr_alloc_pH
  :return_id_147:
 
 H[t0+5](symbols) = t1
 #                     2760:   i = 0
 H[t0+6](i) = 0
 #                     2761:   while i < n_sym:
:while_1535:
 t1 = H[t0+6](i) < H[t0+4](n_sym)
 ifN t1 goto whileend_1537
 #                     2762:     if read_u32_from_n_bits(bit_width):
 
    H[t0+7]() = t0
   # saved bsp, return id:
   H[t0+8]() = 148
   # push arguments:
   H[t0+9]() = H[t0+2](bit_width)
   t0 = t0 + 8
   goto read_u32_from_n_bits
  :return_id_148:
 
 ifN t1 goto else_1539
 #                     2763:       error()
 error
 goto endif_1540
:else_1539:
:endif_1540:
 #                     2764:     if read_u32_from_n_bits_result < alphabet_size:
 t1 = H[t252+7](read_u32_from_n_bits_result) < H[t0+1](alphabet_size)
 ifN t1 goto else_1542
 #                     2765:       symbols[i] = read_u32_from_n_bits_result
 t1 = H[t0+5](symbols) + H[t0+6](i)
 H[t1]() = H[t252+7](read_u32_from_n_bits_result)
 goto endif_1543
:else_1542:
 #                     2767:       error()  # InvalidSymbol
 error
:endif_1543:
 #                     2768:     i += 1
 H[t0+6](i) = H[t0+6](i) + 1
 goto while_1535
:whileend_1537:
 #                     2769:   i = 0
 H[t0+6](i) = 0
 #                     2770:   while i < n_sym - 1:
:while_1544:
 t2 = H[t0+4](n_sym) - 1
 t1 = H[t0+6](i) < t2
 ifN t1 goto whileend_1546
 #                     2771:     j = i+1
 t1 = H[t0+6](i) + 1
 H[t0+7](j) = t1
 #                     2772:     while j < n_sym:
:while_1548:
 t1 = H[t0+7](j) < H[t0+4](n_sym)
 ifN t1 goto whileend_1550
 #                     2773:       if symbols[i] == symbols[j]:
 t2 = H[t0+5](symbols) + H[t0+6](i)
 t2 = H[t2]()
 t3 = H[t0+5](symbols) + H[t0+7](j)
 t3 = H[t3]()
 t1 = t2 == t3
 ifN t1 goto else_1553
 #                     2774:         error() # InvalidSymbol
 error
 goto endif_1554
:else_1553:
:endif_1554:
 #                     2775:       j += 1
 H[t0+7](j) = H[t0+7](j) + 1
 goto while_1548
:whileend_1550:
 #                     2776:     i += 1
 H[t0+6](i) = H[t0+6](i) + 1
 goto while_1544
:whileend_1546:
 #                     2777:   if n_sym == 4:
 t1 = H[t0+4](n_sym) == 4
 ifN t1 goto else_1556
 #                     2778:     if read_bit():
 
    H[t0+8]() = t0
   # saved bsp, return id:
   H[t0+9]() = 149
   # push arguments:
   t0 = t0 + 9
   goto read_bit
  :return_id_149:
 
 ifN t1 goto else_1558
 #                     2779:       error() # eof
 error
 goto endif_1559
:else_1558:
:endif_1559:
 #                     2780:     tree_select = read_bit_result
 H[t0+8](tree_select) = H[t252+6](read_bit_result)
 goto endif_1557
:else_1556:
 #                     2782:     tree_select = NONE
 H[t0+8](tree_select) = 4294967295
:endif_1557:
 #                     2783:   if n_sym == 1 and tree_select == NONE:
 t2 = H[t0+4](n_sym) == 1
 t3 = H[t0+8](tree_select) == 4294967295
 t1 = t2 and t3
 ifN t1 goto else_1562
 #                     2784:     code_lengths = alloc_pM(1)
 
    H[t0+9]() = t0
   # saved bsp, return id:
   H[t0+10]() = 150
   # push arguments:
   H[t0+11]() = 1
   t0 = t0 + 10
   goto addr_alloc_pM
  :return_id_150:
 
 t1 = t1 | 2147483648
 H[t0+9](code_lengths) = t1
 #                     2785:     code_lengths[0] = 0
 t1 = H[t0+9](code_lengths) & 2147483647
 t1 = t1 + 0
 M[t1] = 0
 goto endif_1563
:else_1562:
 #                     2786:   elif n_sym == 2 and tree_select == NONE:
 t2 = H[t0+4](n_sym) == 2
 t3 = H[t0+8](tree_select) == 4294967295
 t1 = t2 and t3
 ifN t1 goto else_1566
 #                     2787:     tmp_ = symbols[0]
 t1 = H[t0+5](symbols) + 0
 t1 = H[t1]()
 H[t0+10](tmp_) = t1
 #                     2788:     if tmp_ > symbols[1]:
 t2 = H[t0+5](symbols) + 1
 t2 = H[t2]()
 t1 = H[t0+10](tmp_) > t2
 ifN t1 goto else_1569
 #                     2789:       symbols[0] = symbols[1]
 t1 = H[t0+5](symbols) + 1
 t1 = H[t1]()
 t2 = H[t0+5](symbols) + 0
 H[t2]() = t1
 #                     2790:       symbols[1] = tmp_
 t1 = H[t0+5](symbols) + 1
 H[t1]() = H[t0+10](tmp_)
 goto endif_1570
:else_1569:
:endif_1570:
 #                     2791:     code_lengths = alloc_pM(2)
 
    H[t0+11]() = t0
   # saved bsp, return id:
   H[t0+12]() = 151
   # push arguments:
   H[t0+13]() = 2
   t0 = t0 + 12
   goto addr_alloc_pM
  :return_id_151:
 
 t1 = t1 | 2147483648
 H[t0+9](code_lengths) = t1
 #                     2792:     code_lengths[0] = 1
 t1 = H[t0+9](code_lengths) & 2147483647
 t1 = t1 + 0
 M[t1] = 1
 #                     2793:     code_lengths[1] = 1
 t1 = t1 + 1
 M[t1] = 1
 goto endif_1567
:else_1566:
 #                     2794:   elif n_sym == 3 and tree_select == NONE:
 t2 = H[t0+4](n_sym) == 3
 t3 = H[t0+8](tree_select) == 4294967295
 t1 = t2 and t3
 ifN t1 goto else_1573
 #                     2796:     tmp_ = symbols[1]
 t1 = H[t0+5](symbols) + 1
 t1 = H[t1]()
 H[t0+10](tmp_) = t1
 #                     2797:     if tmp_ > symbols[2]:
 t2 = H[t0+5](symbols) + 2
 t2 = H[t2]()
 t1 = H[t0+10](tmp_) > t2
 ifN t1 goto else_1576
 #                     2798:       symbols[1] = symbols[2]
 t1 = H[t0+5](symbols) + 2
 t1 = H[t1]()
 t2 = H[t0+5](symbols) + 1
 H[t2]() = t1
 #                     2799:       symbols[2] = tmp_
 t1 = H[t0+5](symbols) + 2
 H[t1]() = H[t0+10](tmp_)
 goto endif_1577
:else_1576:
:endif_1577:
 #                     2800:     code_lengths = alloc_pM(3)
 
    H[t0+11]() = t0
   # saved bsp, return id:
   H[t0+12]() = 152
   # push arguments:
   H[t0+13]() = 3
   t0 = t0 + 12
   goto addr_alloc_pM
  :return_id_152:
 
 t1 = t1 | 2147483648
 H[t0+9](code_lengths) = t1
 #                     2801:     code_lengths[0] = 1
 t1 = H[t0+9](code_lengths) & 2147483647
 t1 = t1 + 0
 M[t1] = 1
 #                     2802:     code_lengths[1] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2803:     code_lengths[2] = 2
 t1 = t1 + 1
 M[t1] = 2
 goto endif_1574
:else_1573:
 #                     2804:   elif n_sym == 4 and tree_select == 0:
 t2 = H[t0+4](n_sym) == 4
 t3 = H[t0+8](tree_select) == 0
 t1 = t2 and t3
 ifN t1 goto else_1580
 #                     2806:     i = 1
 H[t0+6](i) = 1
 #                     2807:     while i < n_sym:
:while_1582:
 t1 = H[t0+6](i) < H[t0+4](n_sym)
 ifN t1 goto whileend_1584
 #                     2808:       x = symbols[i]
 t1 = H[t0+5](symbols) + H[t0+6](i)
 t1 = H[t1]()
 H[t0+11](x) = t1
 #                     2809:       j = i - 1
 t1 = H[t0+6](i) - 1
 H[t0+7](j) = t1
 #                     2810:       while j >= 0 and symbols[j] > x:
:while_1586:
 t2 = H[t0+7](j) >= 0
 t4 = H[t0+5](symbols) + H[t0+7](j)
 t4 = H[t4]()
 t3 = t4 > H[t0+11](x)
 t1 = t2 and t3
 ifN t1 goto whileend_1588
 #                     2811:           symbols[j+1] = symbols[j]
 t1 = H[t0+5](symbols) + H[t0+7](j)
 t1 = H[t1]()
 t2 = H[t0+7](j) + 1
 t3 = H[t0+5](symbols) + t2
 H[t3]() = t1
 #                     2812:           j = j - 1
 t1 = H[t0+7](j) - 1
 H[t0+7](j) = t1
 goto while_1586
:whileend_1588:
 #                     2813:       symbols[j+1] = x
 t1 = H[t0+7](j) + 1
 t2 = H[t0+5](symbols) + t1
 H[t2]() = H[t0+11](x)
 #                     2814:       i += 1
 H[t0+6](i) = H[t0+6](i) + 1
 goto while_1582
:whileend_1584:
 #                     2815:     code_lengths = alloc_pM(4)
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 153
   # push arguments:
   H[t0+14]() = 4
   t0 = t0 + 13
   goto addr_alloc_pM
  :return_id_153:
 
 t1 = t1 | 2147483648
 H[t0+9](code_lengths) = t1
 #                     2816:     code_lengths[0] = 2
 t1 = H[t0+9](code_lengths) & 2147483647
 t1 = t1 + 0
 M[t1] = 2
 #                     2817:     code_lengths[1] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2818:     code_lengths[2] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2819:     code_lengths[3] = 2
 t1 = t1 + 1
 M[t1] = 2
 goto endif_1581
:else_1580:
 #                     2820:   elif n_sym == 4 and tree_select == 1:
 t2 = H[t0+4](n_sym) == 4
 t3 = H[t0+8](tree_select) == 1
 t1 = t2 and t3
 ifN t1 goto else_1593
 #                     2822:     tmp_ = symbols[2]
 t1 = H[t0+5](symbols) + 2
 t1 = H[t1]()
 H[t0+10](tmp_) = t1
 #                     2823:     if tmp_ > symbols[3]:
 t2 = H[t0+5](symbols) + 3
 t2 = H[t2]()
 t1 = H[t0+10](tmp_) > t2
 ifN t1 goto else_1596
 #                     2824:       symbols[2] = symbols[3]
 t1 = H[t0+5](symbols) + 3
 t1 = H[t1]()
 t2 = H[t0+5](symbols) + 2
 H[t2]() = t1
 #                     2825:       symbols[3] = tmp_
 t1 = H[t0+5](symbols) + 3
 H[t1]() = H[t0+10](tmp_)
 goto endif_1597
:else_1596:
:endif_1597:
 #                     2826:     code_lengths = alloc_pM(4)
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 154
   # push arguments:
   H[t0+14]() = 4
   t0 = t0 + 13
   goto addr_alloc_pM
  :return_id_154:
 
 t1 = t1 | 2147483648
 H[t0+9](code_lengths) = t1
 #                     2827:     code_lengths[0] = 1
 t1 = H[t0+9](code_lengths) & 2147483647
 t1 = t1 + 0
 M[t1] = 1
 #                     2828:     code_lengths[1] = 2
 t1 = t1 + 1
 M[t1] = 2
 #                     2829:     code_lengths[2] = 3
 t1 = t1 + 1
 M[t1] = 3
 #                     2830:     code_lengths[3] = 3
 t1 = t1 + 1
 M[t1] = 3
 goto endif_1594
:else_1593:
 #                     2832:     error()  # unreachable as len(symbols)<=4
 error
:endif_1594:
:endif_1581:
:endif_1574:
:endif_1567:
:endif_1563:
 #                     2833:   ret = codes_from_lengths_and_symbols(code_lengths, symbols)
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 155
   # push arguments:
   H[t0+14]() = H[t0+9](code_lengths)
   H[t0+15]() = H[t0+5](symbols)
   t0 = t0 + 13
   goto codes_from_lengths_and_symbols
  :return_id_155:
 
 H[t0+12](ret) = t1
 #                     2834:   free_pM(code_lengths)
 t1 = H[t0+9](code_lengths) & 2147483647
 
    H[t0+13]() = t0
   # saved bsp, return id:
   H[t0+14]() = 156
   # push arguments:
   H[t0+15]() = t1
   t0 = t0 + 14
   goto addr_free_pM
  :return_id_156:
 t2 = t1
 
 #                     2835:   free_pH(symbols)
 
    H[t0+13]() = t0
   # saved bsp, return id:
   H[t0+14]() = 157
   # push arguments:
   H[t0+15]() = H[t0+5](symbols)
   t0 = t0 + 14
   goto addr_free_pH
  :return_id_157:
 
 #                     2836:   return ret
    t1 = H[t0+12](ret)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_simple_prefix_code_end~:
 #                     2838: def parse_complex_prefix_code(h_skip, alphabet_size):
 goto parse_complex_prefix_code_end~
:parse_complex_prefix_code:
 MarkTempVarStart
 # Arg h_skip at t0 + 1
 # Arg alphabet_size at t0 + 2
 #                     2841:   bit_lengths_code = header_bit_lengths_code
 H[t0+3](bit_lengths_code) = H[t252+113](header_bit_lengths_code)
 #                     2842:   code_lengths = alloc_pM(18)
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 158
   # push arguments:
   H[t0+6]() = 18
   t0 = t0 + 5
   goto addr_alloc_pM
  :return_id_158:
 
 t1 = t1 | 2147483648
 H[t0+4](code_lengths) = t1
 #                     2843:   i = 0
 H[t0+5](i) = 0
 #                     2844:   while i < 18:
:while_1598:
 t1 = H[t0+5](i) < 18
 ifN t1 goto whileend_1600
 #                     2845:     code_lengths[i] = 0
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + H[t0+5](i)
 M[t1] = 0
 #                     2846:     i += 1
 H[t0+5](i) = H[t0+5](i) + 1
 goto while_1598
:whileend_1600:
 #                     2847:   sum_ = 0
 H[t0+6](sum_) = 0
 #                     2848:   len_non_zero_codelengths = 0
 H[t0+7](len_non_zero_codelengths) = 0
 #                     2849:   i = h_skip
 H[t0+5](i) = H[t0+1](h_skip)
 #                     2850:   while i < 18:
:while_1602:
 t1 = H[t0+5](i) < 18
 ifN t1 goto whileend_1604
 #                     2851:     code_length = lookup_symbol(bit_lengths_code)
 
    H[t0+8]() = t0
   # saved bsp, return id:
   H[t0+9]() = 159
   # push arguments:
   H[t0+10]() = H[t0+3](bit_lengths_code)
   t0 = t0 + 9
   goto lookup_symbol
  :return_id_159:
 
 H[t0+8](code_length) = t1
 #                     2852:     if code_length == NONE:
 t1 = H[t0+8](code_length) == 4294967295
 ifN t1 goto else_1607
 #                     2853:       error()
 error
 goto endif_1608
:else_1607:
:endif_1608:
 #                     2854:     code_lengths[i] = code_length
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + H[t0+5](i)
 M[t1] = H[t0+8](code_length)
 #                     2855:     if code_length > 0:
 t1 = H[t0+8](code_length) > 0
 ifN t1 goto else_1610
 #                     2856:         sum_ = sum_ + (32 >> code_length)
 t2 = 32 >> H[t0+8](code_length)
 t1 = H[t0+6](sum_) + t2
 H[t0+6](sum_) = t1
 #                     2857:         len_non_zero_codelengths += 1
 H[t0+7](len_non_zero_codelengths) = H[t0+7](len_non_zero_codelengths) + 1
 #                     2863:         if sum_ == 32:
 t1 = H[t0+6](sum_) == 32
 ifN t1 goto else_1613
 #                     2864:           break
 goto whileend_1604
 goto endif_1614
:else_1613:
:endif_1614:
 #                     2865:         if sum_ > 32:
 t1 = H[t0+6](sum_) > 32
 ifN t1 goto else_1616
 #                     2866:           error() # CodeLengthsChecksum
 error
 goto endif_1617
:else_1616:
:endif_1617:
 goto endif_1611
:else_1610:
:endif_1611:
 #                     2867:     i += 1
 H[t0+5](i) = H[t0+5](i) + 1
 goto while_1602
:whileend_1604:
 #                     2868:   if len_non_zero_codelengths == 0:
 t1 = H[t0+7](len_non_zero_codelengths) == 0
 ifN t1 goto else_1619
 #                     2869:     error()  # NoCodeLength
 error
 goto endif_1620
:else_1619:
:endif_1620:
 #                     2870:   if len_non_zero_codelengths >= 2 and sum_ < 32:
 t2 = H[t0+7](len_non_zero_codelengths) >= 2
 t3 = H[t0+6](sum_) < 32
 t1 = t2 and t3
 ifN t1 goto else_1623
 #                     2871:     error()  # CodeLengthsChecksum
 error
 goto endif_1624
:else_1623:
:endif_1624:
 #                     2872:   new_code_lengths = alloc_pM(18)
 
    H[t0+9]() = t0
   # saved bsp, return id:
   H[t0+10]() = 160
   # push arguments:
   H[t0+11]() = 18
   t0 = t0 + 10
   goto addr_alloc_pM
  :return_id_160:
 
 t1 = t1 | 2147483648
 H[t0+9](new_code_lengths) = t1
 #                     2873:   new_code_lengths[0] = code_lengths[4]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 4
 t1 = M[t1]
 t2 = H[t0+9](new_code_lengths) & 2147483647
 t2 = t2 + 0
 M[t2] = t1
 #                     2874:   new_code_lengths[1] = code_lengths[0]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2875:   new_code_lengths[2] = code_lengths[1]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 1
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2876:   new_code_lengths[3] = code_lengths[2]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 2
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2877:   new_code_lengths[4] = code_lengths[3]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 3
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2878:   new_code_lengths[5] = code_lengths[5]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 5
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2879:   new_code_lengths[6] = code_lengths[7]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 7
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2880:   new_code_lengths[7] = code_lengths[9]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 9
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2881:   new_code_lengths[8] = code_lengths[10]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 10
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2882:   new_code_lengths[9] = code_lengths[11]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 11
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2883:   new_code_lengths[10] = code_lengths[12]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 12
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2884:   new_code_lengths[11] = code_lengths[13]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 13
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2885:   new_code_lengths[12] = code_lengths[14]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 14
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2886:   new_code_lengths[13] = code_lengths[15]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 15
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2887:   new_code_lengths[14] = code_lengths[16]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 16
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2888:   new_code_lengths[15] = code_lengths[17]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 17
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2889:   new_code_lengths[16] = code_lengths[8]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 8
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2890:   new_code_lengths[17] = code_lengths[6]
 t1 = H[t0+4](code_lengths) & 2147483647
 t1 = t1 + 6
 t1 = M[t1]
 t2 = t2 + 1
 M[t2] = t1
 #                     2891:   free_pM(code_lengths)
 t1 = H[t0+4](code_lengths) & 2147483647
 
    H[t0+10]() = t0
   # saved bsp, return id:
   H[t0+11]() = 161
   # push arguments:
   H[t0+12]() = t1
   t0 = t0 + 11
   goto addr_free_pM
  :return_id_161:
 t2 = t1
 
 #                     2892:   code_lengths = new_code_lengths
 H[t0+4](code_lengths) = H[t0+9](new_code_lengths)
 #                     2893:   symbols = alloc_pH(18)
 
    H[t0+10]() = t0
   # saved bsp, return id:
   H[t0+11]() = 162
   # push arguments:
   H[t0+12]() = 18
   t0 = t0 + 11
   goto addr_alloc_pH
  :return_id_162:
 
 H[t0+10](symbols) = t1
 #                     2894:   i = 0
 H[t0+5](i) = 0
 #                     2895:   while i < 18:
:while_1625:
 t1 = H[t0+5](i) < 18
 ifN t1 goto whileend_1627
 #                     2896:     symbols[i] = i
 t1 = H[t0+10](symbols) + H[t0+5](i)
 H[t1]() = H[t0+5](i)
 #                     2897:     i += 1
 H[t0+5](i) = H[t0+5](i) + 1
 goto while_1625
:whileend_1627:
 #                     2898:   prefix_code_code_lengths = codes_from_lengths_and_symbols(code_lengths, symbols)
 
    H[t0+11]() = t0
   # saved bsp, return id:
   H[t0+12]() = 163
   # push arguments:
   H[t0+13]() = H[t0+4](code_lengths)
   H[t0+14]() = H[t0+10](symbols)
   t0 = t0 + 12
   goto codes_from_lengths_and_symbols
  :return_id_163:
 
 H[t0+11](prefix_code_code_lengths) = t1
 #                     2899:   free_pM(code_lengths)
 t1 = H[t0+4](code_lengths) & 2147483647
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 164
   # push arguments:
   H[t0+14]() = t1
   t0 = t0 + 13
   goto addr_free_pM
  :return_id_164:
 t2 = t1
 
 #                     2900:   actual_code_lengths = alloc_pM(alphabet_size)
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 165
   # push arguments:
   H[t0+14]() = H[t0+2](alphabet_size)
   t0 = t0 + 13
   goto addr_alloc_pM
  :return_id_165:
 
 t1 = t1 | 2147483648
 H[t0+12](actual_code_lengths) = t1
 #                     2901:   i = 0
 H[t0+5](i) = 0
 #                     2902:   while i < alphabet_size:
:while_1629:
 t1 = H[t0+5](i) < H[t0+2](alphabet_size)
 ifN t1 goto whileend_1631
 #                     2903:     actual_code_lengths[i] = 0
 t1 = H[t0+12](actual_code_lengths) & 2147483647
 t1 = t1 + H[t0+5](i)
 M[t1] = 0
 #                     2904:     i += 1
 H[t0+5](i) = H[t0+5](i) + 1
 goto while_1629
:whileend_1631:
 #                     2905:   sum_ = 0
 H[t0+6](sum_) = 0
 #                     2906:   last_symbol = NONE
 H[t0+13](last_symbol) = 4294967295
 #                     2907:   last_repeat = NONE
 H[t0+14](last_repeat) = 4294967295
 #                     2908:   last_non_zero_codelength = 8
 H[t0+15](last_non_zero_codelength) = 8
 #                     2909:   i = 0
 H[t0+5](i) = 0
 #                     2910:   while i < alphabet_size:
:while_1633:
 t1 = H[t0+5](i) < H[t0+2](alphabet_size)
 ifN t1 goto whileend_1635
 #                     2911:     code_length_code = lookup_symbol(prefix_code_code_lengths)
 
    H[t0+16]() = t0
   # saved bsp, return id:
   H[t0+17]() = 166
   # push arguments:
   H[t0+18]() = H[t0+11](prefix_code_code_lengths)
   t0 = t0 + 17
   goto lookup_symbol
  :return_id_166:
 
 H[t0+16](code_length_code) = t1
 #                     2912:     if code_length_code == NONE:
 t1 = H[t0+16](code_length_code) == 4294967295
 ifN t1 goto else_1638
 #                     2913:       error()
 error
 goto endif_1639
:else_1638:
:endif_1639:
 #                     2914:     if code_length_code >= 0 and code_length_code <= 15:
 t2 = H[t0+16](code_length_code) >= 0
 t3 = H[t0+16](code_length_code) <= 15
 t1 = t2 and t3
 ifN t1 goto else_1642
 #                     2915:       actual_code_lengths[i] = code_length_code
 t1 = H[t0+12](actual_code_lengths) & 2147483647
 t1 = t1 + H[t0+5](i)
 M[t1] = H[t0+16](code_length_code)
 #                     2916:       i += 1
 H[t0+5](i) = H[t0+5](i) + 1
 #                     2917:       last_symbol = code_length_code
 H[t0+13](last_symbol) = H[t0+16](code_length_code)
 #                     2918:       last_repeat = NONE
 H[t0+14](last_repeat) = 4294967295
 #                     2919:       if code_length_code > 0:
 t1 = H[t0+16](code_length_code) > 0
 ifN t1 goto else_1645
 #                     2920:         last_non_zero_codelength = code_length_code
 H[t0+15](last_non_zero_codelength) = H[t0+16](code_length_code)
 #                     2921:         sum_ += 32768 >> code_length_code
 t1 = 32768 >> H[t0+16](code_length_code)
 H[t0+6](sum_) = H[t0+6](sum_) + t1
 #                     2922:         if sum_ == 32768:
 t1 = H[t0+6](sum_) == 32768
 ifN t1 goto else_1648
 #                     2923:           break
 goto whileend_1635
 goto endif_1649
:else_1648:
 #                     2924:         elif sum_ > 32768:
 t1 = H[t0+6](sum_) > 32768
 ifN t1 goto else_1651
 #                     2925:           error()  # CodeLengthsChecksum
 error
 goto endif_1652
:else_1651:
:endif_1652:
:endif_1649:
 goto endif_1646
:else_1645:
:endif_1646:
 goto endif_1643
:else_1642:
 #                     2926:     elif code_length_code == 16:
 t1 = H[t0+16](code_length_code) == 16
 ifN t1 goto else_1654
 #                     2927:       if read_u32_from_n_bits(2):
 
    H[t0+17]() = t0
   # saved bsp, return id:
   H[t0+18]() = 167
   # push arguments:
   H[t0+19]() = 2
   t0 = t0 + 18
   goto read_u32_from_n_bits
  :return_id_167:
 
 ifN t1 goto else_1656
 #                     2928:         error()  # UnexpectedEOF
 error
 goto endif_1657
:else_1656:
:endif_1657:
 #                     2929:       extra_bits = read_u32_from_n_bits_result
 H[t0+17](extra_bits) = H[t252+7](read_u32_from_n_bits_result)
 #                     2930:       if last_symbol == 16 and last_repeat != NONE:
 t2 = H[t0+13](last_symbol) == 16
 t3 = H[t0+14](last_repeat) != 4294967295
 t1 = t2 and t3
 ifN t1 goto else_1660
 #                     2931:         new_repeat = 4 * (last_repeat - 2) + extra_bits + 3
 t4 = H[t0+14](last_repeat) - 2
 t3 = 4 * t4
 t2 = t3 + H[t0+17](extra_bits)
 t1 = t2 + 3
 H[t0+18](new_repeat) = t1
 #                     2932:         if i + new_repeat - last_repeat > alphabet_size:
 t3 = H[t0+5](i) + H[t0+18](new_repeat)
 t2 = t3 - H[t0+14](last_repeat)
 t1 = t2 > H[t0+2](alphabet_size)
 ifN t1 goto else_1663
 #                     2933:           error()  # ParseErrorComplexPrefixCodeLengths
 error
 goto endif_1664
:else_1663:
:endif_1664:
 #                     2934:         j = 0
 H[t0+19](j) = 0
 #                     2935:         while j < new_repeat - last_repeat:
:while_1665:
 t2 = H[t0+18](new_repeat) - H[t0+14](last_repeat)
 t1 = H[t0+19](j) < t2
 ifN t1 goto whileend_1667
 #                     2936:           actual_code_lengths[i] = last_non_zero_codelength
 t1 = H[t0+12](actual_code_lengths) & 2147483647
 t1 = t1 + H[t0+5](i)
 M[t1] = H[t0+15](last_non_zero_codelength)
 #                     2937:           i += 1
 H[t0+5](i) = H[t0+5](i) + 1
 #                     2938:           sum_ += 32768 >> last_non_zero_codelength
 t1 = 32768 >> H[t0+15](last_non_zero_codelength)
 H[t0+6](sum_) = H[t0+6](sum_) + t1
 #                     2939:           j += 1
 H[t0+19](j) = H[t0+19](j) + 1
 goto while_1665
:whileend_1667:
 #                     2940:         if sum_ == 32768:
 t1 = H[t0+6](sum_) == 32768
 ifN t1 goto else_1670
 #                     2941:           break
 goto whileend_1635
 goto endif_1671
:else_1670:
 #                     2942:         elif sum_ > 32768:
 t1 = H[t0+6](sum_) > 32768
 ifN t1 goto else_1673
 #                     2943:           error()  # CodeLengthsChecksum
 error
 goto endif_1674
:else_1673:
:endif_1674:
:endif_1671:
 #                     2944:         last_repeat = new_repeat
 H[t0+14](last_repeat) = H[t0+18](new_repeat)
 goto endif_1661
:else_1660:
 #                     2946:         repeat = 3 + extra_bits
 t1 = 3 + H[t0+17](extra_bits)
 H[t0+20](repeat) = t1
 #                     2947:         if i + repeat > alphabet_size:
 t2 = H[t0+5](i) + H[t0+20](repeat)
 t1 = t2 > H[t0+2](alphabet_size)
 ifN t1 goto else_1676
 #                     2948:           error()  # ParseErrorComplexPrefixCodeLengths
 error
 goto endif_1677
:else_1676:
:endif_1677:
 #                     2949:         j = 0
 H[t0+19](j) = 0
 #                     2950:         while j < repeat:
:while_1678:
 t1 = H[t0+19](j) < H[t0+20](repeat)
 ifN t1 goto whileend_1680
 #                     2951:           actual_code_lengths[i] = last_non_zero_codelength
 t1 = H[t0+12](actual_code_lengths) & 2147483647
 t1 = t1 + H[t0+5](i)
 M[t1] = H[t0+15](last_non_zero_codelength)
 #                     2952:           i += 1
 H[t0+5](i) = H[t0+5](i) + 1
 #                     2953:           sum_ += 32768 >> last_non_zero_codelength
 t1 = 32768 >> H[t0+15](last_non_zero_codelength)
 H[t0+6](sum_) = H[t0+6](sum_) + t1
 #                     2954:           j += 1
 H[t0+19](j) = H[t0+19](j) + 1
 goto while_1678
:whileend_1680:
 #                     2955:         if sum_ == 32768:
 t1 = H[t0+6](sum_) == 32768
 ifN t1 goto else_1683
 #                     2956:           break
 goto whileend_1635
 goto endif_1684
:else_1683:
 #                     2957:         elif sum_ > 32768:
 t1 = H[t0+6](sum_) > 32768
 ifN t1 goto else_1686
 #                     2958:           error()  # CodeLengthsChecksum
 error
 goto endif_1687
:else_1686:
:endif_1687:
:endif_1684:
 #                     2959:         last_repeat = repeat
 H[t0+14](last_repeat) = H[t0+20](repeat)
:endif_1661:
 #                     2960:       last_symbol = 16
 H[t0+13](last_symbol) = 16
 goto endif_1655
:else_1654:
 #                     2961:     elif code_length_code == 17:
 t1 = H[t0+16](code_length_code) == 17
 ifN t1 goto else_1689
 #                     2962:       if read_u32_from_n_bits(3):
 
    H[t0+21]() = t0
   # saved bsp, return id:
   H[t0+22]() = 168
   # push arguments:
   H[t0+23]() = 3
   t0 = t0 + 22
   goto read_u32_from_n_bits
  :return_id_168:
 
 ifN t1 goto else_1691
 #                     2963:         error()  # UnexpectedEOF
 error
 goto endif_1692
:else_1691:
:endif_1692:
 #                     2964:       extra_bits = read_u32_from_n_bits_result
 H[t0+17](extra_bits) = H[t252+7](read_u32_from_n_bits_result)
 #                     2965:       if last_symbol == 17 and last_repeat != NONE:
 t2 = H[t0+13](last_symbol) == 17
 t3 = H[t0+14](last_repeat) != 4294967295
 t1 = t2 and t3
 ifN t1 goto else_1695
 #                     2966:         new_repeat = (8 * (last_repeat - 2)) + extra_bits + 3
 t4 = H[t0+14](last_repeat) - 2
 t3 = 8 * t4
 t2 = t3 + H[t0+17](extra_bits)
 t1 = t2 + 3
 H[t0+18](new_repeat) = t1
 #                     2967:         i += new_repeat - last_repeat
 t1 = H[t0+18](new_repeat) - H[t0+14](last_repeat)
 H[t0+5](i) = H[t0+5](i) + t1
 #                     2968:         last_repeat = new_repeat
 H[t0+14](last_repeat) = H[t0+18](new_repeat)
 goto endif_1696
:else_1695:
 #                     2970:         repeat = 3 + extra_bits
 t1 = 3 + H[t0+17](extra_bits)
 H[t0+20](repeat) = t1
 #                     2971:         i += repeat
 H[t0+5](i) = H[t0+5](i) + H[t0+20](repeat)
 #                     2972:         last_repeat = repeat
 H[t0+14](last_repeat) = H[t0+20](repeat)
:endif_1696:
 #                     2973:       if i > alphabet_size:
 t1 = H[t0+5](i) > H[t0+2](alphabet_size)
 ifN t1 goto else_1698
 #                     2974:         error()  # ParseErrorComplexPrefixCodeLengths
 error
 goto endif_1699
:else_1698:
:endif_1699:
 #                     2975:       last_symbol = 17
 H[t0+13](last_symbol) = 17
 goto endif_1690
:else_1689:
 #                     2977:       error()   # unreachable OR ParseErrorComplexPrefixCodeLengths
 error
:endif_1690:
:endif_1655:
:endif_1643:
 goto while_1633
:whileend_1635:
 #                     2978:   tmp_ = 0
 H[t0+21](tmp_) = 0
 #                     2979:   i = 0
 H[t0+5](i) = 0
 #                     2980:   while i < alphabet_size:
:while_1700:
 t1 = H[t0+5](i) < H[t0+2](alphabet_size)
 ifN t1 goto whileend_1702
 #                     2981:     if actual_code_lengths[i] > 0:
 t2 = H[t0+12](actual_code_lengths) & 2147483647
 t2 = t2 + H[t0+5](i)
 t2 = M[t2]
 t1 = t2 > 0
 ifN t1 goto else_1705
 #                     2982:       tmp_ += 1
 H[t0+21](tmp_) = H[t0+21](tmp_) + 1
 goto endif_1706
:else_1705:
:endif_1706:
 #                     2983:     i += 1
 H[t0+5](i) = H[t0+5](i) + 1
 goto while_1700
:whileend_1702:
 #                     2984:   if tmp_ < 2:
 t1 = H[t0+21](tmp_) < 2
 ifN t1 goto else_1708
 #                     2985:     error()  # LessThanTwoNonZeroCodeLengths
 error
 goto endif_1709
:else_1708:
:endif_1709:
 #                     2986:   ret = codes_from_lengths(actual_code_lengths)
 
    H[t0+22]() = t0
   # saved bsp, return id:
   H[t0+23]() = 169
   # push arguments:
   H[t0+24]() = H[t0+12](actual_code_lengths)
   t0 = t0 + 23
   goto codes_from_lengths
  :return_id_169:
 
 H[t0+22](ret) = t1
 #                     2987:   free_pM(actual_code_lengths)
 t1 = H[t0+12](actual_code_lengths) & 2147483647
 
    H[t0+23]() = t0
   # saved bsp, return id:
   H[t0+24]() = 170
   # push arguments:
   H[t0+25]() = t1
   t0 = t0 + 24
   goto addr_free_pM
  :return_id_170:
 t2 = t1
 
 #                     2988:   free_pH(array_pH(prefix_code_code_lengths[0]))
 t1 = H[t0+11](prefix_code_code_lengths) >> 31
 if t1 goto isM_1710
 t1 = H[t0+11](prefix_code_code_lengths) + 0
 t1 = H[t1]()
 goto MorHdone_1711
:isM_1710:
 t1 = H[t0+11](prefix_code_code_lengths) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
:MorHdone_1711:
 
    H[t0+23]() = t0
   # saved bsp, return id:
   H[t0+24]() = 171
   # push arguments:
   H[t0+25]() = t1
   t0 = t0 + 24
   goto addr_free_pH
  :return_id_171:
 t2 = t1
 
 #                     2989:   free_pH(prefix_code_code_lengths)
 
    H[t0+23]() = t0
   # saved bsp, return id:
   H[t0+24]() = 172
   # push arguments:
   H[t0+25]() = H[t0+11](prefix_code_code_lengths)
   t0 = t0 + 24
   goto addr_free_pH
  :return_id_172:
 
 #                     2990:   return ret
    t1 = H[t0+22](ret)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_complex_prefix_code_end~:
 #                     2992: def parse_prefix_code(alphabet_size):
 goto parse_prefix_code_end~
:parse_prefix_code:
 MarkTempVarStart
 # Arg alphabet_size at t0 + 1
 #                     2993:   prefix_code_kind = parse_prefix_code_kind()
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 173
   # push arguments:
   t0 = t0 + 3
   goto parse_prefix_code_kind
  :return_id_173:
 
 H[t0+2](prefix_code_kind) = t1
 #                     2994:   if prefix_code_kind == NONE:
 t1 = H[t0+2](prefix_code_kind) == 4294967295
 ifN t1 goto else_1713
 #                     2995:     error()
 error
 goto endif_1714
:else_1713:
:endif_1714:
 #                     2996:   if prefix_code_kind == PrefixCodeKind_Complex:
 t1 = H[t0+2](prefix_code_kind) == H[t252+25](PrefixCodeKind_Complex)
 ifN t1 goto else_1716
 #                     2997:     return parse_complex_prefix_code(PrefixCodeKind_Complex_data, alphabet_size)
 
    H[t0+3]() = t0
   # saved bsp, return id:
   H[t0+4]() = 174
   # push arguments:
   H[t0+5]() = H[t252+26](PrefixCodeKind_Complex_data)
   H[t0+6]() = H[t0+1](alphabet_size)
   t0 = t0 + 4
   goto parse_complex_prefix_code
  :return_id_174:
 
    t1 = t1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_1717
:else_1716:
 #                     2998:   elif prefix_code_kind == PrefixCodeKind_Simple:
 t1 = H[t0+2](prefix_code_kind) == H[t252+24](PrefixCodeKind_Simple)
 ifN t1 goto else_1719
 #                     2999:     return parse_simple_prefix_code(alphabet_size)
 
    H[t0+3]() = t0
   # saved bsp, return id:
   H[t0+4]() = 175
   # push arguments:
   H[t0+5]() = H[t0+1](alphabet_size)
   t0 = t0 + 4
   goto parse_simple_prefix_code
  :return_id_175:
 
    t1 = t1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_1720
:else_1719:
 #                     3001:     return NONE # unreachable
    t1 = 4294967295
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_1720:
:endif_1717:
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_prefix_code_end~:
 #                     3003: def parse_prefix_code_block_types_literals():
 goto parse_prefix_code_block_types_literals_end~
:parse_prefix_code_block_types_literals:
 MarkTempVarStart
 #                     3004:   global PrefixCodeBlockTypesLiterals_data
 # Global PrefixCodeBlockTypesLiterals_data via H[t252+52]
 #                     3005:   alphabet_size = meta_block_header_n_bltypes_l + 2
 t1 = H[t252+131](meta_block_header_n_bltypes_l) + 2
 H[t0+1](alphabet_size) = t1
 #                     3006:   tmp_ = parse_prefix_code(alphabet_size)
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 176
   # push arguments:
   H[t0+4]() = H[t0+1](alphabet_size)
   t0 = t0 + 3
   goto parse_prefix_code
  :return_id_176:
 
 H[t0+2](tmp_) = t1
 #                     3007:   if tmp_ == NONE:
 t1 = H[t0+2](tmp_) == 4294967295
 ifN t1 goto else_1722
 #                     3008:     error()
 error
 goto endif_1723
:else_1722:
:endif_1723:
 #                     3009:   PrefixCodeBlockTypesLiterals_data = tmp_
 H[t252+52](PrefixCodeBlockTypesLiterals_data) = H[t0+2](tmp_)
 #                     3010:   return PrefixCodeBlockTypesLiterals
    t1 = H[t252+51](PrefixCodeBlockTypesLiterals)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_prefix_code_block_types_literals_end~:
 #                     3012: def parse_prefix_code_block_counts_literals():
 goto parse_prefix_code_block_counts_literals_end~
:parse_prefix_code_block_counts_literals:
 MarkTempVarStart
 #                     3013:   global PrefixCodeBlockCountsLiterals_data
 # Global PrefixCodeBlockCountsLiterals_data via H[t252+54]
 #                     3014:   tmp_ = parse_prefix_code(26)
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 177
   # push arguments:
   H[t0+3]() = 26
   t0 = t0 + 2
   goto parse_prefix_code
  :return_id_177:
 
 H[t0+1](tmp_) = t1
 #                     3015:   if tmp_ == NONE:
 t1 = H[t0+1](tmp_) == 4294967295
 ifN t1 goto else_1725
 #                     3016:     error()
 error
 goto endif_1726
:else_1725:
:endif_1726:
 #                     3017:   PrefixCodeBlockCountsLiterals_data = tmp_
 H[t252+54](PrefixCodeBlockCountsLiterals_data) = H[t0+1](tmp_)
 #                     3018:   return PrefixCodeBlockCountsLiterals
    t1 = H[t252+53](PrefixCodeBlockCountsLiterals)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_prefix_code_block_counts_literals_end~:
 #                     3020: def parse_prefix_code_block_types_insert_and_copy_lengths():
 goto parse_prefix_code_block_types_insert_and_copy_lengths_end~
:parse_prefix_code_block_types_insert_and_copy_lengths:
 MarkTempVarStart
 #                     3021:   global PrefixCodeBlockTypesInsertAndCopyLengths_data
 # Global PrefixCodeBlockTypesInsertAndCopyLengths_data via H[t252+60]
 #                     3022:   alphabet_size = meta_block_header_n_bltypes_i + 2
 t1 = H[t252+132](meta_block_header_n_bltypes_i) + 2
 H[t0+1](alphabet_size) = t1
 #                     3023:   tmp_ = parse_prefix_code(alphabet_size)
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 178
   # push arguments:
   H[t0+4]() = H[t0+1](alphabet_size)
   t0 = t0 + 3
   goto parse_prefix_code
  :return_id_178:
 
 H[t0+2](tmp_) = t1
 #                     3024:   if tmp_ == NONE:
 t1 = H[t0+2](tmp_) == 4294967295
 ifN t1 goto else_1728
 #                     3025:     error()
 error
 goto endif_1729
:else_1728:
:endif_1729:
 #                     3026:   PrefixCodeBlockTypesInsertAndCopyLengths_data = tmp_
 H[t252+60](PrefixCodeBlockTypesInsertAndCopyLengths_data) = H[t0+2](tmp_)
 #                     3027:   return PrefixCodeBlockTypesInsertAndCopyLengths
    t1 = H[t252+59](PrefixCodeBlockTypesInsertAndCopyLengths)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_prefix_code_block_types_insert_and_copy_lengths_end~:
 #                     3029: def parse_prefix_code_block_counts_insert_and_copy_lengths():
 goto parse_prefix_code_block_counts_insert_and_copy_lengths_end~
:parse_prefix_code_block_counts_insert_and_copy_lengths:
 MarkTempVarStart
 #                     3030:   global PrefixCodeBlockCountsInsertAndCopyLengths_data
 # Global PrefixCodeBlockCountsInsertAndCopyLengths_data via H[t252+62]
 #                     3031:   tmp_ = parse_prefix_code(26)
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 179
   # push arguments:
   H[t0+3]() = 26
   t0 = t0 + 2
   goto parse_prefix_code
  :return_id_179:
 
 H[t0+1](tmp_) = t1
 #                     3032:   if tmp_ == NONE:
 t1 = H[t0+1](tmp_) == 4294967295
 ifN t1 goto else_1731
 #                     3033:     error()
 error
 goto endif_1732
:else_1731:
:endif_1732:
 #                     3034:   PrefixCodeBlockCountsInsertAndCopyLengths_data = tmp_
 H[t252+62](PrefixCodeBlockCountsInsertAndCopyLengths_data) = H[t0+1](tmp_)
 #                     3035:   return PrefixCodeBlockCountsInsertAndCopyLengths
    t1 = H[t252+61](PrefixCodeBlockCountsInsertAndCopyLengths)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_prefix_code_block_counts_insert_and_copy_lengths_end~:
 #                     3037: def parse_prefix_code_block_types_distances():
 goto parse_prefix_code_block_types_distances_end~
:parse_prefix_code_block_types_distances:
 MarkTempVarStart
 #                     3038:   global PrefixCodeBlockTypesDistances_data
 # Global PrefixCodeBlockTypesDistances_data via H[t252+68]
 #                     3039:   alphabet_size = meta_block_header_n_bltypes_d + 2
 t1 = H[t252+133](meta_block_header_n_bltypes_d) + 2
 H[t0+1](alphabet_size) = t1
 #                     3040:   tmp_ = parse_prefix_code(alphabet_size)
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 180
   # push arguments:
   H[t0+4]() = H[t0+1](alphabet_size)
   t0 = t0 + 3
   goto parse_prefix_code
  :return_id_180:
 
 H[t0+2](tmp_) = t1
 #                     3041:   if tmp_ == NONE:
 t1 = H[t0+2](tmp_) == 4294967295
 ifN t1 goto else_1734
 #                     3042:     error()
 error
 goto endif_1735
:else_1734:
:endif_1735:
 #                     3043:   PrefixCodeBlockTypesDistances_data = tmp_
 H[t252+68](PrefixCodeBlockTypesDistances_data) = H[t0+2](tmp_)
 #                     3044:   return PrefixCodeBlockTypesDistances
    t1 = H[t252+67](PrefixCodeBlockTypesDistances)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_prefix_code_block_types_distances_end~:
 #                     3046: def parse_prefix_code_block_counts_distances():
 goto parse_prefix_code_block_counts_distances_end~
:parse_prefix_code_block_counts_distances:
 MarkTempVarStart
 #                     3047:   global PrefixCodeBlockCountsDistances_data
 # Global PrefixCodeBlockCountsDistances_data via H[t252+70]
 #                     3048:   tmp_ = parse_prefix_code(26)
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 181
   # push arguments:
   H[t0+3]() = 26
   t0 = t0 + 2
   goto parse_prefix_code
  :return_id_181:
 
 H[t0+1](tmp_) = t1
 #                     3049:   if tmp_ == NONE:
 t1 = H[t0+1](tmp_) == 4294967295
 ifN t1 goto else_1737
 #                     3050:     error()
 error
 goto endif_1738
:else_1737:
:endif_1738:
 #                     3051:   PrefixCodeBlockCountsDistances_data = tmp_
 H[t252+70](PrefixCodeBlockCountsDistances_data) = H[t0+1](tmp_)
 #                     3052:   return PrefixCodeBlockCountsDistances
    t1 = H[t252+69](PrefixCodeBlockCountsDistances)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_prefix_code_block_counts_distances_end~:
 #                     3054: def parse_block_count(prefix_code):  # HuffmanCodes
 goto parse_block_count_end~
:parse_block_count:
 MarkTempVarStart
 # Arg prefix_code at t0 + 1
 #                     3055:   symbol = lookup_symbol(prefix_code)
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 182
   # push arguments:
   H[t0+4]() = H[t0+1](prefix_code)
   t0 = t0 + 3
   goto lookup_symbol
  :return_id_182:
 
 H[t0+2](symbol) = t1
 #                     3056:   if symbol >= 0 and symbol <= 3:
 t2 = H[t0+2](symbol) >= 0
 t3 = H[t0+2](symbol) <= 3
 t1 = t2 and t3
 ifN t1 goto else_1741
 #                     3057:     base_length = 1 + (symbol << 2)
 t2 = H[t0+2](symbol) << 2
 t1 = 1 + t2
 H[t0+3](base_length) = t1
 #                     3058:     extra_bits = 2
 H[t0+4](extra_bits) = 2
 goto endif_1742
:else_1741:
 #                     3059:   elif symbol >= 4 and symbol <= 7:
 t2 = H[t0+2](symbol) >= 4
 t3 = H[t0+2](symbol) <= 7
 t1 = t2 and t3
 ifN t1 goto else_1745
 #                     3060:     base_length = 17 + ((symbol - 4) << 3)
 t3 = H[t0+2](symbol) - 4
 t2 = t3 << 3
 t1 = 17 + t2
 H[t0+3](base_length) = t1
 #                     3061:     extra_bits = 3
 H[t0+4](extra_bits) = 3
 goto endif_1746
:else_1745:
 #                     3062:   elif symbol >= 8 and symbol <= 11:
 t2 = H[t0+2](symbol) >= 8
 t3 = H[t0+2](symbol) <= 11
 t1 = t2 and t3
 ifN t1 goto else_1749
 #                     3063:     base_length = 49 + ((symbol - 8) << 4)
 t3 = H[t0+2](symbol) - 8
 t2 = t3 << 4
 t1 = 49 + t2
 H[t0+3](base_length) = t1
 #                     3064:     extra_bits = 4
 H[t0+4](extra_bits) = 4
 goto endif_1750
:else_1749:
 #                     3065:   elif symbol >= 12 and symbol <= 15:
 t2 = H[t0+2](symbol) >= 12
 t3 = H[t0+2](symbol) <= 15
 t1 = t2 and t3
 ifN t1 goto else_1753
 #                     3066:     base_length = 113 + ((symbol - 12) << 5)
 t3 = H[t0+2](symbol) - 12
 t2 = t3 << 5
 t1 = 113 + t2
 H[t0+3](base_length) = t1
 #                     3067:     extra_bits = 5
 H[t0+4](extra_bits) = 5
 goto endif_1754
:else_1753:
 #                     3068:   elif symbol >= 16 and symbol <= 17:
 t2 = H[t0+2](symbol) >= 16
 t3 = H[t0+2](symbol) <= 17
 t1 = t2 and t3
 ifN t1 goto else_1757
 #                     3069:     base_length = 241 + ((symbol - 16) << 6)
 t3 = H[t0+2](symbol) - 16
 t2 = t3 << 6
 t1 = 241 + t2
 H[t0+3](base_length) = t1
 #                     3070:     extra_bits = 6
 H[t0+4](extra_bits) = 6
 goto endif_1758
:else_1757:
 #                     3071:   elif symbol == 18:
 t1 = H[t0+2](symbol) == 18
 ifN t1 goto else_1760
 #                     3072:     base_length = 369
 H[t0+3](base_length) = 369
 #                     3073:     extra_bits = 7
 H[t0+4](extra_bits) = 7
 goto endif_1761
:else_1760:
 #                     3074:   elif symbol == 19:
 t1 = H[t0+2](symbol) == 19
 ifN t1 goto else_1763
 #                     3075:     base_length = 497
 H[t0+3](base_length) = 497
 #                     3076:     extra_bits = 8
 H[t0+4](extra_bits) = 8
 goto endif_1764
:else_1763:
 #                     3077:   elif symbol == 20:
 t1 = H[t0+2](symbol) == 20
 ifN t1 goto else_1766
 #                     3078:     base_length = 753
 H[t0+3](base_length) = 753
 #                     3079:     extra_bits = 9
 H[t0+4](extra_bits) = 9
 goto endif_1767
:else_1766:
 #                     3080:   elif symbol == 21:
 t1 = H[t0+2](symbol) == 21
 ifN t1 goto else_1769
 #                     3081:     base_length = 1265
 H[t0+3](base_length) = 1265
 #                     3082:     extra_bits = 10
 H[t0+4](extra_bits) = 10
 goto endif_1770
:else_1769:
 #                     3083:   elif symbol == 22:
 t1 = H[t0+2](symbol) == 22
 ifN t1 goto else_1772
 #                     3084:     base_length = 2289
 H[t0+3](base_length) = 2289
 #                     3085:     extra_bits = 11
 H[t0+4](extra_bits) = 11
 goto endif_1773
:else_1772:
 #                     3086:   elif symbol == 23:
 t1 = H[t0+2](symbol) == 23
 ifN t1 goto else_1775
 #                     3087:     base_length = 4337
 H[t0+3](base_length) = 4337
 #                     3088:     extra_bits = 12
 H[t0+4](extra_bits) = 12
 goto endif_1776
:else_1775:
 #                     3089:   elif symbol == 24:
 t1 = H[t0+2](symbol) == 24
 ifN t1 goto else_1778
 #                     3090:     base_length = 8433
 H[t0+3](base_length) = 8433
 #                     3091:     extra_bits = 13
 H[t0+4](extra_bits) = 13
 goto endif_1779
:else_1778:
 #                     3092:   elif symbol == 25:
 t1 = H[t0+2](symbol) == 25
 ifN t1 goto else_1781
 #                     3093:     base_length = 16625
 H[t0+3](base_length) = 16625
 #                     3094:     extra_bits = 24
 H[t0+4](extra_bits) = 24
 goto endif_1782
:else_1781:
 #                     3096:     error() # err EOF OR InvalidBlockCountCode
 error
:endif_1782:
:endif_1779:
:endif_1776:
:endif_1773:
:endif_1770:
:endif_1767:
:endif_1764:
:endif_1761:
:endif_1758:
:endif_1754:
:endif_1750:
:endif_1746:
:endif_1742:
 #                     3097:   if read_u32_from_n_bits(extra_bits):
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 183
   # push arguments:
   H[t0+7]() = H[t0+4](extra_bits)
   t0 = t0 + 6
   goto read_u32_from_n_bits
  :return_id_183:
 
 ifN t1 goto else_1783
 #                     3098:     error() # err EOF
 error
 goto endif_1784
:else_1783:
:endif_1784:
 #                     3099:   return base_length + read_u32_from_n_bits_result
 t1 = H[t0+3](base_length) + H[t252+7](read_u32_from_n_bits_result)
    t1 = t1
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_block_count_end~:
 #                     3101: def parse_first_block_count_literals():
 goto parse_first_block_count_literals_end~
:parse_first_block_count_literals:
 MarkTempVarStart
 #                     3102:   global FirstBlockCountLiterals_data
 # Global FirstBlockCountLiterals_data via H[t252+56]
 #                     3103:   prefix_code = meta_block_prefix_tree_block_counts_literals
 H[t0+1](prefix_code) = H[t252+141](meta_block_prefix_tree_block_counts_literals)
 #                     3104:   FirstBlockCountLiterals_data = parse_block_count(prefix_code)
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 184
   # push arguments:
   H[t0+4]() = H[t0+1](prefix_code)
   t0 = t0 + 3
   goto parse_block_count
  :return_id_184:
 
 H[t252+56](FirstBlockCountLiterals_data) = t1
 #                     3105:   if FirstBlockCountLiterals_data == NONE:
 t1 = H[t252+56](FirstBlockCountLiterals_data) == 4294967295
 ifN t1 goto else_1786
 #                     3106:     error()
 error
 goto endif_1787
:else_1786:
:endif_1787:
 #                     3107:   return FirstBlockCountLiterals
    t1 = H[t252+55](FirstBlockCountLiterals)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_first_block_count_literals_end~:
 #                     3109: def parse_first_block_count_insert_and_copy_lengths():
 goto parse_first_block_count_insert_and_copy_lengths_end~
:parse_first_block_count_insert_and_copy_lengths:
 MarkTempVarStart
 #                     3110:   global FirstBlockCountInsertAndCopyLengths_data
 # Global FirstBlockCountInsertAndCopyLengths_data via H[t252+64]
 #                     3111:   prefix_code = meta_block_prefix_tree_block_counts_insert_and_copy_lengths
 H[t0+1](prefix_code) = H[t252+154](meta_block_prefix_tree_block_counts_insert_and_copy_lengths)
 #                     3112:   FirstBlockCountInsertAndCopyLengths_data = parse_block_count(prefix_code)
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 185
   # push arguments:
   H[t0+4]() = H[t0+1](prefix_code)
   t0 = t0 + 3
   goto parse_block_count
  :return_id_185:
 
 H[t252+64](FirstBlockCountInsertAndCopyLengths_data) = t1
 #                     3113:   if FirstBlockCountInsertAndCopyLengths_data == NONE:
 t1 = H[t252+64](FirstBlockCountInsertAndCopyLengths_data) == 4294967295
 ifN t1 goto else_1789
 #                     3114:     error()
 error
 goto endif_1790
:else_1789:
:endif_1790:
 #                     3115:   return FirstBlockCountInsertAndCopyLengths
    t1 = H[t252+63](FirstBlockCountInsertAndCopyLengths)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_first_block_count_insert_and_copy_lengths_end~:
 #                     3117: def parse_first_block_count_distances():
 goto parse_first_block_count_distances_end~
:parse_first_block_count_distances:
 MarkTempVarStart
 #                     3118:   global FirstBlockCountDistances_data
 # Global FirstBlockCountDistances_data via H[t252+72]
 #                     3119:   prefix_code = meta_block_prefix_tree_block_counts_distances
 H[t0+1](prefix_code) = H[t252+156](meta_block_prefix_tree_block_counts_distances)
 #                     3120:   FirstBlockCountDistances_data = parse_block_count(prefix_code)
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 186
   # push arguments:
   H[t0+4]() = H[t0+1](prefix_code)
   t0 = t0 + 3
   goto parse_block_count
  :return_id_186:
 
 H[t252+72](FirstBlockCountDistances_data) = t1
 #                     3121:   if FirstBlockCountDistances_data == NONE:
 t1 = H[t252+72](FirstBlockCountDistances_data) == 4294967295
 ifN t1 goto else_1792
 #                     3122:     error()
 error
 goto endif_1793
:else_1792:
:endif_1793:
 #                     3123:   return FirstBlockCountDistances
    t1 = H[t252+71](FirstBlockCountDistances)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_first_block_count_distances_end~:
 #                     3125: def parse_prefix_codes_literals():
 goto parse_prefix_codes_literals_end~
:parse_prefix_codes_literals:
 MarkTempVarStart
 #                     3126:   global PrefixCodesLiterals_data
 # Global PrefixCodesLiterals_data via H[t252+88]
 #                     3127:   n_trees_l = meta_block_header_n_trees_l
 H[t0+1](n_trees_l) = H[t252+136](meta_block_header_n_trees_l)
 #                     3128:   prefix_codes = alloc_pH(n_trees_l)
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 187
   # push arguments:
   H[t0+4]() = H[t0+1](n_trees_l)
   t0 = t0 + 3
   goto addr_alloc_pH
  :return_id_187:
 
 H[t0+2](prefix_codes) = t1
 #                     3129:   alphabet_size = 256
 H[t0+3](alphabet_size) = 256
 #                     3130:   j = 0
 H[t0+4](j) = 0
 #                     3131:   while j < n_trees_l:
:while_1794:
 t1 = H[t0+4](j) < H[t0+1](n_trees_l)
 ifN t1 goto whileend_1796
 #                     3132:     prefix_codes[j] = parse_prefix_code(alphabet_size)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 188
   # push arguments:
   H[t0+7]() = H[t0+3](alphabet_size)
   t0 = t0 + 6
   goto parse_prefix_code
  :return_id_188:
 
 t2 = H[t0+2](prefix_codes) + H[t0+4](j)
 H[t2]() = t1
 #                     3133:     if prefix_codes[j] == NONE:
 t2 = H[t0+2](prefix_codes) + H[t0+4](j)
 t2 = H[t2]()
 t1 = t2 == 4294967295
 ifN t1 goto else_1799
 #                     3134:       error()
 error
 goto endif_1800
:else_1799:
:endif_1800:
 #                     3135:     j += 1
 H[t0+4](j) = H[t0+4](j) + 1
 goto while_1794
:whileend_1796:
 #                     3136:   PrefixCodesLiterals_data = prefix_codes
 H[t252+88](PrefixCodesLiterals_data) = H[t0+2](prefix_codes)
 #                     3137:   return PrefixCodesLiterals
    t1 = H[t252+87](PrefixCodesLiterals)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_prefix_codes_literals_end~:
 #                     3139: def parse_prefix_codes_insert_and_copy_lengths():
 goto parse_prefix_codes_insert_and_copy_lengths_end~
:parse_prefix_codes_insert_and_copy_lengths:
 MarkTempVarStart
 #                     3140:   global PrefixCodesInsertAndCopyLengths_data
 # Global PrefixCodesInsertAndCopyLengths_data via H[t252+90]
 #                     3141:   n_bltypes_i = meta_block_header_n_bltypes_i
 H[t0+1](n_bltypes_i) = H[t252+132](meta_block_header_n_bltypes_i)
 #                     3142:   prefix_codes = alloc_pH(n_bltypes_i)
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 189
   # push arguments:
   H[t0+4]() = H[t0+1](n_bltypes_i)
   t0 = t0 + 3
   goto addr_alloc_pH
  :return_id_189:
 
 H[t0+2](prefix_codes) = t1
 #                     3143:   alphabet_size = 704
 H[t0+3](alphabet_size) = 704
 #                     3144:   j = 0
 H[t0+4](j) = 0
 #                     3145:   while j < n_bltypes_i:
:while_1801:
 t1 = H[t0+4](j) < H[t0+1](n_bltypes_i)
 ifN t1 goto whileend_1803
 #                     3146:     prefix_codes[j] = parse_prefix_code(alphabet_size)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 190
   # push arguments:
   H[t0+7]() = H[t0+3](alphabet_size)
   t0 = t0 + 6
   goto parse_prefix_code
  :return_id_190:
 
 t2 = H[t0+2](prefix_codes) + H[t0+4](j)
 H[t2]() = t1
 #                     3147:     if prefix_codes[j] == NONE:
 t2 = H[t0+2](prefix_codes) + H[t0+4](j)
 t2 = H[t2]()
 t1 = t2 == 4294967295
 ifN t1 goto else_1806
 #                     3148:       error()
 error
 goto endif_1807
:else_1806:
:endif_1807:
 #                     3149:     j += 1
 H[t0+4](j) = H[t0+4](j) + 1
 goto while_1801
:whileend_1803:
 #                     3150:   PrefixCodesInsertAndCopyLengths_data = prefix_codes
 H[t252+90](PrefixCodesInsertAndCopyLengths_data) = H[t0+2](prefix_codes)
 #                     3151:   return PrefixCodesInsertAndCopyLengths
    t1 = H[t252+89](PrefixCodesInsertAndCopyLengths)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_prefix_codes_insert_and_copy_lengths_end~:
 #                     3153: def parse_prefix_codes_distances():
 goto parse_prefix_codes_distances_end~
:parse_prefix_codes_distances:
 MarkTempVarStart
 #                     3154:   global PrefixCodesDistances_data
 # Global PrefixCodesDistances_data via H[t252+92]
 #                     3155:   n_trees_d = meta_block_header_n_trees_d
 H[t0+1](n_trees_d) = H[t252+137](meta_block_header_n_trees_d)
 #                     3156:   prefix_codes = alloc_pH(n_trees_d)
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 191
   # push arguments:
   H[t0+4]() = H[t0+1](n_trees_d)
   t0 = t0 + 3
   goto addr_alloc_pH
  :return_id_191:
 
 H[t0+2](prefix_codes) = t1
 #                     3157:   alphabet_size = 16 + meta_block_header_n_direct + (48 << meta_block_header_n_postfix)
 t2 = 16 + H[t252+135](meta_block_header_n_direct)
 t3 = 48 << H[t252+134](meta_block_header_n_postfix)
 t1 = t2 + t3
 H[t0+3](alphabet_size) = t1
 #                     3158:   j = 0
 H[t0+4](j) = 0
 #                     3159:   while j < n_trees_d:
:while_1808:
 t1 = H[t0+4](j) < H[t0+1](n_trees_d)
 ifN t1 goto whileend_1810
 #                     3160:     prefix_codes[j] = parse_prefix_code(alphabet_size)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 192
   # push arguments:
   H[t0+7]() = H[t0+3](alphabet_size)
   t0 = t0 + 6
   goto parse_prefix_code
  :return_id_192:
 
 t2 = H[t0+2](prefix_codes) + H[t0+4](j)
 H[t2]() = t1
 #                     3161:     if prefix_codes[j] == NONE:
 t2 = H[t0+2](prefix_codes) + H[t0+4](j)
 t2 = H[t2]()
 t1 = t2 == 4294967295
 ifN t1 goto else_1813
 #                     3162:       error()
 error
 goto endif_1814
:else_1813:
:endif_1814:
 #                     3163:     j += 1
 H[t0+4](j) = H[t0+4](j) + 1
 goto while_1808
:whileend_1810:
 #                     3164:   PrefixCodesDistances_data = prefix_codes
 H[t252+92](PrefixCodesDistances_data) = H[t0+2](prefix_codes)
 #                     3165:   return PrefixCodesDistances
    t1 = H[t252+91](PrefixCodesDistances)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_prefix_codes_distances_end~:
 #                     3167: def parse_context_map(n_trees, len_):
 goto parse_context_map_end~
:parse_context_map:
 MarkTempVarStart
 # Arg n_trees at t0 + 1
 # Arg len_ at t0 + 2
 #                     3168:   if read_bit():
 
    H[t0+3]() = t0
   # saved bsp, return id:
   H[t0+4]() = 193
   # push arguments:
   t0 = t0 + 4
   goto read_bit
  :return_id_193:
 
 ifN t1 goto else_1815
 #                     3169:     error() # err eof
 error
 goto endif_1816
:else_1815:
:endif_1816:
 #                     3170:   rlemax = read_bit_result
 H[t0+3](rlemax) = H[t252+6](read_bit_result)
 #                     3171:   if rlemax:
 ifN H[t0+3](rlemax) goto else_1817
 #                     3172:     if read_u32_from_n_bits(4):
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 194
   # push arguments:
   H[t0+6]() = 4
   t0 = t0 + 5
   goto read_u32_from_n_bits
  :return_id_194:
 
 ifN t1 goto else_1819
 #                     3173:       error() # err eof
 error
 goto endif_1820
:else_1819:
:endif_1820:
 #                     3174:     rlemax = read_u32_from_n_bits_result + 1
 t1 = H[t252+7](read_u32_from_n_bits_result) + 1
 H[t0+3](rlemax) = t1
 goto endif_1818
:else_1817:
:endif_1818:
 #                     3175:   alphabet_size = rlemax + n_trees
 t1 = H[t0+3](rlemax) + H[t0+1](n_trees)
 H[t0+4](alphabet_size) = t1
 #                     3176:   prefix_tree = parse_prefix_code(alphabet_size)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 195
   # push arguments:
   H[t0+7]() = H[t0+4](alphabet_size)
   t0 = t0 + 6
   goto parse_prefix_code
  :return_id_195:
 
 H[t0+5](prefix_tree) = t1
 #                     3177:   if prefix_tree == NONE:
 t1 = H[t0+5](prefix_tree) == 4294967295
 ifN t1 goto else_1822
 #                     3178:     error()  # err
 error
 goto endif_1823
:else_1822:
:endif_1823:
 #                     3179:   c_map = alloc_pM(len_)
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 196
   # push arguments:
   H[t0+8]() = H[t0+2](len_)
   t0 = t0 + 7
   goto addr_alloc_pM
  :return_id_196:
 
 t1 = t1 | 2147483648
 H[t0+6](c_map) = t1
 #                     3180:   c_pushed = 0
 H[t0+7](c_pushed) = 0
 #                     3181:   while c_pushed < len_:
:while_1824:
 t1 = H[t0+7](c_pushed) < H[t0+2](len_)
 ifN t1 goto whileend_1826
 #                     3182:     run_length_code = lookup_symbol(prefix_tree)
 
    H[t0+8]() = t0
   # saved bsp, return id:
   H[t0+9]() = 197
   # push arguments:
   H[t0+10]() = H[t0+5](prefix_tree)
   t0 = t0 + 9
   goto lookup_symbol
  :return_id_197:
 
 H[t0+8](run_length_code) = t1
 #                     3183:     if run_length_code == NONE:
 t1 = H[t0+8](run_length_code) == 4294967295
 ifN t1 goto else_1829
 #                     3184:       error()  # err eof OR ParseErrorContextMap
 error
 goto endif_1830
:else_1829:
:endif_1830:
 #                     3185:     if run_length_code > 0 and run_length_code <= rlemax:
 t2 = H[t0+8](run_length_code) > 0
 t3 = H[t0+8](run_length_code) <= H[t0+3](rlemax)
 t1 = t2 and t3
 ifN t1 goto else_1833
 #                     3186:       if read_u32_from_n_bits(run_length_code):
 
    H[t0+9]() = t0
   # saved bsp, return id:
   H[t0+10]() = 198
   # push arguments:
   H[t0+11]() = H[t0+8](run_length_code)
   t0 = t0 + 10
   goto read_u32_from_n_bits
  :return_id_198:
 
 ifN t1 goto else_1835
 #                     3187:         error() # err eof
 error
 goto endif_1836
:else_1835:
:endif_1836:
 #                     3188:       repeat = (1 << run_length_code) + read_u32_from_n_bits_result
 t2 = 1 << H[t0+8](run_length_code)
 t1 = t2 + H[t252+7](read_u32_from_n_bits_result)
 H[t0+9](repeat) = t1
 #                     3189:       j = 0
 H[t0+10](j) = 0
 #                     3190:       while j < repeat:
:while_1837:
 t1 = H[t0+10](j) < H[t0+9](repeat)
 ifN t1 goto whileend_1839
 #                     3191:         c_map[c_pushed] = 0
 t1 = H[t0+6](c_map) & 2147483647
 t1 = t1 + H[t0+7](c_pushed)
 M[t1] = 0
 #                     3192:         c_pushed += 1
 H[t0+7](c_pushed) = H[t0+7](c_pushed) + 1
 #                     3193:         if c_pushed > len_:
 t1 = H[t0+7](c_pushed) > H[t0+2](len_)
 ifN t1 goto else_1842
 #                     3194:           error()  # RunLengthExceededSizeOfContextMap
 error
 goto endif_1843
:else_1842:
:endif_1843:
 #                     3195:         j += 1
 H[t0+10](j) = H[t0+10](j) + 1
 goto while_1837
:whileend_1839:
 goto endif_1834
:else_1833:
 #                     3197:       if run_length_code == 0:
 t1 = H[t0+8](run_length_code) == 0
 ifN t1 goto else_1845
 #                     3198:         c_map[c_pushed] = 0
 t1 = H[t0+6](c_map) & 2147483647
 t1 = t1 + H[t0+7](c_pushed)
 M[t1] = 0
 goto endif_1846
:else_1845:
 #                     3200:         c_map[c_pushed] = run_length_code - rlemax
 t1 = H[t0+8](run_length_code) - H[t0+3](rlemax)
 t2 = H[t0+6](c_map) & 2147483647
 t2 = t2 + H[t0+7](c_pushed)
 M[t2] = t1
:endif_1846:
 #                     3201:       c_pushed += 1
 H[t0+7](c_pushed) = H[t0+7](c_pushed) + 1
:endif_1834:
 goto while_1824
:whileend_1826:
 #                     3202:   if read_bit():
 
    H[t0+11]() = t0
   # saved bsp, return id:
   H[t0+12]() = 199
   # push arguments:
   t0 = t0 + 12
   goto read_bit
  :return_id_199:
 
 ifN t1 goto else_1847
 #                     3203:     error()  # err eof
 error
 goto endif_1848
:else_1847:
:endif_1848:
 #                     3204:   imtf_bit = read_bit_result
 H[t0+11](imtf_bit) = H[t252+6](read_bit_result)
 #                     3205:   if imtf_bit:
 ifN H[t0+11](imtf_bit) goto else_1849
 #                     3206:     inverse_move_to_front_transform(c_map) # mut c_map
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 200
   # push arguments:
   H[t0+14]() = H[t0+6](c_map)
   t0 = t0 + 13
   goto inverse_move_to_front_transform
  :return_id_200:
 
 goto endif_1850
:else_1849:
:endif_1850:
 #                     3207:   return c_map
    t1 = H[t0+6](c_map)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_context_map_end~:
 #                     3209: def parse_context_map_literals():
 goto parse_context_map_literals_end~
:parse_context_map_literals:
 MarkTempVarStart
 #                     3210:   global ContextMapLiterals_data
 # Global ContextMapLiterals_data via H[t252+86]
 #                     3211:   n_trees = meta_block_header_n_trees_l
 H[t0+1](n_trees) = H[t252+136](meta_block_header_n_trees_l)
 #                     3212:   len_ = meta_block_header_n_bltypes_l * 64
 t1 = H[t252+131](meta_block_header_n_bltypes_l) * 64
 H[t0+2](len_) = t1
 #                     3213:   ContextMapLiterals_data = parse_context_map(n_trees, len_)
 
    H[t0+3]() = t0
   # saved bsp, return id:
   H[t0+4]() = 201
   # push arguments:
   H[t0+5]() = H[t0+1](n_trees)
   H[t0+6]() = H[t0+2](len_)
   t0 = t0 + 4
   goto parse_context_map
  :return_id_201:
 
 H[t252+86](ContextMapLiterals_data) = t1
 #                     3214:   if ContextMapLiterals_data == NONE:
 t1 = H[t252+86](ContextMapLiterals_data) == 4294967295
 ifN t1 goto else_1852
 #                     3215:     error() # err
 error
 goto endif_1853
:else_1852:
:endif_1853:
 #                     3216:   return ContextMapLiterals
    t1 = H[t252+85](ContextMapLiterals)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_context_map_literals_end~:
 #                     3218: def parse_context_map_distances():
 goto parse_context_map_distances_end~
:parse_context_map_distances:
 MarkTempVarStart
 #                     3219:   global ContextMapDistances_data
 # Global ContextMapDistances_data via H[t252+84]
 #                     3220:   n_trees = meta_block_header_n_trees_d
 H[t0+1](n_trees) = H[t252+137](meta_block_header_n_trees_d)
 #                     3221:   len_ = meta_block_header_n_bltypes_d * 4
 t1 = H[t252+133](meta_block_header_n_bltypes_d) * 4
 H[t0+2](len_) = t1
 #                     3222:   ContextMapDistances_data = parse_context_map(n_trees, len_)
 
    H[t0+3]() = t0
   # saved bsp, return id:
   H[t0+4]() = 202
   # push arguments:
   H[t0+5]() = H[t0+1](n_trees)
   H[t0+6]() = H[t0+2](len_)
   t0 = t0 + 4
   goto parse_context_map
  :return_id_202:
 
 H[t252+84](ContextMapDistances_data) = t1
 #                     3223:   if ContextMapDistances_data == NONE:
 t1 = H[t252+84](ContextMapDistances_data) == 4294967295
 ifN t1 goto else_1855
 #                     3224:     error() # err
 error
 goto endif_1856
:else_1855:
:endif_1856:
 #                     3225:   return ContextMapDistances
    t1 = H[t252+83](ContextMapDistances)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_context_map_distances_end~:
 #                     3227: def inverse_move_to_front_transform(v): # modifies v
 goto inverse_move_to_front_transform_end~
:inverse_move_to_front_transform:
 MarkTempVarStart
 # Arg v at t0 + 1
 #                     3228:   v = array_pM(v)
 H[t0+1](v) = H[t0+1](v)
 #                     3229:   mtf = alloc_pM(256)
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 203
   # push arguments:
   H[t0+4]() = 256
   t0 = t0 + 3
   goto addr_alloc_pM
  :return_id_203:
 
 t1 = t1 | 2147483648
 H[t0+2](mtf) = t1
 #                     3230:   i = 0
 H[t0+3](i) = 0
 #                     3231:   while i < 256:
:while_1857:
 t1 = H[t0+3](i) < 256
 ifN t1 goto whileend_1859
 #                     3232:     mtf[i] = i
 t1 = H[t0+2](mtf) & 2147483647
 t1 = t1 + H[t0+3](i)
 M[t1] = H[t0+3](i)
 #                     3233:     i += 1
 H[t0+3](i) = H[t0+3](i) + 1
 goto while_1857
:whileend_1859:
 #                     3234:   i = 0
 H[t0+3](i) = 0
 #                     3235:   while i < len_pM(v):
:while_1861:
 t2 = H[t0+1](v)
 t2 = t2 & 2147483647
 t2 = t2 - 5
 t3 = M[t2] << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t3 = t3 << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t3 = t3 << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t1 = H[t0+3](i) < t3
 ifN t1 goto whileend_1863
 #                     3236:     index = v[i]
 t1 = H[t0+1](v) & 2147483647
 t1 = t1 + H[t0+3](i)
 t1 = M[t1]
 H[t0+4](index) = t1
 #                     3237:     value = mtf[index]
 t1 = H[t0+2](mtf) & 2147483647
 t1 = t1 + H[t0+4](index)
 t1 = M[t1]
 H[t0+5](value) = t1
 #                     3238:     v[i] = value
 t1 = H[t0+1](v) & 2147483647
 t1 = t1 + H[t0+3](i)
 M[t1] = H[t0+5](value)
 #                     3239:     j = index
 H[t0+6](j) = H[t0+4](index)
 #                     3240:     while j > 0:
:while_1865:
 t1 = H[t0+6](j) > 0
 ifN t1 goto whileend_1867
 #                     3241:       mtf[j] = mtf[j - 1]
 t1 = H[t0+6](j) - 1
 t2 = H[t0+2](mtf) & 2147483647
 t2 = t2 + t1
 t2 = M[t2]
 t3 = H[t0+2](mtf) & 2147483647
 t3 = t3 + H[t0+6](j)
 M[t3] = t2
 #                     3242:       j -= 1
 H[t0+6](j) = H[t0+6](j) - 1
 goto while_1865
:whileend_1867:
 #                     3243:     mtf[0] = value
 t2 = H[t0+2](mtf) & 2147483647
 t2 = t2 + 0
 M[t2] = H[t0+5](value)
 #                     3244:     i += 1
 H[t0+3](i) = H[t0+3](i) + 1
 goto while_1861
:whileend_1863:
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:inverse_move_to_front_transform_end~:
 #                     3246: def decode_insert_and_copy_length():
 goto decode_insert_and_copy_length_end~
:decode_insert_and_copy_length:
 MarkTempVarStart
 #                     3247:   global InsertLengthAndCopyLength_data_co_len, InsertLengthAndCopyLength_data_in_len
 # Global InsertLengthAndCopyLength_data_co_len via H[t252+97]
 # Global InsertLengthAndCopyLength_data_in_len via H[t252+98]
 #                     3248:   insert_length = INSERT_LENGTHS_AND_COPY_LENGTHS[0 + meta_block_insert_and_copy_length*4]
 t2 = H[t252+160](meta_block_insert_and_copy_length) * 4
 t1 = 0 + t2
 t2 = H[t252+23](INSERT_LENGTHS_AND_COPY_LENGTHS) + t1
 t2 = H[t2]()
 H[t0+1](insert_length) = t2
 #                     3249:   extra_bits_insert = INSERT_LENGTHS_AND_COPY_LENGTHS[1 + meta_block_insert_and_copy_length*4]
 t3 = H[t252+160](meta_block_insert_and_copy_length) * 4
 t2 = 1 + t3
 t3 = H[t252+23](INSERT_LENGTHS_AND_COPY_LENGTHS) + t2
 t3 = H[t3]()
 H[t0+2](extra_bits_insert) = t3
 #                     3250:   copy_length = INSERT_LENGTHS_AND_COPY_LENGTHS[2 + meta_block_insert_and_copy_length*4]
 t4 = H[t252+160](meta_block_insert_and_copy_length) * 4
 t3 = 2 + t4
 t4 = H[t252+23](INSERT_LENGTHS_AND_COPY_LENGTHS) + t3
 t4 = H[t4]()
 H[t0+3](copy_length) = t4
 #                     3251:   extra_bits_copy = INSERT_LENGTHS_AND_COPY_LENGTHS[3 + meta_block_insert_and_copy_length*4]
 t5 = H[t252+160](meta_block_insert_and_copy_length) * 4
 t4 = 3 + t5
 t5 = H[t252+23](INSERT_LENGTHS_AND_COPY_LENGTHS) + t4
 t5 = H[t5]()
 H[t0+4](extra_bits_copy) = t5
 #                     3252:   if read_u32_from_n_bits(extra_bits_insert):
 
    H[t0+9]() = t0
   # saved bsp, return id:
   H[t0+10]() = 204
   # push arguments:
   H[t0+11]() = H[t0+2](extra_bits_insert)
   t0 = t0 + 10
   goto read_u32_from_n_bits
  :return_id_204:
 t5 = t1
 
 ifN t5 goto else_1869
 #                     3253:     error() # err eof
 error
 goto endif_1870
:else_1869:
:endif_1870:
 #                     3254:   insert_length += read_u32_from_n_bits_result
 H[t0+1](insert_length) = H[t0+1](insert_length) + H[t252+7](read_u32_from_n_bits_result)
 #                     3255:   if read_u32_from_n_bits(extra_bits_copy):
 
    H[t0+9]() = t0
   # saved bsp, return id:
   H[t0+10]() = 205
   # push arguments:
   H[t0+11]() = H[t0+4](extra_bits_copy)
   t0 = t0 + 10
   goto read_u32_from_n_bits
  :return_id_205:
 t5 = t1
 
 ifN t5 goto else_1871
 #                     3256:     error() # err eof
 error
 goto endif_1872
:else_1871:
:endif_1872:
 #                     3257:   copy_length += read_u32_from_n_bits_result
 H[t0+3](copy_length) = H[t0+3](copy_length) + H[t252+7](read_u32_from_n_bits_result)
 #                     3258:   InsertLengthAndCopyLength_data_co_len = copy_length
 H[t252+97](InsertLengthAndCopyLength_data_co_len) = H[t0+3](copy_length)
 #                     3259:   InsertLengthAndCopyLength_data_in_len = insert_length
 H[t252+98](InsertLengthAndCopyLength_data_in_len) = H[t0+1](insert_length)
 #                     3260:   return InsertLengthAndCopyLength
    t1 = H[t252+96](InsertLengthAndCopyLength)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:decode_insert_and_copy_length_end~:
 #                     3263: parse_block_switch_command_block_type = NONE
 H[t0+166](parse_block_switch_command_block_type) = 4294967295
 #                     3264: parse_block_switch_command_block_count = NONE
 H[t0+167](parse_block_switch_command_block_count) = 4294967295
 #                     3265: def parse_block_switch_command(prefix_tree_types, btype, btype_prev, n_bltypes, prefix_tree_counts): # 1:HuffmanCodes,2-4:nr,5:HuffmanCodes
 goto parse_block_switch_command_end~
:parse_block_switch_command:
 MarkTempVarStart
 # Arg prefix_tree_types at t0 + 1
 # Arg btype at t0 + 2
 # Arg btype_prev at t0 + 3
 # Arg n_bltypes at t0 + 4
 # Arg prefix_tree_counts at t0 + 5
 #                     3266:   global parse_block_switch_command_block_type, parse_block_switch_command_block_count
 # Global parse_block_switch_command_block_type via H[t252+166]
 # Global parse_block_switch_command_block_count via H[t252+167]
 #                     3267:   block_type_code = lookup_symbol(prefix_tree_types)
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 206
   # push arguments:
   H[t0+8]() = H[t0+1](prefix_tree_types)
   t0 = t0 + 7
   goto lookup_symbol
  :return_id_206:
 
 H[t0+6](block_type_code) = t1
 #                     3268:   if block_type_code == NONE:
 t1 = H[t0+6](block_type_code) == 4294967295
 ifN t1 goto else_1874
 #                     3269:     error() # decompr err
 error
 goto endif_1875
:else_1874:
:endif_1875:
 #                     3270:   if block_type_code == 0:
 t1 = H[t0+6](block_type_code) == 0
 ifN t1 goto else_1877
 #                     3271:     block_type = btype_prev
 H[t0+7](block_type) = H[t0+3](btype_prev)
 goto endif_1878
:else_1877:
 #                     3272:   elif block_type_code == 1:
 t1 = H[t0+6](block_type_code) == 1
 ifN t1 goto else_1880
 #                     3273:     block_type = (btype + 1) % n_bltypes
 t2 = H[t0+2](btype) + 1
 t1 = t2 % H[t0+4](n_bltypes)
 H[t0+7](block_type) = t1
 goto endif_1881
:else_1880:
 #                     3274:   elif block_type_code >= 2 and block_type_code <= 258:
 t2 = H[t0+6](block_type_code) >= 2
 t3 = H[t0+6](block_type_code) <= 258
 t1 = t2 and t3
 ifN t1 goto else_1884
 #                     3275:     block_type = block_type_code - 2
 t1 = H[t0+6](block_type_code) - 2
 H[t0+7](block_type) = t1
 goto endif_1885
:else_1884:
 #                     3277:     return NONE # unreachable
    t1 = 4294967295
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_1885:
:endif_1881:
:endif_1878:
 #                     3278:   block_count = parse_block_count(prefix_tree_counts)
 
    H[t0+8]() = t0
   # saved bsp, return id:
   H[t0+9]() = 207
   # push arguments:
   H[t0+10]() = H[t0+5](prefix_tree_counts)
   t0 = t0 + 9
   goto parse_block_count
  :return_id_207:
 
 H[t0+8](block_count) = t1
 #                     3279:   if block_count == NONE:
 t1 = H[t0+8](block_count) == 4294967295
 ifN t1 goto else_1887
 #                     3280:     error() # err
 error
 goto endif_1888
:else_1887:
:endif_1888:
 #                     3281:   parse_block_switch_command_block_type = block_type
 H[t252+166](parse_block_switch_command_block_type) = H[t0+7](block_type)
 #                     3282:   parse_block_switch_command_block_count = block_count
 H[t252+167](parse_block_switch_command_block_count) = H[t0+8](block_count)
 #                     3283:   return 0
    t1 = 0
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_block_switch_command_end~:
 #                     3285: parse_block_switch_command_literals_block_type = NONE
 H[t0+168](parse_block_switch_command_literals_block_type) = 4294967295
 #                     3286: parse_block_switch_command_literals_block_count = NONE
 H[t0+169](parse_block_switch_command_literals_block_count) = 4294967295
 #                     3287: def parse_block_switch_command_literals():
 goto parse_block_switch_command_literals_end~
:parse_block_switch_command_literals:
 MarkTempVarStart
 #                     3288:   global parse_block_switch_command_literals_block_type, parse_block_switch_command_literals_block_count
 # Global parse_block_switch_command_literals_block_type via H[t252+168]
 # Global parse_block_switch_command_literals_block_count via H[t252+169]
 #                     3289:   prefix_tree_types = meta_block_prefix_tree_block_types_literals
 H[t0+1](prefix_tree_types) = H[t252+140](meta_block_prefix_tree_block_types_literals)
 #                     3290:   btype = meta_block_btype_l
 H[t0+2](btype) = H[t252+144](meta_block_btype_l)
 #                     3291:   btype_prev = meta_block_btype_l_prev
 H[t0+3](btype_prev) = H[t252+145](meta_block_btype_l_prev)
 #                     3292:   n_bltypes = meta_block_header_n_bltypes_l
 H[t0+4](n_bltypes) = H[t252+131](meta_block_header_n_bltypes_l)
 #                     3293:   prefix_tree_counts = meta_block_prefix_tree_block_counts_literals
 H[t0+5](prefix_tree_counts) = H[t252+141](meta_block_prefix_tree_block_counts_literals)
 #                     3294:   if parse_block_switch_command(prefix_tree_types, btype, btype_prev, n_bltypes, prefix_tree_counts):
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 208
   # push arguments:
   H[t0+8]() = H[t0+1](prefix_tree_types)
   H[t0+9]() = H[t0+2](btype)
   H[t0+10]() = H[t0+3](btype_prev)
   H[t0+11]() = H[t0+4](n_bltypes)
   H[t0+12]() = H[t0+5](prefix_tree_counts)
   t0 = t0 + 7
   goto parse_block_switch_command
  :return_id_208:
 
 ifN t1 goto else_1889
 #                     3295:     error() # err
 error
 goto endif_1890
:else_1889:
:endif_1890:
 #                     3296:   parse_block_switch_command_literals_block_type = parse_block_switch_command_block_type
 H[t252+168](parse_block_switch_command_literals_block_type) = H[t252+166](parse_block_switch_command_block_type)
 #                     3297:   parse_block_switch_command_literals_block_count = parse_block_switch_command_block_count
 H[t252+169](parse_block_switch_command_literals_block_count) = H[t252+167](parse_block_switch_command_block_count)
 #                     3298:   return 0
    t1 = 0
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_block_switch_command_literals_end~:
 #                     3300: parse_block_switch_command_insert_and_copy_lengths_block_type = NONE
 H[t0+170](parse_block_switch_command_insert_and_copy_lengths_block_type) = 4294967295
 #                     3301: parse_block_switch_command_insert_and_copy_lengths_block_count = NONE
 H[t0+171](parse_block_switch_command_insert_and_copy_lengths_block_count) = 4294967295
 #                     3302: def parse_block_switch_command_insert_and_copy_lengths():
 goto parse_block_switch_command_insert_and_copy_lengths_end~
:parse_block_switch_command_insert_and_copy_lengths:
 MarkTempVarStart
 #                     3303:   global parse_block_switch_command_insert_and_copy_lengths_block_type, parse_block_switch_command_insert_and_copy_lengths_block_count
 # Global parse_block_switch_command_insert_and_copy_lengths_block_type via H[t252+170]
 # Global parse_block_switch_command_insert_and_copy_lengths_block_count via H[t252+171]
 #                     3304:   prefix_tree_types = meta_block_prefix_tree_block_types_insert_and_copy_lengths
 H[t0+1](prefix_tree_types) = H[t252+153](meta_block_prefix_tree_block_types_insert_and_copy_lengths)
 #                     3305:   btype = meta_block_btype_i
 H[t0+2](btype) = H[t252+149](meta_block_btype_i)
 #                     3306:   btype_prev = meta_block_btype_i_prev
 H[t0+3](btype_prev) = H[t252+150](meta_block_btype_i_prev)
 #                     3307:   n_bltypes = meta_block_header_n_bltypes_i
 H[t0+4](n_bltypes) = H[t252+132](meta_block_header_n_bltypes_i)
 #                     3308:   prefix_tree_counts = meta_block_prefix_tree_block_counts_insert_and_copy_lengths
 H[t0+5](prefix_tree_counts) = H[t252+154](meta_block_prefix_tree_block_counts_insert_and_copy_lengths)
 #                     3309:   if parse_block_switch_command(prefix_tree_types, btype, btype_prev, n_bltypes, prefix_tree_counts):
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 209
   # push arguments:
   H[t0+8]() = H[t0+1](prefix_tree_types)
   H[t0+9]() = H[t0+2](btype)
   H[t0+10]() = H[t0+3](btype_prev)
   H[t0+11]() = H[t0+4](n_bltypes)
   H[t0+12]() = H[t0+5](prefix_tree_counts)
   t0 = t0 + 7
   goto parse_block_switch_command
  :return_id_209:
 
 ifN t1 goto else_1891
 #                     3310:     error() # err
 error
 goto endif_1892
:else_1891:
:endif_1892:
 #                     3311:   parse_block_switch_command_insert_and_copy_lengths_block_type = parse_block_switch_command_block_type
 H[t252+170](parse_block_switch_command_insert_and_copy_lengths_block_type) = H[t252+166](parse_block_switch_command_block_type)
 #                     3312:   parse_block_switch_command_insert_and_copy_lengths_block_count = parse_block_switch_command_block_count
 H[t252+171](parse_block_switch_command_insert_and_copy_lengths_block_count) = H[t252+167](parse_block_switch_command_block_count)
 #                     3313:   return 0
    t1 = 0
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_block_switch_command_insert_and_copy_lengths_end~:
 #                     3315: def parse_insert_and_copy_length():
 goto parse_insert_and_copy_length_end~
:parse_insert_and_copy_length:
 MarkTempVarStart
 #                     3316:   global meta_block_btype_i_prev, meta_block_blen_i, meta_block_btype_i, InsertAndCopyLength_data
 # Global meta_block_btype_i_prev via H[t252+150]
 # Global meta_block_blen_i via H[t252+147]
 # Global meta_block_btype_i via H[t252+149]
 # Global InsertAndCopyLength_data via H[t252+95]
 #                     3317:   if meta_block_blen_i == NONE:
 t1 = H[t252+147](meta_block_blen_i) == 4294967295
 ifN t1 goto else_1894
 #                     3318:     pass
 goto endif_1895
:else_1894:
 #                     3319:   elif meta_block_blen_i == 0:
 t1 = H[t252+147](meta_block_blen_i) == 0
 ifN t1 goto else_1897
 #                     3321:     if parse_block_switch_command_insert_and_copy_lengths():
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 210
   # push arguments:
   t0 = t0 + 2
   goto parse_block_switch_command_insert_and_copy_lengths
  :return_id_210:
 
 ifN t1 goto else_1899
 #                     3322:       error() # err
 error
 goto endif_1900
:else_1899:
:endif_1900:
 #                     3323:     meta_block_btype_i_prev = meta_block_btype_i # @TODO: define both!!!
 H[t252+150](meta_block_btype_i_prev) = H[t252+149](meta_block_btype_i)
 #                     3324:     meta_block_btype_i = parse_block_switch_command_insert_and_copy_lengths_block_type
 H[t252+149](meta_block_btype_i) = H[t252+170](parse_block_switch_command_insert_and_copy_lengths_block_type)
 #                     3325:     meta_block_blen_i = parse_block_switch_command_insert_and_copy_lengths_block_count - 1
 t1 = H[t252+171](parse_block_switch_command_insert_and_copy_lengths_block_count) - 1
 H[t252+147](meta_block_blen_i) = t1
 goto endif_1898
:else_1897:
 #                     3327:     meta_block_blen_i -= 1
 H[t252+147](meta_block_blen_i) = H[t252+147](meta_block_blen_i) - 1
:endif_1898:
:endif_1895:
 #                     3328:   btype = meta_block_btype_i
 H[t0+1](btype) = H[t252+149](meta_block_btype_i)
 #                     3329:   InsertAndCopyLength_data = lookup_symbol(meta_block_prefix_trees_insert_and_copy_lengths[btype])
 t1 = H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths) >> 31
 if t1 goto isM_1901
 t1 = H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths) + H[t0+1](btype)
 t1 = H[t1]()
 goto MorHdone_1902
:isM_1901:
 t1 = H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths) & 2147483647
 t1 = t1 + H[t0+1](btype)
 t1 = M[t1]
:MorHdone_1902:
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 211
   # push arguments:
   H[t0+4]() = t1
   t0 = t0 + 3
   goto lookup_symbol
  :return_id_211:
 t2 = t1
 
 H[t252+95](InsertAndCopyLength_data) = t2
 #                     3330:   if InsertAndCopyLength_data == NONE:
 t1 = H[t252+95](InsertAndCopyLength_data) == 4294967295
 ifN t1 goto else_1904
 #                     3331:     error() # err eof OR ParseErrorInsertAndCopyLength
 error
 goto endif_1905
:else_1904:
:endif_1905:
 #                     3332:   return InsertAndCopyLength
    t1 = H[t252+94](InsertAndCopyLength)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_insert_and_copy_length_end~:
 #                     3334: parse_block_switch_command_distances_block_type = NONE
 H[t0+172](parse_block_switch_command_distances_block_type) = 4294967295
 #                     3335: parse_block_switch_command_distances_block_count = NONE
 H[t0+173](parse_block_switch_command_distances_block_count) = 4294967295
 #                     3336: def parse_block_switch_command_distances():
 goto parse_block_switch_command_distances_end~
:parse_block_switch_command_distances:
 MarkTempVarStart
 #                     3337:   global parse_block_switch_command_distances_block_type, parse_block_switch_command_distances_block_count
 # Global parse_block_switch_command_distances_block_type via H[t252+172]
 # Global parse_block_switch_command_distances_block_count via H[t252+173]
 #                     3338:   prefix_tree_types = meta_block_prefix_tree_block_types_distances
 H[t0+1](prefix_tree_types) = H[t252+155](meta_block_prefix_tree_block_types_distances)
 #                     3339:   btype = meta_block_btype_d
 H[t0+2](btype) = H[t252+151](meta_block_btype_d)
 #                     3340:   btype_prev = meta_block_btype_d_prev
 H[t0+3](btype_prev) = H[t252+152](meta_block_btype_d_prev)
 #                     3341:   n_bltypes = meta_block_header_n_bltypes_d
 H[t0+4](n_bltypes) = H[t252+133](meta_block_header_n_bltypes_d)
 #                     3342:   prefix_tree_counts = meta_block_prefix_tree_block_counts_distances
 H[t0+5](prefix_tree_counts) = H[t252+156](meta_block_prefix_tree_block_counts_distances)
 #                     3343:   if parse_block_switch_command(prefix_tree_types, btype, btype_prev, n_bltypes, prefix_tree_counts):
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 212
   # push arguments:
   H[t0+8]() = H[t0+1](prefix_tree_types)
   H[t0+9]() = H[t0+2](btype)
   H[t0+10]() = H[t0+3](btype_prev)
   H[t0+11]() = H[t0+4](n_bltypes)
   H[t0+12]() = H[t0+5](prefix_tree_counts)
   t0 = t0 + 7
   goto parse_block_switch_command
  :return_id_212:
 
 ifN t1 goto else_1906
 #                     3344:     error() # err
 error
 goto endif_1907
:else_1906:
:endif_1907:
 #                     3345:   parse_block_switch_command_distances_block_type = parse_block_switch_command_block_type
 H[t252+172](parse_block_switch_command_distances_block_type) = H[t252+166](parse_block_switch_command_block_type)
 #                     3346:   parse_block_switch_command_distances_block_count = parse_block_switch_command_block_count
 H[t252+173](parse_block_switch_command_distances_block_count) = H[t252+167](parse_block_switch_command_block_count)
 #                     3347:   return 0
    t1 = 0
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_block_switch_command_distances_end~:
 #                     3349: def parse_insert_literals():
 goto parse_insert_literals_end~
:parse_insert_literals:
 MarkTempVarStart
 #                     3350:   global literal_buf_pointer, meta_block_btype_l_prev, meta_block_btype_l, meta_block_blen_l, InsertLiterals_data
 # Global literal_buf_pointer via H[t252+123]
 # Global meta_block_btype_l_prev via H[t252+145]
 # Global meta_block_btype_l via H[t252+144]
 # Global meta_block_blen_l via H[t252+146]
 # Global InsertLiterals_data via H[t252+100]
 #                     3351:   insert_length = meta_block_insert_length
 H[t0+1](insert_length) = H[t252+162](meta_block_insert_length)
 #                     3352:   literals = alloc_pM(insert_length)
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 213
   # push arguments:
   H[t0+4]() = H[t0+1](insert_length)
   t0 = t0 + 3
   goto addr_alloc_pM
  :return_id_213:
 
 t1 = t1 | 2147483648
 H[t0+2](literals) = t1
 #                     3353:   j = 0
 H[t0+3](j) = 0
 #                     3354:   while j < insert_length:
:while_1908:
 t1 = H[t0+3](j) < H[t0+1](insert_length)
 ifN t1 goto whileend_1910
 #                     3355:     if meta_block_blen_l == NONE:
 t1 = H[t252+146](meta_block_blen_l) == 4294967295
 ifN t1 goto else_1913
 #                     3356:       pass
 goto endif_1914
:else_1913:
 #                     3357:     elif meta_block_blen_l == 0:
 t1 = H[t252+146](meta_block_blen_l) == 0
 ifN t1 goto else_1916
 #                     3358:       if parse_block_switch_command_literals():
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 214
   # push arguments:
   t0 = t0 + 5
   goto parse_block_switch_command_literals
  :return_id_214:
 
 ifN t1 goto else_1918
 #                     3359:         error()
 error
 goto endif_1919
:else_1918:
:endif_1919:
 #                     3360:       meta_block_btype_l_prev = meta_block_btype_l
 H[t252+145](meta_block_btype_l_prev) = H[t252+144](meta_block_btype_l)
 #                     3361:       meta_block_btype_l = parse_block_switch_command_literals_block_type
 H[t252+144](meta_block_btype_l) = H[t252+168](parse_block_switch_command_literals_block_type)
 #                     3362:       meta_block_blen_l = parse_block_switch_command_literals_block_count - 1
 t1 = H[t252+169](parse_block_switch_command_literals_block_count) - 1
 H[t252+146](meta_block_blen_l) = t1
 goto endif_1917
:else_1916:
 #                     3364:       meta_block_blen_l -= 1
 H[t252+146](meta_block_blen_l) = H[t252+146](meta_block_blen_l) - 1
:endif_1917:
:endif_1914:
 #                     3365:     btype = meta_block_btype_l
 H[t0+4](btype) = H[t252+144](meta_block_btype_l)
 #                     3366:     context_mode = meta_block_context_modes_literals[btype]
 t1 = H[t252+159](meta_block_context_modes_literals) >> 31
 if t1 goto isM_1920
 t1 = H[t252+159](meta_block_context_modes_literals) + H[t0+4](btype)
 t1 = H[t1]()
 goto MorHdone_1921
:isM_1920:
 t1 = H[t252+159](meta_block_context_modes_literals) & 2147483647
 t1 = t1 + H[t0+4](btype)
 t1 = M[t1]
:MorHdone_1921:
 H[t0+5](context_mode) = t1
 #                     3367:     p1 = literal_buf[literal_buf_pointer]
 t1 = H[t252+122](literal_buf) & 2147483647
 t1 = t1 + H[t252+123](literal_buf_pointer)
 t1 = M[t1]
 H[t0+6](p1) = t1
 #                     3368:     p2 = literal_buf[(literal_buf_pointer+1) % 2]
 t2 = H[t252+123](literal_buf_pointer) + 1
 t1 = t2 % 2
 t2 = H[t252+122](literal_buf) & 2147483647
 t2 = t2 + t1
 t2 = M[t2]
 H[t0+7](p2) = t2
 #                     3369:     if context_mode == 0:
 t2 = H[t0+5](context_mode) == 0
 ifN t2 goto else_1923
 #                     3370:       cid = p1 & 63
 t2 = H[t0+6](p1) & 63
 H[t0+8](cid) = t2
 goto endif_1924
:else_1923:
 #                     3371:     elif context_mode == 1:
 t2 = H[t0+5](context_mode) == 1
 ifN t2 goto else_1926
 #                     3372:       cid = p1 >> 2
 t2 = H[t0+6](p1) >> 2
 H[t0+8](cid) = t2
 goto endif_1927
:else_1926:
 #                     3373:     elif context_mode == 2:
 t2 = H[t0+5](context_mode) == 2
 ifN t2 goto else_1929
 #                     3374:       cid = LUT_0[p1] | LUT_1[p2]
 t3 = H[t252+12](LUT_0) & 2147483647
 t3 = t3 + H[t0+6](p1)
 t3 = M[t3]
 t4 = H[t252+13](LUT_1) & 2147483647
 t4 = t4 + H[t0+7](p2)
 t4 = M[t4]
 t2 = t3 | t4
 H[t0+8](cid) = t2
 goto endif_1930
:else_1929:
 #                     3375:     elif context_mode == 3:
 t2 = H[t0+5](context_mode) == 3
 ifN t2 goto else_1932
 #                     3376:       cid = (LUT_2[p1] << 3) | LUT_2[p2]
 t4 = H[t252+14](LUT_2) & 2147483647
 t4 = t4 + H[t0+6](p1)
 t4 = M[t4]
 t3 = t4 << 3
 t4 = H[t252+14](LUT_2) & 2147483647
 t4 = t4 + H[t0+7](p2)
 t4 = M[t4]
 t2 = t3 | t4
 H[t0+8](cid) = t2
 goto endif_1933
:else_1932:
 #                     3378:       return NONE # unreachable
    t1 = 4294967295
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_1933:
:endif_1930:
:endif_1927:
:endif_1924:
 #                     3379:     index = meta_block_header_c_map_l[btype * 64 + cid]
 t3 = H[t0+4](btype) * 64
 t2 = t3 + H[t0+8](cid)
 t3 = H[t252+138](meta_block_header_c_map_l) >> 31
 if t3 goto isM_1934
 t3 = H[t252+138](meta_block_header_c_map_l) + t2
 t3 = H[t3]()
 goto MorHdone_1935
:isM_1934:
 t3 = H[t252+138](meta_block_header_c_map_l) & 2147483647
 t3 = t3 + t2
 t3 = M[t3]
:MorHdone_1935:
 H[t0+9](index) = t3
 #                     3380:     tmp_ = lookup_symbol(meta_block_prefix_trees_literals[index])
 t3 = H[t252+142](meta_block_prefix_trees_literals) >> 31
 if t3 goto isM_1936
 t3 = H[t252+142](meta_block_prefix_trees_literals) + H[t0+9](index)
 t3 = H[t3]()
 goto MorHdone_1937
:isM_1936:
 t3 = H[t252+142](meta_block_prefix_trees_literals) & 2147483647
 t3 = t3 + H[t0+9](index)
 t3 = M[t3]
:MorHdone_1937:
 
    H[t0+12]() = t0
   # saved bsp, return id:
   H[t0+13]() = 215
   # push arguments:
   H[t0+14]() = t3
   t0 = t0 + 13
   goto lookup_symbol
  :return_id_215:
 t4 = t1
 
 H[t0+10](tmp_) = t4
 #                     3381:     if tmp_ == NONE:
 t3 = H[t0+10](tmp_) == 4294967295
 ifN t3 goto else_1939
 #                     3382:       error() # err eof OR ParseErrorInsertLiterals
 error
 goto endif_1940
:else_1939:
:endif_1940:
 #                     3383:     literals[j] = tmp_
 t3 = H[t0+2](literals) & 2147483647
 t3 = t3 + H[t0+3](j)
 M[t3] = H[t0+10](tmp_)
 #                     3384:     literal_buf_pointer = (literal_buf_pointer+1) % 2
 t4 = H[t252+123](literal_buf_pointer) + 1
 t3 = t4 % 2
 H[t252+123](literal_buf_pointer) = t3
 #                     3385:     literal_buf[literal_buf_pointer] = tmp_
 t3 = H[t252+122](literal_buf) & 2147483647
 t3 = t3 + H[t252+123](literal_buf_pointer)
 M[t3] = H[t0+10](tmp_)
 #                     3386:     j += 1
 H[t0+3](j) = H[t0+3](j) + 1
 goto while_1908
:whileend_1910:
 #                     3387:   InsertLiterals_data = literals
 H[t252+100](InsertLiterals_data) = H[t0+2](literals)
 #                     3388:   return InsertLiterals
    t1 = H[t252+99](InsertLiterals)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_insert_literals_end~:
 #                     3390: def parse_distance_code():
 goto parse_distance_code_end~
:parse_distance_code:
 MarkTempVarStart
 #                     3391:   global meta_block_btype_d_prev, meta_block_btype_d, meta_block_blen_d, DistanceCode_data
 # Global meta_block_btype_d_prev via H[t252+152]
 # Global meta_block_btype_d via H[t252+151]
 # Global meta_block_blen_d via H[t252+148]
 # Global DistanceCode_data via H[t252+102]
 #                     3392:   if meta_block_distance == 0:
 t1 = H[t252+163](meta_block_distance) == 0
 ifN t1 goto else_1942
 #                     3393:     DistanceCode_data = 0
 H[t252+102](DistanceCode_data) = 0
 #                     3394:     return DistanceCode
    t1 = H[t252+101](DistanceCode)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_1943
:else_1942:
 #                     3395:   elif meta_block_distance == NONE:
 t1 = H[t252+163](meta_block_distance) == 4294967295
 ifN t1 goto else_1945
 #                     3396:     pass
 goto endif_1946
:else_1945:
 #                     3398:     return NONE # unreachable
    t1 = 4294967295
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_1946:
:endif_1943:
 #                     3399:   if meta_block_blen_d == NONE:
 t1 = H[t252+148](meta_block_blen_d) == 4294967295
 ifN t1 goto else_1948
 #                     3400:     pass
 goto endif_1949
:else_1948:
 #                     3401:   elif meta_block_blen_d == 0:
 t1 = H[t252+148](meta_block_blen_d) == 0
 ifN t1 goto else_1951
 #                     3402:     if parse_block_switch_command_distances():
 
    H[t0+1]() = t0
   # saved bsp, return id:
   H[t0+2]() = 216
   # push arguments:
   t0 = t0 + 2
   goto parse_block_switch_command_distances
  :return_id_216:
 
 ifN t1 goto else_1953
 #                     3403:       error() # err
 error
 goto endif_1954
:else_1953:
:endif_1954:
 #                     3404:     meta_block_btype_d_prev = meta_block_btype_d
 H[t252+152](meta_block_btype_d_prev) = H[t252+151](meta_block_btype_d)
 #                     3405:     meta_block_btype_d = parse_block_switch_command_distances_block_type
 H[t252+151](meta_block_btype_d) = H[t252+172](parse_block_switch_command_distances_block_type)
 #                     3406:     meta_block_blen_d = parse_block_switch_command_distances_block_count - 1
 t1 = H[t252+173](parse_block_switch_command_distances_block_count) - 1
 H[t252+148](meta_block_blen_d) = t1
 goto endif_1952
:else_1951:
 #                     3408:     meta_block_blen_d -= 1
 H[t252+148](meta_block_blen_d) = H[t252+148](meta_block_blen_d) - 1
:endif_1952:
:endif_1949:
 #                     3409:   if meta_block_copy_length == 0 or meta_block_copy_length == 1:
 t2 = H[t252+161](meta_block_copy_length) == 0
 t3 = H[t252+161](meta_block_copy_length) == 1
 t1 = t2 or t3
 ifN t1 goto else_1957
 #                     3410:     error() # unreachable
 error
 goto endif_1958
:else_1957:
 #                     3411:   elif meta_block_copy_length == 2 or meta_block_copy_length == 3 or meta_block_copy_length == 4:
 t3 = H[t252+161](meta_block_copy_length) == 2
 t4 = H[t252+161](meta_block_copy_length) == 3
 t2 = t3 or t4
 t3 = H[t252+161](meta_block_copy_length) == 4
 t1 = t2 or t3
 ifN t1 goto else_1962
 #                     3412:     cid = meta_block_copy_length - 2
 t1 = H[t252+161](meta_block_copy_length) - 2
 H[t0+1](cid) = t1
 goto endif_1963
:else_1962:
 #                     3414:     cid = 3
 H[t0+1](cid) = 3
:endif_1963:
:endif_1958:
 #                     3415:   index = meta_block_header_c_map_d[meta_block_btype_d * 4 + cid]
 t2 = H[t252+151](meta_block_btype_d) * 4
 t1 = t2 + H[t0+1](cid)
 t2 = H[t252+139](meta_block_header_c_map_d) >> 31
 if t2 goto isM_1964
 t2 = H[t252+139](meta_block_header_c_map_d) + t1
 t2 = H[t2]()
 goto MorHdone_1965
:isM_1964:
 t2 = H[t252+139](meta_block_header_c_map_d) & 2147483647
 t2 = t2 + t1
 t2 = M[t2]
:MorHdone_1965:
 H[t0+2](index) = t2
 #                     3416:   DistanceCode_data = lookup_symbol(meta_block_prefix_trees_distances[index])
 t2 = H[t252+158](meta_block_prefix_trees_distances) >> 31
 if t2 goto isM_1966
 t2 = H[t252+158](meta_block_prefix_trees_distances) + H[t0+2](index)
 t2 = H[t2]()
 goto MorHdone_1967
:isM_1966:
 t2 = H[t252+158](meta_block_prefix_trees_distances) & 2147483647
 t2 = t2 + H[t0+2](index)
 t2 = M[t2]
:MorHdone_1967:
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 217
   # push arguments:
   H[t0+6]() = t2
   t0 = t0 + 5
   goto lookup_symbol
  :return_id_217:
 t3 = t1
 
 H[t252+102](DistanceCode_data) = t3
 #                     3417:   if DistanceCode_data == NONE:
 t2 = H[t252+102](DistanceCode_data) == 4294967295
 ifN t2 goto else_1969
 #                     3418:     error() # err decompr ParseErrorDistanceCode OR eof
 error
 goto endif_1970
:else_1969:
:endif_1970:
 #                     3419:   return DistanceCode
    t1 = H[t252+101](DistanceCode)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:parse_distance_code_end~:
 #                     3421: def decode_distance():
 goto decode_distance_end~
:decode_distance:
 MarkTempVarStart
 #                     3422:   global Distance_data, distance_buf_pointer
 # Global Distance_data via H[t252+104]
 # Global distance_buf_pointer via H[t252+121]
 #                     3423:   if meta_block_distance_code == NONE:
 t1 = H[t252+164](meta_block_distance_code) == 4294967295
 ifN t1 goto else_1972
 #                     3424:     error() # unreachable
 error
 goto endif_1973
:else_1972:
 #                     3425:   elif meta_block_distance_code >= 0 and meta_block_distance_code <= 3:
 t2 = H[t252+164](meta_block_distance_code) >= 0
 t3 = H[t252+164](meta_block_distance_code) <= 3
 t1 = t2 and t3
 ifN t1 goto else_1976
 #                     3426:     distance = distance_buf[(4 + distance_buf_pointer - meta_block_distance_code) % 4]
 t3 = 4 + H[t252+121](distance_buf_pointer)
 t2 = t3 - H[t252+164](meta_block_distance_code)
 t1 = t2 % 4
 t2 = H[t252+120](distance_buf) + t1
 t2 = H[t2]()
 H[t0+1](distance) = t2
 goto endif_1977
:else_1976:
 #                     3429:   elif meta_block_distance_code >= 4 and meta_block_distance_code <= 9:
 t3 = H[t252+164](meta_block_distance_code) >= 4
 t4 = H[t252+164](meta_block_distance_code) <= 9
 t2 = t3 and t4
 ifN t2 goto else_1980
 #                     3430:     distance = distance_buf[distance_buf_pointer]
 t2 = H[t252+120](distance_buf) + H[t252+121](distance_buf_pointer)
 t2 = H[t2]()
 H[t0+1](distance) = t2
 #                     3431:     sign = meta_block_distance_code % 2
 t2 = H[t252+164](meta_block_distance_code) % 2
 H[t0+2](sign) = t2
 #                     3432:     d = (meta_block_distance_code - 2) >> 1
 t3 = H[t252+164](meta_block_distance_code) - 2
 t2 = t3 >> 1
 H[t0+3](d) = t2
 #                     3433:     if sign:  # case +
 ifN H[t0+2](sign) goto else_1982
 #                     3434:       distance = distance + d
 t2 = H[t0+1](distance) + H[t0+3](d)
 H[t0+1](distance) = t2
 goto endif_1983
:else_1982:
 #                     3436:       if distance <= d:
 t2 = H[t0+1](distance) <= H[t0+3](d)
 ifN t2 goto else_1985
 #                     3437:         error() # InvalidNonPositiveDistance
 error
 goto endif_1986
:else_1985:
:endif_1986:
 #                     3438:       distance = distance - d
 t2 = H[t0+1](distance) - H[t0+3](d)
 H[t0+1](distance) = t2
:endif_1983:
 goto endif_1981
:else_1980:
 #                     3439:   elif meta_block_distance_code >= 10 and meta_block_distance_code <= 15:
 t3 = H[t252+164](meta_block_distance_code) >= 10
 t4 = H[t252+164](meta_block_distance_code) <= 15
 t2 = t3 and t4
 ifN t2 goto else_1989
 #                     3440:     distance = distance_buf[(3 + distance_buf_pointer) % 4]
 t3 = 3 + H[t252+121](distance_buf_pointer)
 t2 = t3 % 4
 t3 = H[t252+120](distance_buf) + t2
 t3 = H[t3]()
 H[t0+1](distance) = t3
 #                     3441:     sign = meta_block_distance_code % 2
 t3 = H[t252+164](meta_block_distance_code) % 2
 H[t0+2](sign) = t3
 #                     3442:     d = (meta_block_distance_code - 8) >> 1
 t4 = H[t252+164](meta_block_distance_code) - 8
 t3 = t4 >> 1
 H[t0+3](d) = t3
 #                     3443:     if sign:  # case +
 ifN H[t0+2](sign) goto else_1991
 #                     3444:       distance = distance + d
 t3 = H[t0+1](distance) + H[t0+3](d)
 H[t0+1](distance) = t3
 goto endif_1992
:else_1991:
 #                     3446:       if distance <= d:
 t3 = H[t0+1](distance) <= H[t0+3](d)
 ifN t3 goto else_1994
 #                     3447:         error() # InvalidNonPositiveDistance
 error
 goto endif_1995
:else_1994:
:endif_1995:
 #                     3448:       distance = distance - d
 t3 = H[t0+1](distance) - H[t0+3](d)
 H[t0+1](distance) = t3
:endif_1992:
 goto endif_1990
:else_1989:
 #                     3449:   elif meta_block_distance_code <= (15 + meta_block_header_n_direct):
 t4 = 15 + H[t252+135](meta_block_header_n_direct)
 t3 = H[t252+164](meta_block_distance_code) <= t4
 ifN t3 goto else_1997
 #                     3450:     distance = meta_block_distance_code - 15
 t3 = H[t252+164](meta_block_distance_code) - 15
 H[t0+1](distance) = t3
 goto endif_1998
:else_1997:
 #                     3452:     n_direct = meta_block_header_n_direct
 H[t0+4](n_direct) = H[t252+135](meta_block_header_n_direct)
 #                     3453:     n_postfix = meta_block_header_n_postfix
 H[t0+5](n_postfix) = H[t252+134](meta_block_header_n_postfix)
 #                     3454:     ndistbits = 1 + ((meta_block_distance_code - n_direct - 16) >> (n_postfix + 1))
 t6 = H[t252+164](meta_block_distance_code) - H[t0+4](n_direct)
 t5 = t6 - 16
 t6 = H[t0+5](n_postfix) + 1
 t4 = t5 >> t6
 t3 = 1 + t4
 H[t0+6](ndistbits) = t3
 #                     3455:     if read_u32_from_n_bits(ndistbits):
 
    H[t0+9]() = t0
   # saved bsp, return id:
   H[t0+10]() = 218
   # push arguments:
   H[t0+11]() = H[t0+6](ndistbits)
   t0 = t0 + 10
   goto read_u32_from_n_bits
  :return_id_218:
 t3 = t1
 
 ifN t3 goto else_1999
 #                     3456:       error() # eof err
 error
 goto endif_2000
:else_1999:
:endif_2000:
 #                     3457:     dextra = read_u32_from_n_bits_result
 H[t0+7](dextra) = H[t252+7](read_u32_from_n_bits_result)
 #                     3458:     hcode = (meta_block_distance_code - n_direct - 16) >> n_postfix
 t5 = H[t252+164](meta_block_distance_code) - H[t0+4](n_direct)
 t4 = t5 - 16
 t3 = t4 >> H[t0+5](n_postfix)
 H[t0+8](hcode) = t3
 #                     3459:     postfix_mask = (1 << n_postfix) - 1
 t4 = 1 << H[t0+5](n_postfix)
 t3 = t4 - 1
 H[t0+9](postfix_mask) = t3
 #                     3460:     lcode = (meta_block_distance_code - n_direct - 16) & postfix_mask
 t5 = H[t252+164](meta_block_distance_code) - H[t0+4](n_direct)
 t4 = t5 - 16
 t3 = t4 & H[t0+9](postfix_mask)
 H[t0+10](lcode) = t3
 #                     3461:     offset = ((2 + (hcode & 1)) << ndistbits) - 4
 t6 = H[t0+8](hcode) & 1
 t5 = 2 + t6
 t4 = t5 << H[t0+6](ndistbits)
 t3 = t4 - 4
 H[t0+11](offset) = t3
 #                     3462:     distance = ((offset + dextra) << n_postfix) + lcode + n_direct + 1
 t7 = H[t0+11](offset) + H[t0+7](dextra)
 t6 = t7 << H[t0+5](n_postfix)
 t5 = t6 + H[t0+10](lcode)
 t4 = t5 + H[t0+4](n_direct)
 t3 = t4 + 1
 H[t0+1](distance) = t3
:endif_1998:
:endif_1990:
:endif_1981:
:endif_1977:
:endif_1973:
 #                     3463:   if meta_block_distance_code > 0 and distance <= header_window_size and distance <= count_output:
 t5 = H[t252+164](meta_block_distance_code) > 0
 t6 = H[t0+1](distance) <= H[t252+116](header_window_size)
 t4 = t5 and t6
 t5 = H[t0+1](distance) <= H[t252+119](count_output)
 t3 = t4 and t5
 ifN t3 goto else_2004
 #                     3464:     distance_buf_pointer = (distance_buf_pointer + 1) % 4
 t4 = H[t252+121](distance_buf_pointer) + 1
 t3 = t4 % 4
 H[t252+121](distance_buf_pointer) = t3
 #                     3465:     distance_buf[distance_buf_pointer] = distance
 t3 = H[t252+120](distance_buf) + H[t252+121](distance_buf_pointer)
 H[t3]() = H[t0+1](distance)
 goto endif_2005
:else_2004:
:endif_2005:
 #                     3466:   Distance_data = distance
 H[t252+104](Distance_data) = H[t0+1](distance)
 #                     3467:   return Distance
    t1 = H[t252+103](Distance)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:decode_distance_end~:
 #                     3469: def copy_literals():
 goto copy_literals_end~
:copy_literals:
 MarkTempVarStart
 #                     3470:   global CopyLiterals_data
 # Global CopyLiterals_data via H[t252+106]
 #                     3471:   window_size = header_window_size
 H[t0+1](window_size) = H[t252+116](header_window_size)
 #                     3472:   copy_length = meta_block_copy_length
 H[t0+2](copy_length) = H[t252+161](meta_block_copy_length)
 #                     3473:   distance = meta_block_distance
 H[t0+3](distance) = H[t252+163](meta_block_distance)
 #                     3474:   max_allowed_distance = count_output
 H[t0+4](max_allowed_distance) = H[t252+119](count_output)
 #                     3475:   if window_size < max_allowed_distance:
 t1 = H[t0+1](window_size) < H[t0+4](max_allowed_distance)
 ifN t1 goto else_2007
 #                     3476:     max_allowed_distance = window_size
 H[t0+4](max_allowed_distance) = H[t0+1](window_size)
 goto endif_2008
:else_2007:
:endif_2008:
 #                     3477:   if distance <= max_allowed_distance:
 t1 = H[t0+3](distance) <= H[t0+4](max_allowed_distance)
 ifN t1 goto else_2010
 #                     3478:     window = alloc_pM(copy_length)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 219
   # push arguments:
   H[t0+7]() = H[t0+2](copy_length)
   t0 = t0 + 6
   goto addr_alloc_pM
  :return_id_219:
 
 t1 = t1 | 2147483648
 H[t0+5](window) = t1
 #                     3479:     l = distance
 H[t0+6](l) = H[t0+3](distance)
 #                     3480:     if copy_length < l:
 t1 = H[t0+2](copy_length) < H[t0+6](l)
 ifN t1 goto else_2013
 #                     3481:       l = copy_length
 H[t0+6](l) = H[t0+2](copy_length)
 goto endif_2014
:else_2013:
:endif_2014:
 #                     3483:     n = distance - 1
 t1 = H[t0+3](distance) - 1
 H[t0+7](n) = t1
 #                     3484:     i = 0
 H[t0+8](i) = 0
 #                     3485:     while i < copy_length:
:while_2015:
 t1 = H[t0+8](i) < H[t0+2](copy_length)
 ifN t1 goto whileend_2017
 #                     3486:       t = (output_window_pointer + len_pM(output_window) - n + i) % len_pM(output_window)
 t5 = H[t252+117](output_window)
 t5 = t5 & 2147483647
 t5 = t5 - 5
 t6 = M[t5] << 8
 t5 = t5 + 1
 t6 = t6 + M[t5]
 t6 = t6 << 8
 t5 = t5 + 1
 t6 = t6 + M[t5]
 t6 = t6 << 8
 t5 = t5 + 1
 t6 = t6 + M[t5]
 t4 = H[t252+118](output_window_pointer) + t6
 t3 = t4 - H[t0+7](n)
 t2 = t3 + H[t0+8](i)
 t3 = H[t252+117](output_window)
 t3 = t3 & 2147483647
 t3 = t3 - 5
 t4 = M[t3] << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t4 = t4 << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t4 = t4 << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t1 = t2 % t4
 H[t0+9](t) = t1
 #                     3487:       window[i] = output_window[t]
 t1 = H[t252+117](output_window) >> 31
 if t1 goto isM_2019
 t1 = H[t252+117](output_window) + H[t0+9](t)
 t1 = H[t1]()
 goto MorHdone_2020
:isM_2019:
 t1 = H[t252+117](output_window) & 2147483647
 t1 = t1 + H[t0+9](t)
 t1 = M[t1]
:MorHdone_2020:
 t2 = H[t0+5](window) & 2147483647
 t2 = t2 + H[t0+8](i)
 M[t2] = t1
 #                     3488:       i += 1
 H[t0+8](i) = H[t0+8](i) + 1
 goto while_2015
:whileend_2017:
 #                     3489:     i = 0
 H[t0+8](i) = 0
 #                     3490:     while i < copy_length:
:while_2021:
 t1 = H[t0+8](i) < H[t0+2](copy_length)
 ifN t1 goto whileend_2023
 #                     3491:       window[i] = window[i % l]
 t1 = H[t0+8](i) % H[t0+6](l)
 t2 = H[t0+5](window) & 2147483647
 t2 = t2 + t1
 t2 = M[t2]
 t3 = H[t0+5](window) & 2147483647
 t3 = t3 + H[t0+8](i)
 M[t3] = t2
 #                     3492:       i += 1
 H[t0+8](i) = H[t0+8](i) + 1
 goto while_2021
:whileend_2023:
 #                     3493:     CopyLiterals_data = window
 H[t252+106](CopyLiterals_data) = H[t0+5](window)
 #                     3494:     return CopyLiterals
    t1 = H[t252+105](CopyLiterals)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_2011
:else_2010:
 #                     3496:     if copy_length < 4 or copy_length > 24:
 t3 = H[t0+2](copy_length) < 4
 t4 = H[t0+2](copy_length) > 24
 t2 = t3 or t4
 ifN t2 goto else_2027
 #                     3497:       error()  # InvalidLengthInStaticDictionary
 error
 goto endif_2028
:else_2027:
:endif_2028:
 #                     3498:     word_id = distance - max_allowed_distance - 1
 t3 = H[t0+3](distance) - H[t0+4](max_allowed_distance)
 t2 = t3 - 1
 H[t0+10](word_id) = t2
 #                     3499:     if copy_length < 4:
 t2 = H[t0+2](copy_length) < 4
 ifN t2 goto else_2030
 #                     3500:       n_words_length = 0
 H[t0+11](n_words_length) = 0
 goto endif_2031
:else_2030:
 #                     3502:       n_words_length = 1 << BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[copy_length]
 t3 = H[t252+10](BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH) & 2147483647
 t3 = t3 + H[t0+2](copy_length)
 t3 = M[t3]
 t2 = 1 << t3
 H[t0+11](n_words_length) = t2
:endif_2031:
 #                     3503:     index = word_id % n_words_length
 t2 = H[t0+10](word_id) % H[t0+11](n_words_length)
 H[t0+12](index) = t2
 #                     3504:     offset_from = BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[copy_length] + index * copy_length
 t3 = H[t252+9](BROTLI_DICTIONARY_OFFSETS_BY_LENGTH) + H[t0+2](copy_length)
 t3 = H[t3]()
 t4 = H[t0+12](index) * H[t0+2](copy_length)
 t2 = t3 + t4
 H[t0+13](offset_from) = t2
 #                     3505:     offset_to = BROTLI_DICTIONARY_OFFSETS_BY_LENGTH[copy_length] + (index + 1) * copy_length
 t3 = H[t252+9](BROTLI_DICTIONARY_OFFSETS_BY_LENGTH) + H[t0+2](copy_length)
 t3 = H[t3]()
 t5 = H[t0+12](index) + 1
 t4 = t5 * H[t0+2](copy_length)
 t2 = t3 + t4
 H[t0+14](offset_to) = t2
 #                     3506:     base_word = alloc_pM(offset_to-offset_from)
 t2 = H[t0+14](offset_to) - H[t0+13](offset_from)
 
    H[t0+16]() = t0
   # saved bsp, return id:
   H[t0+17]() = 220
   # push arguments:
   H[t0+18]() = t2
   t0 = t0 + 17
   goto addr_alloc_pM
  :return_id_220:
 t3 = t1
 
 t3 = t3 | 2147483648
 H[t0+15](base_word) = t3
 #                     3507:     i = 0
 H[t0+8](i) = 0
 #                     3508:     while i < offset_to-offset_from:
:while_2032:
 t3 = H[t0+14](offset_to) - H[t0+13](offset_from)
 t2 = H[t0+8](i) < t3
 ifN t2 goto whileend_2034
 #                     3509:       base_word[i] = BROTLI_DICTIONARY[i + offset_from]
 t2 = H[t0+8](i) + H[t0+13](offset_from)
 t3 = H[t252+11](BROTLI_DICTIONARY) >> 31
 if t3 goto isM_2036
 t3 = H[t252+11](BROTLI_DICTIONARY) + t2
 t3 = H[t3]()
 goto MorHdone_2037
:isM_2036:
 t3 = H[t252+11](BROTLI_DICTIONARY) & 2147483647
 t3 = t3 + t2
 t3 = M[t3]
:MorHdone_2037:
 t4 = H[t0+15](base_word) & 2147483647
 t4 = t4 + H[t0+8](i)
 M[t4] = t3
 #                     3510:       i += 1
 H[t0+8](i) = H[t0+8](i) + 1
 goto while_2032
:whileend_2034:
 #                     3511:     transform_id = word_id >> BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH[copy_length]
 t4 = H[t252+10](BROTLI_DICTIONARY_SIZE_BITS_BY_LENGTH) & 2147483647
 t4 = t4 + H[t0+2](copy_length)
 t4 = M[t4]
 t3 = H[t0+10](word_id) >> t4
 H[t0+16](transform_id) = t3
 #                     3512:     if transform_id > 120:
 t3 = H[t0+16](transform_id) > 120
 ifN t3 goto else_2039
 #                     3513:       error() # InvalidTransformId
 error
 goto endif_2040
:else_2039:
:endif_2040:
 #                     3515:     CopyLiterals_data = transformation(transform_id, base_word)
 
    H[t0+19]() = t0
   # saved bsp, return id:
   H[t0+20]() = 221
   # push arguments:
   H[t0+21]() = H[t0+16](transform_id)
   H[t0+22]() = H[t0+15](base_word)
   t0 = t0 + 20
   goto transformation
  :return_id_221:
 t3 = t1
 
 H[t252+106](CopyLiterals_data) = t3
 #                     3517:     if transform_id != 0:
 t3 = H[t0+16](transform_id) != 0
 ifN t3 goto else_2042
 #                     3518:       free_pM(base_word)
 t3 = H[t0+15](base_word) & 2147483647
 
    H[t0+19]() = t0
   # saved bsp, return id:
   H[t0+20]() = 222
   # push arguments:
   H[t0+21]() = t3
   t0 = t0 + 20
   goto addr_free_pM
  :return_id_222:
 t4 = t1
 
 goto endif_2043
:else_2042:
:endif_2043:
 #                     3519:     return CopyLiterals
    t1 = H[t252+105](CopyLiterals)
   t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
:endif_2011:
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:copy_literals_end~:
 #                     3522: expect_next_seg = True
 H[t0+174](expect_next_seg) = 1
 #                     3523: def pcomp(c):  # the passing of c is like having c = read_b() as first line
 goto pcomp_end~
:pcomp:
 MarkTempVarStart
 # Arg c at t0 + 1
 #                     3524:   global count_output, header_wbits, header_window_size, literal_buf_pointer, meta_block_blen_d
 # Global count_output via H[t252+119]
 # Global header_wbits via H[t252+115]
 # Global header_window_size via H[t252+116]
 # Global literal_buf_pointer via H[t252+123]
 # Global meta_block_blen_d via H[t252+148]
 #                     3525:   global meta_block_blen_i, meta_block_blen_l, meta_block_context_modes_literals, meta_block_copy_length
 # Global meta_block_blen_i via H[t252+147]
 # Global meta_block_blen_l via H[t252+146]
 # Global meta_block_context_modes_literals via H[t252+159]
 # Global meta_block_copy_length via H[t252+161]
 #                     3526:   global meta_block_count_output, meta_block_distance, meta_block_distance_code, meta_block_header_c_map_d
 # Global meta_block_count_output via H[t252+143]
 # Global meta_block_distance via H[t252+163]
 # Global meta_block_distance_code via H[t252+164]
 # Global meta_block_header_c_map_d via H[t252+139]
 #                     3527:   global meta_block_btype_l_prev, meta_block_btype_l, meta_block_btype_i, meta_block_btype_i_prev
 # Global meta_block_btype_l_prev via H[t252+145]
 # Global meta_block_btype_l via H[t252+144]
 # Global meta_block_btype_i via H[t252+149]
 # Global meta_block_btype_i_prev via H[t252+150]
 #                     3528:   global meta_block_btype_d, meta_block_btype_d_prev
 # Global meta_block_btype_d via H[t252+151]
 # Global meta_block_btype_d_prev via H[t252+152]
 #                     3529:   global meta_block_header_c_map_l, meta_block_header_is_last, meta_block_header_is_last_empty
 # Global meta_block_header_c_map_l via H[t252+138]
 # Global meta_block_header_is_last via H[t252+124]
 # Global meta_block_header_is_last_empty via H[t252+125]
 #                     3530:   global meta_block_header_is_uncompressed, meta_block_header_m_len, meta_block_header_m_nibbles
 # Global meta_block_header_is_uncompressed via H[t252+130]
 # Global meta_block_header_m_len via H[t252+129]
 # Global meta_block_header_m_nibbles via H[t252+126]
 #                     3531:   global meta_block_header_m_skip_bytes, meta_block_header_m_skip_len, meta_block_header_n_bltypes_d
 # Global meta_block_header_m_skip_bytes via H[t252+127]
 # Global meta_block_header_m_skip_len via H[t252+128]
 # Global meta_block_header_n_bltypes_d via H[t252+133]
 #                     3532:   global meta_block_header_n_bltypes_i, meta_block_header_n_bltypes_l, meta_block_header_n_direct
 # Global meta_block_header_n_bltypes_i via H[t252+132]
 # Global meta_block_header_n_bltypes_l via H[t252+131]
 # Global meta_block_header_n_direct via H[t252+135]
 #                     3533:   global meta_block_header_n_postfix, meta_block_header_n_trees_d, meta_block_header_n_trees_l
 # Global meta_block_header_n_postfix via H[t252+134]
 # Global meta_block_header_n_trees_d via H[t252+137]
 # Global meta_block_header_n_trees_l via H[t252+136]
 #                     3534:   global meta_block_insert_and_copy_length, meta_block_insert_length, meta_block_prefix_tree_block_counts_distances
 # Global meta_block_insert_and_copy_length via H[t252+160]
 # Global meta_block_insert_length via H[t252+162]
 # Global meta_block_prefix_tree_block_counts_distances via H[t252+156]
 #                     3535:   global meta_block_prefix_tree_block_counts_insert_and_copy_lengths, meta_block_prefix_tree_block_counts_literals
 # Global meta_block_prefix_tree_block_counts_insert_and_copy_lengths via H[t252+154]
 # Global meta_block_prefix_tree_block_counts_literals via H[t252+141]
 #                     3536:   global meta_block_prefix_tree_block_types_distances, meta_block_prefix_tree_block_types_insert_and_copy_lengths
 # Global meta_block_prefix_tree_block_types_distances via H[t252+155]
 # Global meta_block_prefix_tree_block_types_insert_and_copy_lengths via H[t252+153]
 #                     3537:   global meta_block_prefix_tree_block_types_literals, meta_block_prefix_trees_distances
 # Global meta_block_prefix_tree_block_types_literals via H[t252+140]
 # Global meta_block_prefix_trees_distances via H[t252+158]
 #                     3538:   global meta_block_prefix_trees_insert_and_copy_lengths, meta_block_prefix_trees_literals
 # Global meta_block_prefix_trees_insert_and_copy_lengths via H[t252+157]
 # Global meta_block_prefix_trees_literals via H[t252+142]
 #                     3539:   global output_window, output_window_pointer, state, WBits_data, BROTLI_DICTIONARY, expect_next_seg
 # Global output_window via H[t252+117]
 # Global output_window_pointer via H[t252+118]
 # Global state via H[t252+165]
 # Global WBits_data via H[t252+30]
 # Global BROTLI_DICTIONARY via H[t252+11]
 # Global expect_next_seg via H[t252+174]
 #                     3540:   global distance_buf, distance_buf_pointer, literal_buf
 # Global distance_buf via H[t252+120]
 # Global distance_buf_pointer via H[t252+121]
 # Global literal_buf via H[t252+122]
 #                     3541:   global bit_pos, current_byte, global_bit_pos
 # Global bit_pos via H[t252+1]
 # Global current_byte via H[t252+2]
 # Global global_bit_pos via H[t252+3]
 #                     3543:   if expect_next_seg:
 ifN H[t252+174](expect_next_seg) goto else_2044
 #                     3544:     if c == 0x74:
 t1 = H[t0+1](c) == 116
 ifN t1 goto else_2047
 #                     3545:       push_b(c)  # push c back for the loop
 t253 = H[t0+1](c)
 #                     3546:       if BROTLI_DICTIONARY == NONE:
 t1 = H[t252+11](BROTLI_DICTIONARY) == 4294967295
 ifN t1 goto else_2050
 #                     3547:         BROTLI_DICTIONARY = alloc_pM(122784)
 
    H[t0+2]() = t0
   # saved bsp, return id:
   H[t0+3]() = 223
   # push arguments:
   H[t0+4]() = 122784
   t0 = t0 + 3
   goto addr_alloc_pM
  :return_id_223:
 
 t1 = t1 | 2147483648
 H[t252+11](BROTLI_DICTIONARY) = t1
 goto endif_2051
:else_2050:
:endif_2051:
 #                     3548:       i = 0
 H[t0+2](i) = 0
 #                     3549:       while i < 122784:
:while_2052:
 t1 = H[t0+2](i) < 122784
 ifN t1 goto whileend_2054
 #                     3550:         tmp_ = read_b()
 
    H[t0+3]() = t0
   # saved bsp, return id:
   H[t0+4]() = 224
   # push arguments:
   t0 = t0 + 4
   goto read_b
  :return_id_224:
 
 H[t0+3](tmp_) = t1
 #                     3551:         if tmp_ == NONE:
 t1 = H[t0+3](tmp_) == 4294967295
 ifN t1 goto else_2057
 #                     3552:           error() # was expecting all bytes of the dict
 error
 goto endif_2058
:else_2057:
:endif_2058:
 #                     3553:         BROTLI_DICTIONARY[i] = tmp_
 t1 = H[t252+11](BROTLI_DICTIONARY) & 2147483647
 t1 = t1 + H[t0+2](i)
 M[t1] = H[t0+3](tmp_)
 #                     3554:         i += 1
 H[t0+2](i) = H[t0+2](i) + 1
 goto while_2052
:whileend_2054:
 #                     3555:       expect_next_seg = False
 H[t252+174](expect_next_seg) = 0
 goto endif_2048
:else_2047:
 #                     3557:       expect_next_seg = False  # no dict was provided as first input data, drop first byte
 H[t252+174](expect_next_seg) = 0
:endif_2048:
 goto endif_2045
:else_2044:
:endif_2045:
 #                     3559:   while True:
:while_2059:
 ifN 1 goto whileend_2061
 #                     3562:     if state == StreamBegin:
 t1 = H[t252+165](state) == H[t252+27](StreamBegin)
 ifN t1 goto else_2063
 #                     3563:       state = HeaderBegin
 H[t252+165](state) = H[t252+28](HeaderBegin)
 goto endif_2064
:else_2063:
 #                     3564:     elif state == NONE: # dec err
 t1 = H[t252+165](state) == 4294967295
 ifN t1 goto else_2066
 #                     3565:       error()
 error
 #                     3566:       return
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_2067
:else_2066:
 #                     3567:     elif state == HeaderBegin:
 t1 = H[t252+165](state) == H[t252+28](HeaderBegin)
 ifN t1 goto else_2069
 #                     3568:       state = WBits
 H[t252+165](state) = H[t252+29](WBits)
 #                     3569:       WBits_data = parse_wbits()
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 225
   # push arguments:
   t0 = t0 + 5
   goto parse_wbits
  :return_id_225:
 
 H[t252+30](WBits_data) = t1
 goto endif_2070
:else_2069:
 #                     3570:     elif state == WBits:
 t1 = H[t252+165](state) == H[t252+29](WBits)
 ifN t1 goto else_2072
 #                     3571:       header_wbits = WBits_data
 H[t252+115](header_wbits) = H[t252+30](WBits_data)
 #                     3572:       header_window_size = (1 << WBits_data) - 16
 t2 = 1 << H[t252+30](WBits_data)
 t1 = t2 - 16
 H[t252+116](header_window_size) = t1
 #                     3573:       if output_window != NONE:
 t1 = H[t252+117](output_window) != 4294967295
 ifN t1 goto else_2075
 #                     3574:         free_pM(output_window)
 t1 = H[t252+117](output_window) & 2147483647
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 226
   # push arguments:
   H[t0+6]() = t1
   t0 = t0 + 5
   goto addr_free_pM
  :return_id_226:
 t2 = t1
 
 goto endif_2076
:else_2075:
:endif_2076:
 #                     3575:       output_window = alloc_pM(header_window_size)  # @TODO: maybe init with 0
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 227
   # push arguments:
   H[t0+6]() = H[t252+116](header_window_size)
   t0 = t0 + 5
   goto addr_alloc_pM
  :return_id_227:
 
 t1 = t1 | 2147483648
 H[t252+117](output_window) = t1
 #                     3576:       output_window_pointer = 0
 H[t252+118](output_window_pointer) = 0
 #                     3577:       state = HeaderEnd
 H[t252+165](state) = H[t252+31](HeaderEnd)
 goto endif_2073
:else_2072:
 #                     3578:     elif state == HeaderEnd:
 t1 = H[t252+165](state) == H[t252+31](HeaderEnd)
 ifN t1 goto else_2078
 #                     3579:       state = HeaderMetaBlockBegin
 H[t252+165](state) = H[t252+32](HeaderMetaBlockBegin)
 goto endif_2079
:else_2078:
 #                     3580:     elif state == HeaderMetaBlockBegin:
 t1 = H[t252+165](state) == H[t252+32](HeaderMetaBlockBegin)
 ifN t1 goto else_2081
 #                     3581:       meta_block_header_is_last = NONE
 H[t252+124](meta_block_header_is_last) = 4294967295
 #                     3582:       meta_block_header_is_last_empty = NONE
 H[t252+125](meta_block_header_is_last_empty) = 4294967295
 #                     3583:       meta_block_header_m_nibbles = NONE
 H[t252+126](meta_block_header_m_nibbles) = 4294967295
 #                     3584:       meta_block_header_m_skip_bytes = NONE
 H[t252+127](meta_block_header_m_skip_bytes) = 4294967295
 #                     3585:       meta_block_header_m_skip_len = NONE
 H[t252+128](meta_block_header_m_skip_len) = 4294967295
 #                     3586:       meta_block_header_m_len = NONE
 H[t252+129](meta_block_header_m_len) = 4294967295
 #                     3587:       meta_block_header_is_uncompressed = NONE
 H[t252+130](meta_block_header_is_uncompressed) = 4294967295
 #                     3588:       meta_block_header_n_bltypes_l = NONE
 H[t252+131](meta_block_header_n_bltypes_l) = 4294967295
 #                     3589:       meta_block_header_n_bltypes_i = NONE
 H[t252+132](meta_block_header_n_bltypes_i) = 4294967295
 #                     3590:       meta_block_header_n_bltypes_d = NONE
 H[t252+133](meta_block_header_n_bltypes_d) = 4294967295
 #                     3591:       meta_block_header_n_postfix = NONE
 H[t252+134](meta_block_header_n_postfix) = 4294967295
 #                     3592:       meta_block_header_n_direct = NONE
 H[t252+135](meta_block_header_n_direct) = 4294967295
 #                     3593:       meta_block_header_n_trees_l = NONE
 H[t252+136](meta_block_header_n_trees_l) = 4294967295
 #                     3594:       meta_block_header_n_trees_d = NONE
 H[t252+137](meta_block_header_n_trees_d) = 4294967295
 #                     3595:       if meta_block_header_c_map_l != NONE:
 t1 = H[t252+138](meta_block_header_c_map_l) != 4294967295
 ifN t1 goto else_2084
 #                     3596:         free_pM(meta_block_header_c_map_l)
 t1 = H[t252+138](meta_block_header_c_map_l) & 2147483647
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 228
   # push arguments:
   H[t0+6]() = t1
   t0 = t0 + 5
   goto addr_free_pM
  :return_id_228:
 t2 = t1
 
 goto endif_2085
:else_2084:
:endif_2085:
 #                     3597:       meta_block_header_c_map_l = NONE
 H[t252+138](meta_block_header_c_map_l) = 4294967295
 #                     3598:       if meta_block_header_c_map_d != NONE:
 t1 = H[t252+139](meta_block_header_c_map_d) != 4294967295
 ifN t1 goto else_2087
 #                     3599:         free_pM(meta_block_header_c_map_d)
 t1 = H[t252+139](meta_block_header_c_map_d) & 2147483647
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 229
   # push arguments:
   H[t0+6]() = t1
   t0 = t0 + 5
   goto addr_free_pM
  :return_id_229:
 t2 = t1
 
 goto endif_2088
:else_2087:
:endif_2088:
 #                     3600:       meta_block_header_c_map_d = NONE
 H[t252+139](meta_block_header_c_map_d) = 4294967295
 #                     3601:       if meta_block_prefix_tree_block_types_literals != NONE:
 t1 = H[t252+140](meta_block_prefix_tree_block_types_literals) != 4294967295
 ifN t1 goto else_2090
 #                     3602:         free_pH(array_pH(meta_block_prefix_tree_block_types_literals[0]))
 t1 = H[t252+140](meta_block_prefix_tree_block_types_literals) >> 31
 if t1 goto isM_2092
 t1 = H[t252+140](meta_block_prefix_tree_block_types_literals) + 0
 t1 = H[t1]()
 goto MorHdone_2093
:isM_2092:
 t1 = H[t252+140](meta_block_prefix_tree_block_types_literals) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
:MorHdone_2093:
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 230
   # push arguments:
   H[t0+6]() = t1
   t0 = t0 + 5
   goto addr_free_pH
  :return_id_230:
 t2 = t1
 
 #                     3603:         free_pH(meta_block_prefix_tree_block_types_literals)
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 231
   # push arguments:
   H[t0+6]() = H[t252+140](meta_block_prefix_tree_block_types_literals)
   t0 = t0 + 5
   goto addr_free_pH
  :return_id_231:
 
 goto endif_2091
:else_2090:
:endif_2091:
 #                     3604:       meta_block_prefix_tree_block_types_literals = NONE
 H[t252+140](meta_block_prefix_tree_block_types_literals) = 4294967295
 #                     3605:       if meta_block_prefix_tree_block_counts_literals != NONE:
 t1 = H[t252+141](meta_block_prefix_tree_block_counts_literals) != 4294967295
 ifN t1 goto else_2095
 #                     3606:         free_pH(array_pH(meta_block_prefix_tree_block_counts_literals[0]))
 t1 = H[t252+141](meta_block_prefix_tree_block_counts_literals) >> 31
 if t1 goto isM_2097
 t1 = H[t252+141](meta_block_prefix_tree_block_counts_literals) + 0
 t1 = H[t1]()
 goto MorHdone_2098
:isM_2097:
 t1 = H[t252+141](meta_block_prefix_tree_block_counts_literals) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
:MorHdone_2098:
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 232
   # push arguments:
   H[t0+6]() = t1
   t0 = t0 + 5
   goto addr_free_pH
  :return_id_232:
 t2 = t1
 
 #                     3607:         free_pH(meta_block_prefix_tree_block_counts_literals)
 
    H[t0+4]() = t0
   # saved bsp, return id:
   H[t0+5]() = 233
   # push arguments:
   H[t0+6]() = H[t252+141](meta_block_prefix_tree_block_counts_literals)
   t0 = t0 + 5
   goto addr_free_pH
  :return_id_233:
 
 goto endif_2096
:else_2095:
:endif_2096:
 #                     3608:       meta_block_prefix_tree_block_counts_literals = NONE
 H[t252+141](meta_block_prefix_tree_block_counts_literals) = 4294967295
 #                     3609:       if meta_block_prefix_trees_literals != NONE:
 t1 = H[t252+142](meta_block_prefix_trees_literals) != 4294967295
 ifN t1 goto else_2100
 #                     3610:         i = 0
 H[t0+2](i) = 0
 #                     3611:         while i < len_pH(meta_block_prefix_trees_literals):
:while_2102:
 t2 = H[t252+142](meta_block_prefix_trees_literals)
 t2 = t2 - 2
 t1 = H[t0+2](i) < H[t2]()
 ifN t1 goto whileend_2104
 #                     3612:           innertree = array_pH(meta_block_prefix_trees_literals[i])
 t1 = H[t252+142](meta_block_prefix_trees_literals) >> 31
 if t1 goto isM_2106
 t1 = H[t252+142](meta_block_prefix_trees_literals) + H[t0+2](i)
 t1 = H[t1]()
 goto MorHdone_2107
:isM_2106:
 t1 = H[t252+142](meta_block_prefix_trees_literals) & 2147483647
 t1 = t1 + H[t0+2](i)
 t1 = M[t1]
:MorHdone_2107:
 H[t0+4](innertree) = t1
 #                     3613:           free_pH(array_pH(innertree[0]))  # free tree's buffer
 t1 = H[t0+4](innertree) + 0
 t1 = H[t1]()
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 234
   # push arguments:
   H[t0+7]() = t1
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_234:
 t2 = t1
 
 #                     3614:           free_pH(innertree)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 235
   # push arguments:
   H[t0+7]() = H[t0+4](innertree)
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_235:
 
 #                     3615:           i += 1
 H[t0+2](i) = H[t0+2](i) + 1
 goto while_2102
:whileend_2104:
 #                     3616:         free_pH(meta_block_prefix_trees_literals)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 236
   # push arguments:
   H[t0+7]() = H[t252+142](meta_block_prefix_trees_literals)
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_236:
 
 goto endif_2101
:else_2100:
:endif_2101:
 #                     3617:       meta_block_prefix_trees_literals = NONE
 H[t252+142](meta_block_prefix_trees_literals) = 4294967295
 #                     3618:       meta_block_count_output = 0
 H[t252+143](meta_block_count_output) = 0
 #                     3619:       meta_block_btype_l = 0
 H[t252+144](meta_block_btype_l) = 0
 #                     3620:       meta_block_btype_l_prev = 1
 H[t252+145](meta_block_btype_l_prev) = 1
 #                     3621:       meta_block_blen_l = NONE
 H[t252+146](meta_block_blen_l) = 4294967295
 #                     3622:       meta_block_blen_i = NONE
 H[t252+147](meta_block_blen_i) = 4294967295
 #                     3623:       meta_block_blen_d = NONE
 H[t252+148](meta_block_blen_d) = 4294967295
 #                     3624:       meta_block_btype_i = 0
 H[t252+149](meta_block_btype_i) = 0
 #                     3625:       meta_block_btype_i_prev = 1
 H[t252+150](meta_block_btype_i_prev) = 1
 #                     3626:       meta_block_btype_d = 0
 H[t252+151](meta_block_btype_d) = 0
 #                     3627:       meta_block_btype_d_prev = 1
 H[t252+152](meta_block_btype_d_prev) = 1
 #                     3628:       if meta_block_prefix_tree_block_types_insert_and_copy_lengths != NONE:
 t1 = H[t252+153](meta_block_prefix_tree_block_types_insert_and_copy_lengths) != 4294967295
 ifN t1 goto else_2109
 #                     3629:         free_pH(array_pH(meta_block_prefix_tree_block_types_insert_and_copy_lengths[0]))
 t1 = H[t252+153](meta_block_prefix_tree_block_types_insert_and_copy_lengths) >> 31
 if t1 goto isM_2111
 t1 = H[t252+153](meta_block_prefix_tree_block_types_insert_and_copy_lengths) + 0
 t1 = H[t1]()
 goto MorHdone_2112
:isM_2111:
 t1 = H[t252+153](meta_block_prefix_tree_block_types_insert_and_copy_lengths) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
:MorHdone_2112:
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 237
   # push arguments:
   H[t0+7]() = t1
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_237:
 t2 = t1
 
 #                     3630:         free_pH(meta_block_prefix_tree_block_types_insert_and_copy_lengths)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 238
   # push arguments:
   H[t0+7]() = H[t252+153](meta_block_prefix_tree_block_types_insert_and_copy_lengths)
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_238:
 
 goto endif_2110
:else_2109:
:endif_2110:
 #                     3631:       meta_block_prefix_tree_block_types_insert_and_copy_lengths = NONE
 H[t252+153](meta_block_prefix_tree_block_types_insert_and_copy_lengths) = 4294967295
 #                     3632:       if meta_block_prefix_tree_block_counts_insert_and_copy_lengths != NONE:
 t1 = H[t252+154](meta_block_prefix_tree_block_counts_insert_and_copy_lengths) != 4294967295
 ifN t1 goto else_2114
 #                     3633:         free_pH(array_pH(meta_block_prefix_tree_block_counts_insert_and_copy_lengths[0]))
 t1 = H[t252+154](meta_block_prefix_tree_block_counts_insert_and_copy_lengths) >> 31
 if t1 goto isM_2116
 t1 = H[t252+154](meta_block_prefix_tree_block_counts_insert_and_copy_lengths) + 0
 t1 = H[t1]()
 goto MorHdone_2117
:isM_2116:
 t1 = H[t252+154](meta_block_prefix_tree_block_counts_insert_and_copy_lengths) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
:MorHdone_2117:
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 239
   # push arguments:
   H[t0+7]() = t1
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_239:
 t2 = t1
 
 #                     3634:         free_pH(meta_block_prefix_tree_block_counts_insert_and_copy_lengths)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 240
   # push arguments:
   H[t0+7]() = H[t252+154](meta_block_prefix_tree_block_counts_insert_and_copy_lengths)
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_240:
 
 goto endif_2115
:else_2114:
:endif_2115:
 #                     3635:       meta_block_prefix_tree_block_counts_insert_and_copy_lengths = NONE
 H[t252+154](meta_block_prefix_tree_block_counts_insert_and_copy_lengths) = 4294967295
 #                     3636:       if meta_block_prefix_tree_block_types_distances != NONE:
 t1 = H[t252+155](meta_block_prefix_tree_block_types_distances) != 4294967295
 ifN t1 goto else_2119
 #                     3637:         free_pH(array_pH(meta_block_prefix_tree_block_types_distances[0]))
 t1 = H[t252+155](meta_block_prefix_tree_block_types_distances) >> 31
 if t1 goto isM_2121
 t1 = H[t252+155](meta_block_prefix_tree_block_types_distances) + 0
 t1 = H[t1]()
 goto MorHdone_2122
:isM_2121:
 t1 = H[t252+155](meta_block_prefix_tree_block_types_distances) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
:MorHdone_2122:
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 241
   # push arguments:
   H[t0+7]() = t1
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_241:
 t2 = t1
 
 #                     3638:         free_pH(meta_block_prefix_tree_block_types_distances)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 242
   # push arguments:
   H[t0+7]() = H[t252+155](meta_block_prefix_tree_block_types_distances)
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_242:
 
 goto endif_2120
:else_2119:
:endif_2120:
 #                     3639:       meta_block_prefix_tree_block_types_distances = NONE
 H[t252+155](meta_block_prefix_tree_block_types_distances) = 4294967295
 #                     3640:       if meta_block_prefix_tree_block_counts_distances != NONE:
 t1 = H[t252+156](meta_block_prefix_tree_block_counts_distances) != 4294967295
 ifN t1 goto else_2124
 #                     3641:         free_pH(array_pH(meta_block_prefix_tree_block_counts_distances[0]))
 t1 = H[t252+156](meta_block_prefix_tree_block_counts_distances) >> 31
 if t1 goto isM_2126
 t1 = H[t252+156](meta_block_prefix_tree_block_counts_distances) + 0
 t1 = H[t1]()
 goto MorHdone_2127
:isM_2126:
 t1 = H[t252+156](meta_block_prefix_tree_block_counts_distances) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
:MorHdone_2127:
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 243
   # push arguments:
   H[t0+7]() = t1
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_243:
 t2 = t1
 
 #                     3642:         free_pH(meta_block_prefix_tree_block_counts_distances)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 244
   # push arguments:
   H[t0+7]() = H[t252+156](meta_block_prefix_tree_block_counts_distances)
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_244:
 
 goto endif_2125
:else_2124:
:endif_2125:
 #                     3643:       meta_block_prefix_tree_block_counts_distances = NONE
 H[t252+156](meta_block_prefix_tree_block_counts_distances) = 4294967295
 #                     3644:       if meta_block_prefix_trees_insert_and_copy_lengths != NONE:
 t1 = H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths) != 4294967295
 ifN t1 goto else_2129
 #                     3645:         i = 0
 H[t0+2](i) = 0
 #                     3646:         while i < len_pH(meta_block_prefix_trees_insert_and_copy_lengths):
:while_2131:
 t2 = H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths)
 t2 = t2 - 2
 t1 = H[t0+2](i) < H[t2]()
 ifN t1 goto whileend_2133
 #                     3647:           innertree = array_pH(meta_block_prefix_trees_insert_and_copy_lengths[i])
 t1 = H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths) >> 31
 if t1 goto isM_2135
 t1 = H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths) + H[t0+2](i)
 t1 = H[t1]()
 goto MorHdone_2136
:isM_2135:
 t1 = H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths) & 2147483647
 t1 = t1 + H[t0+2](i)
 t1 = M[t1]
:MorHdone_2136:
 H[t0+4](innertree) = t1
 #                     3648:           free_pH(array_pH(innertree[0]))  # free tree's buffer
 t1 = H[t0+4](innertree) + 0
 t1 = H[t1]()
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 245
   # push arguments:
   H[t0+7]() = t1
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_245:
 t2 = t1
 
 #                     3649:           free_pH(innertree)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 246
   # push arguments:
   H[t0+7]() = H[t0+4](innertree)
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_246:
 
 #                     3650:           i += 1
 H[t0+2](i) = H[t0+2](i) + 1
 goto while_2131
:whileend_2133:
 #                     3651:         free_pH(meta_block_prefix_trees_insert_and_copy_lengths)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 247
   # push arguments:
   H[t0+7]() = H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths)
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_247:
 
 goto endif_2130
:else_2129:
:endif_2130:
 #                     3652:       meta_block_prefix_trees_insert_and_copy_lengths = NONE
 H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths) = 4294967295
 #                     3653:       if meta_block_prefix_trees_distances != NONE:
 t1 = H[t252+158](meta_block_prefix_trees_distances) != 4294967295
 ifN t1 goto else_2138
 #                     3654:         i = 0
 H[t0+2](i) = 0
 #                     3655:         while i < len_pH(meta_block_prefix_trees_distances):
:while_2140:
 t2 = H[t252+158](meta_block_prefix_trees_distances)
 t2 = t2 - 2
 t1 = H[t0+2](i) < H[t2]()
 ifN t1 goto whileend_2142
 #                     3656:           innertree = array_pH(meta_block_prefix_trees_distances[i])
 t1 = H[t252+158](meta_block_prefix_trees_distances) >> 31
 if t1 goto isM_2144
 t1 = H[t252+158](meta_block_prefix_trees_distances) + H[t0+2](i)
 t1 = H[t1]()
 goto MorHdone_2145
:isM_2144:
 t1 = H[t252+158](meta_block_prefix_trees_distances) & 2147483647
 t1 = t1 + H[t0+2](i)
 t1 = M[t1]
:MorHdone_2145:
 H[t0+4](innertree) = t1
 #                     3657:           free_pH(array_pH(innertree[0]))  # free tree's buffer
 t1 = H[t0+4](innertree) + 0
 t1 = H[t1]()
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 248
   # push arguments:
   H[t0+7]() = t1
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_248:
 t2 = t1
 
 #                     3658:           free_pH(innertree)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 249
   # push arguments:
   H[t0+7]() = H[t0+4](innertree)
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_249:
 
 #                     3659:           i += 1
 H[t0+2](i) = H[t0+2](i) + 1
 goto while_2140
:whileend_2142:
 #                     3660:         free_pH(meta_block_prefix_trees_distances)
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 250
   # push arguments:
   H[t0+7]() = H[t252+158](meta_block_prefix_trees_distances)
   t0 = t0 + 6
   goto addr_free_pH
  :return_id_250:
 
 goto endif_2139
:else_2138:
:endif_2139:
 #                     3661:       meta_block_prefix_trees_distances = NONE
 H[t252+158](meta_block_prefix_trees_distances) = 4294967295
 #                     3662:       if meta_block_context_modes_literals != NONE:
 t1 = H[t252+159](meta_block_context_modes_literals) != 4294967295
 ifN t1 goto else_2147
 #                     3663:         free_pM(meta_block_context_modes_literals)
 t1 = H[t252+159](meta_block_context_modes_literals) & 2147483647
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 251
   # push arguments:
   H[t0+7]() = t1
   t0 = t0 + 6
   goto addr_free_pM
  :return_id_251:
 t2 = t1
 
 goto endif_2148
:else_2147:
:endif_2148:
 #                     3664:       meta_block_context_modes_literals = NONE
 H[t252+159](meta_block_context_modes_literals) = 4294967295
 #                     3665:       meta_block_insert_and_copy_length = NONE
 H[t252+160](meta_block_insert_and_copy_length) = 4294967295
 #                     3666:       meta_block_copy_length = NONE
 H[t252+161](meta_block_copy_length) = 4294967295
 #                     3667:       meta_block_insert_length = NONE
 H[t252+162](meta_block_insert_length) = 4294967295
 #                     3668:       meta_block_distance = NONE
 H[t252+163](meta_block_distance) = 4294967295
 #                     3669:       meta_block_distance_code = NONE
 H[t252+164](meta_block_distance_code) = 4294967295
 #                     3670:       state = parse_is_last()
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 252
   # push arguments:
   t0 = t0 + 6
   goto parse_is_last
  :return_id_252:
 
 H[t252+165](state) = t1
 goto endif_2082
:else_2081:
 #                     3671:     elif state == IsLast and IsLast_data == 1:
 t2 = H[t252+165](state) == H[t252+33](IsLast)
 t3 = H[t252+34](IsLast_data) == 1
 t1 = t2 and t3
 ifN t1 goto else_2151
 #                     3672:       meta_block_header_is_last = 1
 H[t252+124](meta_block_header_is_last) = 1
 #                     3673:       state = parse_is_last_empty()
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 253
   # push arguments:
   t0 = t0 + 6
   goto parse_is_last_empty
  :return_id_253:
 
 H[t252+165](state) = t1
 goto endif_2152
:else_2151:
 #                     3674:     elif state == IsLast and IsLast_data == 0:
 t2 = H[t252+165](state) == H[t252+33](IsLast)
 t3 = H[t252+34](IsLast_data) == 0
 t1 = t2 and t3
 ifN t1 goto else_2155
 #                     3675:       meta_block_header_is_last = 0
 H[t252+124](meta_block_header_is_last) = 0
 #                     3676:       state = parse_m_nibbles()
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 254
   # push arguments:
   t0 = t0 + 6
   goto parse_m_nibbles
  :return_id_254:
 
 H[t252+165](state) = t1
 goto endif_2156
:else_2155:
 #                     3677:     elif state == IsLastEmpty and IsLastEmpty_data == 1:
 t2 = H[t252+165](state) == H[t252+35](IsLastEmpty)
 t3 = H[t252+36](IsLastEmpty_data) == 1
 t1 = t2 and t3
 ifN t1 goto else_2159
 #                     3678:       meta_block_header_is_last_empty = 1
 H[t252+125](meta_block_header_is_last_empty) = 1
 #                     3679:       state = StreamEnd
 H[t252+165](state) = H[t252+109](StreamEnd)
 goto endif_2160
:else_2159:
 #                     3680:     elif state == IsLastEmpty and IsLastEmpty_data == 0:
 t2 = H[t252+165](state) == H[t252+35](IsLastEmpty)
 t3 = H[t252+36](IsLastEmpty_data) == 0
 t1 = t2 and t3
 ifN t1 goto else_2163
 #                     3681:       meta_block_header_is_last_empty = 0
 H[t252+125](meta_block_header_is_last_empty) = 0
 #                     3682:       state = parse_m_nibbles()
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 255
   # push arguments:
   t0 = t0 + 6
   goto parse_m_nibbles
  :return_id_255:
 
 H[t252+165](state) = t1
 goto endif_2164
:else_2163:
 #                     3683:     elif state == MNibbles and MNibbles_data == 0:
 t2 = H[t252+165](state) == H[t252+37](MNibbles)
 t3 = H[t252+38](MNibbles_data) == 0
 t1 = t2 and t3
 ifN t1 goto else_2167
 #                     3684:       if read_bit():
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 256
   # push arguments:
   t0 = t0 + 6
   goto read_bit
  :return_id_256:
 
 ifN t1 goto else_2169
 #                     3685:         error() # eof
 error
 goto endif_2170
:else_2169:
:endif_2170:
 #                     3686:       if read_bit_result:
 ifN H[t252+6](read_bit_result) goto else_2171
 #                     3687:         error() # NonZeroReservedBit
 error
 #                     3688:         return
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_2172
:else_2171:
:endif_2172:
 #                     3689:       meta_block_header_m_nibbles = 0
 H[t252+126](meta_block_header_m_nibbles) = 0
 #                     3690:       state = parse_m_skip_bytes()
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 257
   # push arguments:
   t0 = t0 + 6
   goto parse_m_skip_bytes
  :return_id_257:
 
 H[t252+165](state) = t1
 goto endif_2168
:else_2167:
 #                     3691:     elif state == MNibbles:
 t1 = H[t252+165](state) == H[t252+37](MNibbles)
 ifN t1 goto else_2174
 #                     3692:       meta_block_header_m_nibbles = MNibbles_data
 H[t252+126](meta_block_header_m_nibbles) = H[t252+38](MNibbles_data)
 #                     3693:       state = parse_m_len()
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 258
   # push arguments:
   t0 = t0 + 6
   goto parse_m_len
  :return_id_258:
 
 H[t252+165](state) = t1
 goto endif_2175
:else_2174:
 #                     3694:     elif state == MSkipBytes and MSkipBytes_data == 0:
 t2 = H[t252+165](state) == H[t252+39](MSkipBytes)
 t3 = H[t252+40](MSkipBytes_data) == 0
 t1 = t2 and t3
 ifN t1 goto else_2178
 #                     3695:       meta_block_header_m_skip_bytes = 0
 H[t252+127](meta_block_header_m_skip_bytes) = 0
 #                     3696:       if read_u8_from_byte_tail() != 0:
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 259
   # push arguments:
   t0 = t0 + 7
   goto read_u8_from_byte_tail
  :return_id_259:
 t2 = t1
 
 t1 = t2 != 0
 ifN t1 goto else_2181
 #                     3697:         error() # NonZeroFillBit
 error
 #                     3698:         return
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_2182
:else_2181:
:endif_2182:
 #                     3699:       state = MetaBlockEnd
 H[t252+165](state) = H[t252+108](MetaBlockEnd)
 goto endif_2179
:else_2178:
 #                     3700:     elif state == MSkipBytes:
 t1 = H[t252+165](state) == H[t252+39](MSkipBytes)
 ifN t1 goto else_2184
 #                     3701:       meta_block_header_m_skip_bytes = MSkipBytes_data
 H[t252+127](meta_block_header_m_skip_bytes) = H[t252+40](MSkipBytes_data)
 #                     3702:       state = parse_m_skip_len()
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 260
   # push arguments:
   t0 = t0 + 6
   goto parse_m_skip_len
  :return_id_260:
 
 H[t252+165](state) = t1
 goto endif_2185
:else_2184:
 #                     3703:     elif state == MSkipLen:
 t1 = H[t252+165](state) == H[t252+41](MSkipLen)
 ifN t1 goto else_2187
 #                     3704:       meta_block_header_m_skip_len = MSkipLen_data
 H[t252+128](meta_block_header_m_skip_len) = H[t252+42](MSkipLen_data)
 #                     3705:       if read_u8_from_byte_tail() != 0:
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 261
   # push arguments:
   t0 = t0 + 7
   goto read_u8_from_byte_tail
  :return_id_261:
 t2 = t1
 
 t1 = t2 != 0
 ifN t1 goto else_2190
 #                     3706:         error() # NonZeroFillBit
 error
 #                     3707:         return
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_2191
:else_2190:
:endif_2191:
 #                     3708:       free_pM(read_fixed_length_string(MSkipLen_data))
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 262
   # push arguments:
   H[t0+8]() = H[t252+42](MSkipLen_data)
   t0 = t0 + 7
   goto read_fixed_length_string
  :return_id_262:
 t2 = t1
 
 t1 = t2 & 2147483647
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 263
   # push arguments:
   H[t0+7]() = t1
   t0 = t0 + 6
   goto addr_free_pM
  :return_id_263:
 t2 = t1
 
 #                     3709:       state = MetaBlockEnd
 H[t252+165](state) = H[t252+108](MetaBlockEnd)
 goto endif_2188
:else_2187:
 #                     3710:     elif state == MLen:
 t1 = H[t252+165](state) == H[t252+43](MLen)
 ifN t1 goto else_2193
 #                     3711:       meta_block_header_m_len = MLen_data
 H[t252+129](meta_block_header_m_len) = H[t252+44](MLen_data)
 #                     3712:       if meta_block_header_is_last:
 ifN H[t252+124](meta_block_header_is_last) goto else_2195
 #                     3713:         state = parse_n_bltypes_l()
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 264
   # push arguments:
   t0 = t0 + 6
   goto parse_n_bltypes_l
  :return_id_264:
 
 H[t252+165](state) = t1
 goto endif_2196
:else_2195:
 #                     3715:         state = parse_is_uncompressed()
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 265
   # push arguments:
   t0 = t0 + 6
   goto parse_is_uncompressed
  :return_id_265:
 
 H[t252+165](state) = t1
:endif_2196:
 goto endif_2194
:else_2193:
 #                     3716:     elif state == IsUncompressed and IsUncompressed_data == 1:
 t2 = H[t252+165](state) == H[t252+45](IsUncompressed)
 t3 = H[t252+46](IsUncompressed_data) == 1
 t1 = t2 and t3
 ifN t1 goto else_2199
 #                     3717:       meta_block_header_is_uncompressed = 1
 H[t252+130](meta_block_header_is_uncompressed) = 1
 #                     3718:       if read_u8_from_byte_tail() != 0:
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 266
   # push arguments:
   t0 = t0 + 7
   goto read_u8_from_byte_tail
  :return_id_266:
 t2 = t1
 
 t1 = t2 != 0
 ifN t1 goto else_2202
 #                     3719:         error() # NonZeroFillBit
 error
 goto endif_2203
:else_2202:
:endif_2203:
 #                     3720:       state = parse_mlen_literals()
 
    H[t0+5]() = t0
   # saved bsp, return id:
   H[t0+6]() = 267
   # push arguments:
   t0 = t0 + 6
   goto parse_mlen_literals
  :return_id_267:
 
 H[t252+165](state) = t1
 goto endif_2200
:else_2199:
 #                     3721:     elif state == MLenLiterals:
 t1 = H[t252+165](state) == H[t252+47](MLenLiterals)
 ifN t1 goto else_2205
 #                     3722:       i = 0
 H[t0+2](i) = 0
 #                     3723:       while i < len_pM(MLenLiterals_data):
:while_2207:
 t2 = H[t252+48](MLenLiterals_data)
 t2 = t2 & 2147483647
 t2 = t2 - 5
 t3 = M[t2] << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t3 = t3 << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t3 = t3 << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t1 = H[t0+2](i) < t3
 ifN t1 goto whileend_2209
 #                     3724:         literal = MLenLiterals_data[i]
 t1 = H[t252+48](MLenLiterals_data) >> 31
 if t1 goto isM_2211
 t1 = H[t252+48](MLenLiterals_data) + H[t0+2](i)
 t1 = H[t1]()
 goto MorHdone_2212
:isM_2211:
 t1 = H[t252+48](MLenLiterals_data) & 2147483647
 t1 = t1 + H[t0+2](i)
 t1 = M[t1]
:MorHdone_2212:
 H[t0+5](literal) = t1
 #                     3725:         out(literal)
 out H[t0+5](literal)
 #                     3726:         output_window_pointer = (output_window_pointer + 1) % len_pM(output_window)
 t2 = H[t252+118](output_window_pointer) + 1
 t3 = H[t252+117](output_window)
 t3 = t3 & 2147483647
 t3 = t3 - 5
 t4 = M[t3] << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t4 = t4 << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t4 = t4 << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t1 = t2 % t4
 H[t252+118](output_window_pointer) = t1
 #                     3727:         output_window[output_window_pointer] = literal
 t1 = H[t252+117](output_window) & 2147483647
 t1 = t1 + H[t252+118](output_window_pointer)
 M[t1] = H[t0+5](literal)
 #                     3728:         literal_buf_pointer = (literal_buf_pointer + 1) % 2
 t2 = H[t252+123](literal_buf_pointer) + 1
 t1 = t2 % 2
 H[t252+123](literal_buf_pointer) = t1
 #                     3729:         literal_buf[literal_buf_pointer] = literal
 t1 = H[t252+122](literal_buf) & 2147483647
 t1 = t1 + H[t252+123](literal_buf_pointer)
 M[t1] = H[t0+5](literal)
 #                     3730:         count_output += 1
 H[t252+119](count_output) = H[t252+119](count_output) + 1
 #                     3731:         i += 1
 H[t0+2](i) = H[t0+2](i) + 1
 goto while_2207
:whileend_2209:
 #                     3732:       free_pM(MLenLiterals_data)
 t1 = H[t252+48](MLenLiterals_data) & 2147483647
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 268
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_free_pM
  :return_id_268:
 t2 = t1
 
 #                     3733:       state = MetaBlockEnd
 H[t252+165](state) = H[t252+108](MetaBlockEnd)
 goto endif_2206
:else_2205:
 #                     3734:     elif state == IsUncompressed and IsUncompressed_data == 0:
 t2 = H[t252+165](state) == H[t252+45](IsUncompressed)
 t3 = H[t252+46](IsUncompressed_data) == 0
 t1 = t2 and t3
 ifN t1 goto else_2215
 #                     3735:       meta_block_header_is_uncompressed = 0
 H[t252+130](meta_block_header_is_uncompressed) = 0
 #                     3736:       state = parse_n_bltypes_l()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 269
   # push arguments:
   t0 = t0 + 7
   goto parse_n_bltypes_l
  :return_id_269:
 
 H[t252+165](state) = t1
 goto endif_2216
:else_2215:
 #                     3737:     elif state == NBltypesL:
 t1 = H[t252+165](state) == H[t252+49](NBltypesL)
 ifN t1 goto else_2218
 #                     3738:       meta_block_header_n_bltypes_l = NBltypesL_data
 H[t252+131](meta_block_header_n_bltypes_l) = H[t252+50](NBltypesL_data)
 #                     3739:       if NBltypesL_data >= 2:
 t1 = H[t252+50](NBltypesL_data) >= 2
 ifN t1 goto else_2221
 #                     3740:         state = parse_prefix_code_block_types_literals()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 270
   # push arguments:
   t0 = t0 + 7
   goto parse_prefix_code_block_types_literals
  :return_id_270:
 
 H[t252+165](state) = t1
 goto endif_2222
:else_2221:
 #                     3742:         state = parse_n_bltypes_i()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 271
   # push arguments:
   t0 = t0 + 7
   goto parse_n_bltypes_i
  :return_id_271:
 
 H[t252+165](state) = t1
:endif_2222:
 goto endif_2219
:else_2218:
 #                     3743:     elif state == PrefixCodeBlockTypesLiterals:
 t1 = H[t252+165](state) == H[t252+51](PrefixCodeBlockTypesLiterals)
 ifN t1 goto else_2224
 #                     3744:       if meta_block_prefix_tree_block_types_literals != NONE:
 t1 = H[t252+140](meta_block_prefix_tree_block_types_literals) != 4294967295
 ifN t1 goto else_2227
 #                     3745:         free_pH(array_pH(meta_block_prefix_tree_block_types_literals[0]))
 t1 = H[t252+140](meta_block_prefix_tree_block_types_literals) >> 31
 if t1 goto isM_2229
 t1 = H[t252+140](meta_block_prefix_tree_block_types_literals) + 0
 t1 = H[t1]()
 goto MorHdone_2230
:isM_2229:
 t1 = H[t252+140](meta_block_prefix_tree_block_types_literals) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
:MorHdone_2230:
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 272
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_272:
 t2 = t1
 
 #                     3746:         free_pH(meta_block_prefix_tree_block_types_literals)
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 273
   # push arguments:
   H[t0+8]() = H[t252+140](meta_block_prefix_tree_block_types_literals)
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_273:
 
 goto endif_2228
:else_2227:
:endif_2228:
 #                     3747:       meta_block_prefix_tree_block_types_literals = PrefixCodeBlockTypesLiterals_data
 H[t252+140](meta_block_prefix_tree_block_types_literals) = H[t252+52](PrefixCodeBlockTypesLiterals_data)
 #                     3748:       state = parse_prefix_code_block_counts_literals()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 274
   # push arguments:
   t0 = t0 + 7
   goto parse_prefix_code_block_counts_literals
  :return_id_274:
 
 H[t252+165](state) = t1
 goto endif_2225
:else_2224:
 #                     3749:     elif state == PrefixCodeBlockCountsLiterals:
 t1 = H[t252+165](state) == H[t252+53](PrefixCodeBlockCountsLiterals)
 ifN t1 goto else_2232
 #                     3750:       if meta_block_prefix_tree_block_counts_literals != NONE:
 t1 = H[t252+141](meta_block_prefix_tree_block_counts_literals) != 4294967295
 ifN t1 goto else_2235
 #                     3751:         free_pH(array_pH(meta_block_prefix_tree_block_counts_literals[0]))
 t1 = H[t252+141](meta_block_prefix_tree_block_counts_literals) >> 31
 if t1 goto isM_2237
 t1 = H[t252+141](meta_block_prefix_tree_block_counts_literals) + 0
 t1 = H[t1]()
 goto MorHdone_2238
:isM_2237:
 t1 = H[t252+141](meta_block_prefix_tree_block_counts_literals) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
:MorHdone_2238:
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 275
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_275:
 t2 = t1
 
 #                     3752:         free_pH(meta_block_prefix_tree_block_counts_literals)
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 276
   # push arguments:
   H[t0+8]() = H[t252+141](meta_block_prefix_tree_block_counts_literals)
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_276:
 
 goto endif_2236
:else_2235:
:endif_2236:
 #                     3753:       meta_block_prefix_tree_block_counts_literals = PrefixCodeBlockCountsLiterals_data
 H[t252+141](meta_block_prefix_tree_block_counts_literals) = H[t252+54](PrefixCodeBlockCountsLiterals_data)
 #                     3754:       state = parse_first_block_count_literals()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 277
   # push arguments:
   t0 = t0 + 7
   goto parse_first_block_count_literals
  :return_id_277:
 
 H[t252+165](state) = t1
 goto endif_2233
:else_2232:
 #                     3755:     elif state == FirstBlockCountLiterals:
 t1 = H[t252+165](state) == H[t252+55](FirstBlockCountLiterals)
 ifN t1 goto else_2240
 #                     3756:       meta_block_blen_l = FirstBlockCountLiterals_data
 H[t252+146](meta_block_blen_l) = H[t252+56](FirstBlockCountLiterals_data)
 #                     3757:       state = parse_n_bltypes_i()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 278
   # push arguments:
   t0 = t0 + 7
   goto parse_n_bltypes_i
  :return_id_278:
 
 H[t252+165](state) = t1
 goto endif_2241
:else_2240:
 #                     3758:     elif state == NBltypesI:
 t1 = H[t252+165](state) == H[t252+57](NBltypesI)
 ifN t1 goto else_2243
 #                     3759:       meta_block_header_n_bltypes_i = NBltypesI_data
 H[t252+132](meta_block_header_n_bltypes_i) = H[t252+58](NBltypesI_data)
 #                     3760:       if NBltypesI_data >= 2:
 t1 = H[t252+58](NBltypesI_data) >= 2
 ifN t1 goto else_2246
 #                     3761:         state = parse_prefix_code_block_types_insert_and_copy_lengths()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 279
   # push arguments:
   t0 = t0 + 7
   goto parse_prefix_code_block_types_insert_and_copy_lengths
  :return_id_279:
 
 H[t252+165](state) = t1
 goto endif_2247
:else_2246:
 #                     3763:         state = parse_n_bltypes_d()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 280
   # push arguments:
   t0 = t0 + 7
   goto parse_n_bltypes_d
  :return_id_280:
 
 H[t252+165](state) = t1
:endif_2247:
 goto endif_2244
:else_2243:
 #                     3764:     elif state == PrefixCodeBlockTypesInsertAndCopyLengths:
 t1 = H[t252+165](state) == H[t252+59](PrefixCodeBlockTypesInsertAndCopyLengths)
 ifN t1 goto else_2249
 #                     3765:       if meta_block_prefix_tree_block_types_insert_and_copy_lengths != NONE:
 t1 = H[t252+153](meta_block_prefix_tree_block_types_insert_and_copy_lengths) != 4294967295
 ifN t1 goto else_2252
 #                     3766:         free_pH(array_pH(meta_block_prefix_tree_block_types_insert_and_copy_lengths[0]))
 t1 = H[t252+153](meta_block_prefix_tree_block_types_insert_and_copy_lengths) >> 31
 if t1 goto isM_2254
 t1 = H[t252+153](meta_block_prefix_tree_block_types_insert_and_copy_lengths) + 0
 t1 = H[t1]()
 goto MorHdone_2255
:isM_2254:
 t1 = H[t252+153](meta_block_prefix_tree_block_types_insert_and_copy_lengths) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
:MorHdone_2255:
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 281
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_281:
 t2 = t1
 
 #                     3767:         free_pH(meta_block_prefix_tree_block_types_insert_and_copy_lengths)
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 282
   # push arguments:
   H[t0+8]() = H[t252+153](meta_block_prefix_tree_block_types_insert_and_copy_lengths)
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_282:
 
 goto endif_2253
:else_2252:
:endif_2253:
 #                     3768:       meta_block_prefix_tree_block_types_insert_and_copy_lengths = PrefixCodeBlockTypesInsertAndCopyLengths_data
 H[t252+153](meta_block_prefix_tree_block_types_insert_and_copy_lengths) = H[t252+60](PrefixCodeBlockTypesInsertAndCopyLengths_data)
 #                     3769:       state = parse_prefix_code_block_counts_insert_and_copy_lengths()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 283
   # push arguments:
   t0 = t0 + 7
   goto parse_prefix_code_block_counts_insert_and_copy_lengths
  :return_id_283:
 
 H[t252+165](state) = t1
 goto endif_2250
:else_2249:
 #                     3770:     elif state == PrefixCodeBlockCountsInsertAndCopyLengths:
 t1 = H[t252+165](state) == H[t252+61](PrefixCodeBlockCountsInsertAndCopyLengths)
 ifN t1 goto else_2257
 #                     3771:       if meta_block_prefix_tree_block_counts_insert_and_copy_lengths != NONE:
 t1 = H[t252+154](meta_block_prefix_tree_block_counts_insert_and_copy_lengths) != 4294967295
 ifN t1 goto else_2260
 #                     3772:         free_pH(array_pH(meta_block_prefix_tree_block_counts_insert_and_copy_lengths[0]))
 t1 = H[t252+154](meta_block_prefix_tree_block_counts_insert_and_copy_lengths) >> 31
 if t1 goto isM_2262
 t1 = H[t252+154](meta_block_prefix_tree_block_counts_insert_and_copy_lengths) + 0
 t1 = H[t1]()
 goto MorHdone_2263
:isM_2262:
 t1 = H[t252+154](meta_block_prefix_tree_block_counts_insert_and_copy_lengths) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
:MorHdone_2263:
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 284
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_284:
 t2 = t1
 
 #                     3773:         free_pH(meta_block_prefix_tree_block_counts_insert_and_copy_lengths)
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 285
   # push arguments:
   H[t0+8]() = H[t252+154](meta_block_prefix_tree_block_counts_insert_and_copy_lengths)
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_285:
 
 goto endif_2261
:else_2260:
:endif_2261:
 #                     3774:       meta_block_prefix_tree_block_counts_insert_and_copy_lengths = PrefixCodeBlockCountsInsertAndCopyLengths_data
 H[t252+154](meta_block_prefix_tree_block_counts_insert_and_copy_lengths) = H[t252+62](PrefixCodeBlockCountsInsertAndCopyLengths_data)
 #                     3775:       state = parse_first_block_count_insert_and_copy_lengths()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 286
   # push arguments:
   t0 = t0 + 7
   goto parse_first_block_count_insert_and_copy_lengths
  :return_id_286:
 
 H[t252+165](state) = t1
 goto endif_2258
:else_2257:
 #                     3776:     elif state == FirstBlockCountInsertAndCopyLengths:
 t1 = H[t252+165](state) == H[t252+63](FirstBlockCountInsertAndCopyLengths)
 ifN t1 goto else_2265
 #                     3777:       meta_block_blen_i = FirstBlockCountInsertAndCopyLengths_data
 H[t252+147](meta_block_blen_i) = H[t252+64](FirstBlockCountInsertAndCopyLengths_data)
 #                     3778:       state = parse_n_bltypes_d()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 287
   # push arguments:
   t0 = t0 + 7
   goto parse_n_bltypes_d
  :return_id_287:
 
 H[t252+165](state) = t1
 goto endif_2266
:else_2265:
 #                     3779:     elif state == NBltypesD:
 t1 = H[t252+165](state) == H[t252+65](NBltypesD)
 ifN t1 goto else_2268
 #                     3780:       meta_block_header_n_bltypes_d = NBltypesD_data
 H[t252+133](meta_block_header_n_bltypes_d) = H[t252+66](NBltypesD_data)
 #                     3781:       if NBltypesD_data >= 2:
 t1 = H[t252+66](NBltypesD_data) >= 2
 ifN t1 goto else_2271
 #                     3782:         state = parse_prefix_code_block_types_distances()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 288
   # push arguments:
   t0 = t0 + 7
   goto parse_prefix_code_block_types_distances
  :return_id_288:
 
 H[t252+165](state) = t1
 goto endif_2272
:else_2271:
 #                     3784:         state = parse_n_postfix()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 289
   # push arguments:
   t0 = t0 + 7
   goto parse_n_postfix
  :return_id_289:
 
 H[t252+165](state) = t1
:endif_2272:
 goto endif_2269
:else_2268:
 #                     3785:     elif state == PrefixCodeBlockTypesDistances:
 t1 = H[t252+165](state) == H[t252+67](PrefixCodeBlockTypesDistances)
 ifN t1 goto else_2274
 #                     3786:       if meta_block_prefix_tree_block_types_distances != NONE:
 t1 = H[t252+155](meta_block_prefix_tree_block_types_distances) != 4294967295
 ifN t1 goto else_2277
 #                     3787:         free_pH(array_pH(meta_block_prefix_tree_block_types_distances[0]))
 t1 = H[t252+155](meta_block_prefix_tree_block_types_distances) >> 31
 if t1 goto isM_2279
 t1 = H[t252+155](meta_block_prefix_tree_block_types_distances) + 0
 t1 = H[t1]()
 goto MorHdone_2280
:isM_2279:
 t1 = H[t252+155](meta_block_prefix_tree_block_types_distances) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
:MorHdone_2280:
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 290
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_290:
 t2 = t1
 
 #                     3788:         free_pH(meta_block_prefix_tree_block_types_distances)
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 291
   # push arguments:
   H[t0+8]() = H[t252+155](meta_block_prefix_tree_block_types_distances)
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_291:
 
 goto endif_2278
:else_2277:
:endif_2278:
 #                     3789:       meta_block_prefix_tree_block_types_distances = PrefixCodeBlockTypesDistances_data
 H[t252+155](meta_block_prefix_tree_block_types_distances) = H[t252+68](PrefixCodeBlockTypesDistances_data)
 #                     3790:       state = parse_prefix_code_block_counts_distances()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 292
   # push arguments:
   t0 = t0 + 7
   goto parse_prefix_code_block_counts_distances
  :return_id_292:
 
 H[t252+165](state) = t1
 goto endif_2275
:else_2274:
 #                     3791:     elif state == PrefixCodeBlockCountsDistances:
 t1 = H[t252+165](state) == H[t252+69](PrefixCodeBlockCountsDistances)
 ifN t1 goto else_2282
 #                     3792:       if meta_block_prefix_tree_block_counts_distances != NONE:
 t1 = H[t252+156](meta_block_prefix_tree_block_counts_distances) != 4294967295
 ifN t1 goto else_2285
 #                     3793:         free_pH(array_pH(meta_block_prefix_tree_block_counts_distances[0]))
 t1 = H[t252+156](meta_block_prefix_tree_block_counts_distances) >> 31
 if t1 goto isM_2287
 t1 = H[t252+156](meta_block_prefix_tree_block_counts_distances) + 0
 t1 = H[t1]()
 goto MorHdone_2288
:isM_2287:
 t1 = H[t252+156](meta_block_prefix_tree_block_counts_distances) & 2147483647
 t1 = t1 + 0
 t1 = M[t1]
:MorHdone_2288:
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 293
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_293:
 t2 = t1
 
 #                     3794:         free_pH(meta_block_prefix_tree_block_counts_distances)
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 294
   # push arguments:
   H[t0+8]() = H[t252+156](meta_block_prefix_tree_block_counts_distances)
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_294:
 
 goto endif_2286
:else_2285:
:endif_2286:
 #                     3795:       meta_block_prefix_tree_block_counts_distances = PrefixCodeBlockCountsDistances_data
 H[t252+156](meta_block_prefix_tree_block_counts_distances) = H[t252+70](PrefixCodeBlockCountsDistances_data)
 #                     3796:       state = parse_first_block_count_distances()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 295
   # push arguments:
   t0 = t0 + 7
   goto parse_first_block_count_distances
  :return_id_295:
 
 H[t252+165](state) = t1
 goto endif_2283
:else_2282:
 #                     3797:     elif state == FirstBlockCountDistances:
 t1 = H[t252+165](state) == H[t252+71](FirstBlockCountDistances)
 ifN t1 goto else_2290
 #                     3798:       meta_block_blen_d = FirstBlockCountDistances_data
 H[t252+148](meta_block_blen_d) = H[t252+72](FirstBlockCountDistances_data)
 #                     3799:       state = parse_n_postfix()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 296
   # push arguments:
   t0 = t0 + 7
   goto parse_n_postfix
  :return_id_296:
 
 H[t252+165](state) = t1
 goto endif_2291
:else_2290:
 #                     3800:     elif state == NPostfix:
 t1 = H[t252+165](state) == H[t252+73](NPostfix)
 ifN t1 goto else_2293
 #                     3801:       meta_block_header_n_postfix = NPostfix_data
 H[t252+134](meta_block_header_n_postfix) = H[t252+74](NPostfix_data)
 #                     3802:       state = parse_n_direct()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 297
   # push arguments:
   t0 = t0 + 7
   goto parse_n_direct
  :return_id_297:
 
 H[t252+165](state) = t1
 goto endif_2294
:else_2293:
 #                     3803:     elif state == NDirect:
 t1 = H[t252+165](state) == H[t252+75](NDirect)
 ifN t1 goto else_2296
 #                     3804:       meta_block_header_n_direct = NDirect_data
 H[t252+135](meta_block_header_n_direct) = H[t252+76](NDirect_data)
 #                     3805:       state = parse_context_modes_literals()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 298
   # push arguments:
   t0 = t0 + 7
   goto parse_context_modes_literals
  :return_id_298:
 
 H[t252+165](state) = t1
 goto endif_2297
:else_2296:
 #                     3806:     elif state == ContextModesLiterals:
 t1 = H[t252+165](state) == H[t252+77](ContextModesLiterals)
 ifN t1 goto else_2299
 #                     3807:       if meta_block_context_modes_literals != NONE:
 t1 = H[t252+159](meta_block_context_modes_literals) != 4294967295
 ifN t1 goto else_2302
 #                     3808:         free_pM(meta_block_context_modes_literals)
 t1 = H[t252+159](meta_block_context_modes_literals) & 2147483647
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 299
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_free_pM
  :return_id_299:
 t2 = t1
 
 goto endif_2303
:else_2302:
:endif_2303:
 #                     3809:       meta_block_context_modes_literals = ContextModesLiterals_data
 H[t252+159](meta_block_context_modes_literals) = H[t252+78](ContextModesLiterals_data)
 #                     3810:       state = parse_n_trees_l()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 300
   # push arguments:
   t0 = t0 + 7
   goto parse_n_trees_l
  :return_id_300:
 
 H[t252+165](state) = t1
 goto endif_2300
:else_2299:
 #                     3811:     elif state == NTreesL:
 t1 = H[t252+165](state) == H[t252+79](NTreesL)
 ifN t1 goto else_2305
 #                     3812:       meta_block_header_n_trees_l = NTreesL_data
 H[t252+136](meta_block_header_n_trees_l) = H[t252+80](NTreesL_data)
 #                     3813:       if meta_block_header_c_map_l != NONE:
 t1 = H[t252+138](meta_block_header_c_map_l) != 4294967295
 ifN t1 goto else_2308
 #                     3814:         free_pM(meta_block_header_c_map_l)
 t1 = H[t252+138](meta_block_header_c_map_l) & 2147483647
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 301
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_free_pM
  :return_id_301:
 t2 = t1
 
 goto endif_2309
:else_2308:
:endif_2309:
 #                     3815:       meta_block_header_c_map_l = alloc_pM(64 * meta_block_header_n_bltypes_l)
 t1 = 64 * H[t252+131](meta_block_header_n_bltypes_l)
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 302
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_alloc_pM
  :return_id_302:
 t2 = t1
 
 t2 = t2 | 2147483648
 H[t252+138](meta_block_header_c_map_l) = t2
 #                     3816:       if NTreesL_data >= 2:
 t1 = H[t252+80](NTreesL_data) >= 2
 ifN t1 goto else_2311
 #                     3817:         state = parse_context_map_literals()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 303
   # push arguments:
   t0 = t0 + 7
   goto parse_context_map_literals
  :return_id_303:
 
 H[t252+165](state) = t1
 goto endif_2312
:else_2311:
 #                     3819:         state = parse_n_trees_d()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 304
   # push arguments:
   t0 = t0 + 7
   goto parse_n_trees_d
  :return_id_304:
 
 H[t252+165](state) = t1
:endif_2312:
 goto endif_2306
:else_2305:
 #                     3820:     elif state == ContextMapLiterals:
 t1 = H[t252+165](state) == H[t252+85](ContextMapLiterals)
 ifN t1 goto else_2314
 #                     3821:       if meta_block_header_c_map_l != NONE:
 t1 = H[t252+138](meta_block_header_c_map_l) != 4294967295
 ifN t1 goto else_2317
 #                     3822:         free_pM(meta_block_header_c_map_l)
 t1 = H[t252+138](meta_block_header_c_map_l) & 2147483647
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 305
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_free_pM
  :return_id_305:
 t2 = t1
 
 goto endif_2318
:else_2317:
:endif_2318:
 #                     3823:       meta_block_header_c_map_l = ContextMapLiterals_data
 H[t252+138](meta_block_header_c_map_l) = H[t252+86](ContextMapLiterals_data)
 #                     3824:       state = parse_n_trees_d()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 306
   # push arguments:
   t0 = t0 + 7
   goto parse_n_trees_d
  :return_id_306:
 
 H[t252+165](state) = t1
 goto endif_2315
:else_2314:
 #                     3825:     elif state == NTreesD:
 t1 = H[t252+165](state) == H[t252+81](NTreesD)
 ifN t1 goto else_2320
 #                     3826:       meta_block_header_n_trees_d = NTreesD_data
 H[t252+137](meta_block_header_n_trees_d) = H[t252+82](NTreesD_data)
 #                     3827:       if meta_block_header_c_map_d != NONE:
 t1 = H[t252+139](meta_block_header_c_map_d) != 4294967295
 ifN t1 goto else_2323
 #                     3828:         free_pM(meta_block_header_c_map_d)
 t1 = H[t252+139](meta_block_header_c_map_d) & 2147483647
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 307
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_free_pM
  :return_id_307:
 t2 = t1
 
 goto endif_2324
:else_2323:
:endif_2324:
 #                     3829:       meta_block_header_c_map_d = alloc_pM(4 * meta_block_header_n_bltypes_d)
 t1 = 4 * H[t252+133](meta_block_header_n_bltypes_d)
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 308
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_alloc_pM
  :return_id_308:
 t2 = t1
 
 t2 = t2 | 2147483648
 H[t252+139](meta_block_header_c_map_d) = t2
 #                     3830:       if NTreesD_data >= 2:
 t1 = H[t252+82](NTreesD_data) >= 2
 ifN t1 goto else_2326
 #                     3831:         state = parse_context_map_distances()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 309
   # push arguments:
   t0 = t0 + 7
   goto parse_context_map_distances
  :return_id_309:
 
 H[t252+165](state) = t1
 goto endif_2327
:else_2326:
 #                     3833:         state = parse_prefix_codes_literals()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 310
   # push arguments:
   t0 = t0 + 7
   goto parse_prefix_codes_literals
  :return_id_310:
 
 H[t252+165](state) = t1
:endif_2327:
 goto endif_2321
:else_2320:
 #                     3834:     elif state == ContextMapDistances:
 t1 = H[t252+165](state) == H[t252+83](ContextMapDistances)
 ifN t1 goto else_2329
 #                     3835:       if meta_block_header_c_map_d != NONE:
 t1 = H[t252+139](meta_block_header_c_map_d) != 4294967295
 ifN t1 goto else_2332
 #                     3836:         free_pM(meta_block_header_c_map_d)
 t1 = H[t252+139](meta_block_header_c_map_d) & 2147483647
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 311
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_free_pM
  :return_id_311:
 t2 = t1
 
 goto endif_2333
:else_2332:
:endif_2333:
 #                     3837:       meta_block_header_c_map_d = ContextMapDistances_data
 H[t252+139](meta_block_header_c_map_d) = H[t252+84](ContextMapDistances_data)
 #                     3838:       state = parse_prefix_codes_literals()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 312
   # push arguments:
   t0 = t0 + 7
   goto parse_prefix_codes_literals
  :return_id_312:
 
 H[t252+165](state) = t1
 goto endif_2330
:else_2329:
 #                     3839:     elif state == PrefixCodesLiterals:
 t1 = H[t252+165](state) == H[t252+87](PrefixCodesLiterals)
 ifN t1 goto else_2335
 #                     3840:       if meta_block_prefix_trees_literals != NONE:
 t1 = H[t252+142](meta_block_prefix_trees_literals) != 4294967295
 ifN t1 goto else_2338
 #                     3841:         i = 0
 H[t0+2](i) = 0
 #                     3842:         while i < len_pH(meta_block_prefix_trees_literals):
:while_2340:
 t2 = H[t252+142](meta_block_prefix_trees_literals)
 t2 = t2 - 2
 t1 = H[t0+2](i) < H[t2]()
 ifN t1 goto whileend_2342
 #                     3843:           innertree = array_pH(meta_block_prefix_trees_literals[i])
 t1 = H[t252+142](meta_block_prefix_trees_literals) >> 31
 if t1 goto isM_2344
 t1 = H[t252+142](meta_block_prefix_trees_literals) + H[t0+2](i)
 t1 = H[t1]()
 goto MorHdone_2345
:isM_2344:
 t1 = H[t252+142](meta_block_prefix_trees_literals) & 2147483647
 t1 = t1 + H[t0+2](i)
 t1 = M[t1]
:MorHdone_2345:
 H[t0+4](innertree) = t1
 #                     3844:           free_pH(array_pH(innertree[0]))  # free tree's buffer
 t1 = H[t0+4](innertree) + 0
 t1 = H[t1]()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 313
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_313:
 t2 = t1
 
 #                     3845:           free_pH(innertree)
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 314
   # push arguments:
   H[t0+8]() = H[t0+4](innertree)
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_314:
 
 #                     3846:           i += 1
 H[t0+2](i) = H[t0+2](i) + 1
 goto while_2340
:whileend_2342:
 #                     3847:         free_pH(meta_block_prefix_trees_literals)
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 315
   # push arguments:
   H[t0+8]() = H[t252+142](meta_block_prefix_trees_literals)
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_315:
 
 goto endif_2339
:else_2338:
:endif_2339:
 #                     3848:       meta_block_prefix_trees_literals = PrefixCodesLiterals_data
 H[t252+142](meta_block_prefix_trees_literals) = H[t252+88](PrefixCodesLiterals_data)
 #                     3849:       state = parse_prefix_codes_insert_and_copy_lengths()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 316
   # push arguments:
   t0 = t0 + 7
   goto parse_prefix_codes_insert_and_copy_lengths
  :return_id_316:
 
 H[t252+165](state) = t1
 goto endif_2336
:else_2335:
 #                     3850:     elif state == PrefixCodesInsertAndCopyLengths:
 t1 = H[t252+165](state) == H[t252+89](PrefixCodesInsertAndCopyLengths)
 ifN t1 goto else_2347
 #                     3851:       if meta_block_prefix_trees_insert_and_copy_lengths != NONE:
 t1 = H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths) != 4294967295
 ifN t1 goto else_2350
 #                     3852:         i = 0
 H[t0+2](i) = 0
 #                     3853:         while i < len_pH(meta_block_prefix_trees_insert_and_copy_lengths):
:while_2352:
 t2 = H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths)
 t2 = t2 - 2
 t1 = H[t0+2](i) < H[t2]()
 ifN t1 goto whileend_2354
 #                     3854:           innertree = array_pH(meta_block_prefix_trees_insert_and_copy_lengths[i])
 t1 = H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths) >> 31
 if t1 goto isM_2356
 t1 = H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths) + H[t0+2](i)
 t1 = H[t1]()
 goto MorHdone_2357
:isM_2356:
 t1 = H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths) & 2147483647
 t1 = t1 + H[t0+2](i)
 t1 = M[t1]
:MorHdone_2357:
 H[t0+4](innertree) = t1
 #                     3855:           free_pH(array_pH(innertree[0]))  # free tree's buffer
 t1 = H[t0+4](innertree) + 0
 t1 = H[t1]()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 317
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_317:
 t2 = t1
 
 #                     3856:           free_pH(innertree)
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 318
   # push arguments:
   H[t0+8]() = H[t0+4](innertree)
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_318:
 
 #                     3857:           i += 1
 H[t0+2](i) = H[t0+2](i) + 1
 goto while_2352
:whileend_2354:
 #                     3858:         free_pH(meta_block_prefix_trees_insert_and_copy_lengths)
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 319
   # push arguments:
   H[t0+8]() = H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths)
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_319:
 
 goto endif_2351
:else_2350:
:endif_2351:
 #                     3859:       meta_block_prefix_trees_insert_and_copy_lengths = PrefixCodesInsertAndCopyLengths_data
 H[t252+157](meta_block_prefix_trees_insert_and_copy_lengths) = H[t252+90](PrefixCodesInsertAndCopyLengths_data)
 #                     3860:       state = parse_prefix_codes_distances()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 320
   # push arguments:
   t0 = t0 + 7
   goto parse_prefix_codes_distances
  :return_id_320:
 
 H[t252+165](state) = t1
 goto endif_2348
:else_2347:
 #                     3861:     elif state == PrefixCodesDistances:
 t1 = H[t252+165](state) == H[t252+91](PrefixCodesDistances)
 ifN t1 goto else_2359
 #                     3862:       if meta_block_prefix_trees_distances != NONE:
 t1 = H[t252+158](meta_block_prefix_trees_distances) != 4294967295
 ifN t1 goto else_2362
 #                     3863:         i = 0
 H[t0+2](i) = 0
 #                     3864:         while i < len_pH(meta_block_prefix_trees_distances):
:while_2364:
 t2 = H[t252+158](meta_block_prefix_trees_distances)
 t2 = t2 - 2
 t1 = H[t0+2](i) < H[t2]()
 ifN t1 goto whileend_2366
 #                     3865:           innertree = array_pH(meta_block_prefix_trees_distances[i])
 t1 = H[t252+158](meta_block_prefix_trees_distances) >> 31
 if t1 goto isM_2368
 t1 = H[t252+158](meta_block_prefix_trees_distances) + H[t0+2](i)
 t1 = H[t1]()
 goto MorHdone_2369
:isM_2368:
 t1 = H[t252+158](meta_block_prefix_trees_distances) & 2147483647
 t1 = t1 + H[t0+2](i)
 t1 = M[t1]
:MorHdone_2369:
 H[t0+4](innertree) = t1
 #                     3866:           free_pH(array_pH(innertree[0]))  # free tree's buffer
 t1 = H[t0+4](innertree) + 0
 t1 = H[t1]()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 321
   # push arguments:
   H[t0+8]() = t1
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_321:
 t2 = t1
 
 #                     3867:           free_pH(innertree)
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 322
   # push arguments:
   H[t0+8]() = H[t0+4](innertree)
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_322:
 
 #                     3868:           i += 1
 H[t0+2](i) = H[t0+2](i) + 1
 goto while_2364
:whileend_2366:
 #                     3869:         free_pH(meta_block_prefix_trees_distances)
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 323
   # push arguments:
   H[t0+8]() = H[t252+158](meta_block_prefix_trees_distances)
   t0 = t0 + 7
   goto addr_free_pH
  :return_id_323:
 
 goto endif_2363
:else_2362:
:endif_2363:
 #                     3870:       meta_block_prefix_trees_distances = PrefixCodesDistances_data
 H[t252+158](meta_block_prefix_trees_distances) = H[t252+92](PrefixCodesDistances_data)
 #                     3871:       state = DataMetaBlockBegin
 H[t252+165](state) = H[t252+93](DataMetaBlockBegin)
 goto endif_2360
:else_2359:
 #                     3872:     elif state == DataMetaBlockBegin:
 t1 = H[t252+165](state) == H[t252+93](DataMetaBlockBegin)
 ifN t1 goto else_2371
 #                     3873:       state = parse_insert_and_copy_length()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 324
   # push arguments:
   t0 = t0 + 7
   goto parse_insert_and_copy_length
  :return_id_324:
 
 H[t252+165](state) = t1
 goto endif_2372
:else_2371:
 #                     3874:     elif state == InsertAndCopyLength:
 t1 = H[t252+165](state) == H[t252+94](InsertAndCopyLength)
 ifN t1 goto else_2374
 #                     3875:       meta_block_insert_and_copy_length = InsertAndCopyLength_data
 H[t252+160](meta_block_insert_and_copy_length) = H[t252+95](InsertAndCopyLength_data)
 #                     3876:       if InsertAndCopyLength_data >= 0 and InsertAndCopyLength_data <= 127:
 t2 = H[t252+95](InsertAndCopyLength_data) >= 0
 t3 = H[t252+95](InsertAndCopyLength_data) <= 127
 t1 = t2 and t3
 ifN t1 goto else_2378
 #                     3877:         meta_block_distance = 0
 H[t252+163](meta_block_distance) = 0
 goto endif_2379
:else_2378:
 #                     3879:         meta_block_distance = NONE
 H[t252+163](meta_block_distance) = 4294967295
:endif_2379:
 #                     3880:       state = decode_insert_and_copy_length()
 
    H[t0+6]() = t0
   # saved bsp, return id:
   H[t0+7]() = 325
   # push arguments:
   t0 = t0 + 7
   goto decode_insert_and_copy_length
  :return_id_325:
 
 H[t252+165](state) = t1
 goto endif_2375
:else_2374:
 #                     3881:     elif state == InsertLengthAndCopyLength:
 t1 = H[t252+165](state) == H[t252+96](InsertLengthAndCopyLength)
 ifN t1 goto else_2381
 #                     3882:       m_len = meta_block_header_m_len
 H[t0+6](m_len) = H[t252+129](meta_block_header_m_len)
 #                     3883:       meta_block_insert_length = InsertLengthAndCopyLength_data_in_len
 H[t252+162](meta_block_insert_length) = H[t252+98](InsertLengthAndCopyLength_data_in_len)
 #                     3884:       meta_block_copy_length = InsertLengthAndCopyLength_data_co_len
 H[t252+161](meta_block_copy_length) = H[t252+97](InsertLengthAndCopyLength_data_co_len)
 #                     3885:       if m_len < meta_block_count_output + meta_block_insert_length:  # or (m_len > meta_block_count_output + meta_block_insert_length and m_len < meta_block_count_output + meta_block_insert_length + meta_block_copy_length)
 t2 = H[t252+143](meta_block_count_output) + H[t252+162](meta_block_insert_length)
 t1 = H[t0+6](m_len) < t2
 ifN t1 goto else_2384
 #                     3886:         error() # ExceededExpectedBytes
 error
 goto endif_2385
:else_2384:
:endif_2385:
 #                     3887:       state = parse_insert_literals()
 
    H[t0+7]() = t0
   # saved bsp, return id:
   H[t0+8]() = 326
   # push arguments:
   t0 = t0 + 8
   goto parse_insert_literals
  :return_id_326:
 
 H[t252+165](state) = t1
 goto endif_2382
:else_2381:
 #                     3888:     elif state == InsertLiterals:
 t1 = H[t252+165](state) == H[t252+99](InsertLiterals)
 ifN t1 goto else_2387
 #                     3889:       m_len = meta_block_header_m_len
 H[t0+6](m_len) = H[t252+129](meta_block_header_m_len)
 #                     3890:       if m_len < meta_block_count_output + len_pM(InsertLiterals_data):
 t3 = H[t252+100](InsertLiterals_data)
 t3 = t3 & 2147483647
 t3 = t3 - 5
 t4 = M[t3] << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t4 = t4 << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t4 = t4 << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t2 = H[t252+143](meta_block_count_output) + t4
 t1 = H[t0+6](m_len) < t2
 ifN t1 goto else_2390
 #                     3891:         error() # ExceededExpectedBytes
 error
 goto endif_2391
:else_2390:
:endif_2391:
 #                     3892:       i = 0
 H[t0+2](i) = 0
 #                     3893:       while i < len_pM(InsertLiterals_data):
:while_2392:
 t2 = H[t252+100](InsertLiterals_data)
 t2 = t2 & 2147483647
 t2 = t2 - 5
 t3 = M[t2] << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t3 = t3 << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t3 = t3 << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t1 = H[t0+2](i) < t3
 ifN t1 goto whileend_2394
 #                     3894:         literal = InsertLiterals_data[i]
 t1 = H[t252+100](InsertLiterals_data) >> 31
 if t1 goto isM_2396
 t1 = H[t252+100](InsertLiterals_data) + H[t0+2](i)
 t1 = H[t1]()
 goto MorHdone_2397
:isM_2396:
 t1 = H[t252+100](InsertLiterals_data) & 2147483647
 t1 = t1 + H[t0+2](i)
 t1 = M[t1]
:MorHdone_2397:
 H[t0+5](literal) = t1
 #                     3895:         out(literal)
 out H[t0+5](literal)
 #                     3896:         output_window_pointer = (output_window_pointer + 1) % len_pM(output_window)
 t2 = H[t252+118](output_window_pointer) + 1
 t3 = H[t252+117](output_window)
 t3 = t3 & 2147483647
 t3 = t3 - 5
 t4 = M[t3] << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t4 = t4 << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t4 = t4 << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t1 = t2 % t4
 H[t252+118](output_window_pointer) = t1
 #                     3897:         output_window[output_window_pointer] = literal
 t1 = H[t252+117](output_window) & 2147483647
 t1 = t1 + H[t252+118](output_window_pointer)
 M[t1] = H[t0+5](literal)
 #                     3898:         count_output += 1
 H[t252+119](count_output) = H[t252+119](count_output) + 1
 #                     3899:         meta_block_count_output += 1
 H[t252+143](meta_block_count_output) = H[t252+143](meta_block_count_output) + 1
 #                     3900:         i += 1
 H[t0+2](i) = H[t0+2](i) + 1
 goto while_2392
:whileend_2394:
 #                     3901:       free_pM(InsertLiterals_data)
 t1 = H[t252+100](InsertLiterals_data) & 2147483647
 
    H[t0+7]() = t0
   # saved bsp, return id:
   H[t0+8]() = 327
   # push arguments:
   H[t0+9]() = t1
   t0 = t0 + 8
   goto addr_free_pM
  :return_id_327:
 t2 = t1
 
 #                     3902:       if meta_block_header_m_len == meta_block_count_output:
 t1 = H[t252+129](meta_block_header_m_len) == H[t252+143](meta_block_count_output)
 ifN t1 goto else_2399
 #                     3903:         state = DataMetaBlockEnd
 H[t252+165](state) = H[t252+107](DataMetaBlockEnd)
 goto endif_2400
:else_2399:
 #                     3905:         state = parse_distance_code()
 
    H[t0+7]() = t0
   # saved bsp, return id:
   H[t0+8]() = 328
   # push arguments:
   t0 = t0 + 8
   goto parse_distance_code
  :return_id_328:
 
 H[t252+165](state) = t1
:endif_2400:
 goto endif_2388
:else_2387:
 #                     3906:     elif state == DistanceCode:
 t1 = H[t252+165](state) == H[t252+101](DistanceCode)
 ifN t1 goto else_2402
 #                     3907:       meta_block_distance_code = DistanceCode_data
 H[t252+164](meta_block_distance_code) = H[t252+102](DistanceCode_data)
 #                     3908:       state = decode_distance()
 
    H[t0+7]() = t0
   # saved bsp, return id:
   H[t0+8]() = 329
   # push arguments:
   t0 = t0 + 8
   goto decode_distance
  :return_id_329:
 
 H[t252+165](state) = t1
 goto endif_2403
:else_2402:
 #                     3909:     elif state == Distance:
 t1 = H[t252+165](state) == H[t252+103](Distance)
 ifN t1 goto else_2405
 #                     3910:       meta_block_distance = Distance_data
 H[t252+163](meta_block_distance) = H[t252+104](Distance_data)
 #                     3911:       state = copy_literals()
 
    H[t0+7]() = t0
   # saved bsp, return id:
   H[t0+8]() = 330
   # push arguments:
   t0 = t0 + 8
   goto copy_literals
  :return_id_330:
 
 H[t252+165](state) = t1
 goto endif_2406
:else_2405:
 #                     3912:     elif state == CopyLiterals:
 t1 = H[t252+165](state) == H[t252+105](CopyLiterals)
 ifN t1 goto else_2408
 #                     3913:       m_len = meta_block_header_m_len
 H[t0+6](m_len) = H[t252+129](meta_block_header_m_len)
 #                     3914:       if m_len < meta_block_count_output + len_pM(CopyLiterals_data):
 t3 = H[t252+106](CopyLiterals_data)
 t3 = t3 & 2147483647
 t3 = t3 - 5
 t4 = M[t3] << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t4 = t4 << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t4 = t4 << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t2 = H[t252+143](meta_block_count_output) + t4
 t1 = H[t0+6](m_len) < t2
 ifN t1 goto else_2411
 #                     3915:         error() # err ExceededExpectedBytes
 error
 goto endif_2412
:else_2411:
:endif_2412:
 #                     3916:       i = 0
 H[t0+2](i) = 0
 #                     3917:       while i < len_pM(CopyLiterals_data):
:while_2413:
 t2 = H[t252+106](CopyLiterals_data)
 t2 = t2 & 2147483647
 t2 = t2 - 5
 t3 = M[t2] << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t3 = t3 << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t3 = t3 << 8
 t2 = t2 + 1
 t3 = t3 + M[t2]
 t1 = H[t0+2](i) < t3
 ifN t1 goto whileend_2415
 #                     3918:         literal = CopyLiterals_data[i]
 t1 = H[t252+106](CopyLiterals_data) >> 31
 if t1 goto isM_2417
 t1 = H[t252+106](CopyLiterals_data) + H[t0+2](i)
 t1 = H[t1]()
 goto MorHdone_2418
:isM_2417:
 t1 = H[t252+106](CopyLiterals_data) & 2147483647
 t1 = t1 + H[t0+2](i)
 t1 = M[t1]
:MorHdone_2418:
 H[t0+5](literal) = t1
 #                     3919:         out(literal)
 out H[t0+5](literal)
 #                     3920:         literal_buf_pointer = (literal_buf_pointer + 1) % 2
 t2 = H[t252+123](literal_buf_pointer) + 1
 t1 = t2 % 2
 H[t252+123](literal_buf_pointer) = t1
 #                     3921:         literal_buf[literal_buf_pointer] = literal
 t1 = H[t252+122](literal_buf) & 2147483647
 t1 = t1 + H[t252+123](literal_buf_pointer)
 M[t1] = H[t0+5](literal)
 #                     3922:         output_window_pointer = (output_window_pointer + 1) % len_pM(output_window)
 t2 = H[t252+118](output_window_pointer) + 1
 t3 = H[t252+117](output_window)
 t3 = t3 & 2147483647
 t3 = t3 - 5
 t4 = M[t3] << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t4 = t4 << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t4 = t4 << 8
 t3 = t3 + 1
 t4 = t4 + M[t3]
 t1 = t2 % t4
 H[t252+118](output_window_pointer) = t1
 #                     3923:         output_window[output_window_pointer] = literal
 t1 = H[t252+117](output_window) & 2147483647
 t1 = t1 + H[t252+118](output_window_pointer)
 M[t1] = H[t0+5](literal)
 #                     3924:         count_output += 1
 H[t252+119](count_output) = H[t252+119](count_output) + 1
 #                     3925:         meta_block_count_output += 1
 H[t252+143](meta_block_count_output) = H[t252+143](meta_block_count_output) + 1
 #                     3926:         i += 1
 H[t0+2](i) = H[t0+2](i) + 1
 goto while_2413
:whileend_2415:
 #                     3927:       free_pM(CopyLiterals_data)
 t1 = H[t252+106](CopyLiterals_data) & 2147483647
 
    H[t0+7]() = t0
   # saved bsp, return id:
   H[t0+8]() = 331
   # push arguments:
   H[t0+9]() = t1
   t0 = t0 + 8
   goto addr_free_pM
  :return_id_331:
 t2 = t1
 
 #                     3928:       if meta_block_header_m_len == meta_block_count_output:
 t1 = H[t252+129](meta_block_header_m_len) == H[t252+143](meta_block_count_output)
 ifN t1 goto else_2420
 #                     3929:         state = DataMetaBlockEnd
 H[t252+165](state) = H[t252+107](DataMetaBlockEnd)
 goto endif_2421
:else_2420:
 #                     3931:         state = DataMetaBlockBegin
 H[t252+165](state) = H[t252+93](DataMetaBlockBegin)
:endif_2421:
 goto endif_2409
:else_2408:
 #                     3932:     elif state == DataMetaBlockEnd:
 t1 = H[t252+165](state) == H[t252+107](DataMetaBlockEnd)
 ifN t1 goto else_2423
 #                     3933:       state = MetaBlockEnd
 H[t252+165](state) = H[t252+108](MetaBlockEnd)
 goto endif_2424
:else_2423:
 #                     3934:     elif state == MetaBlockEnd:
 t1 = H[t252+165](state) == H[t252+108](MetaBlockEnd)
 ifN t1 goto else_2426
 #                     3935:       if meta_block_header_is_last:
 ifN H[t252+124](meta_block_header_is_last) goto else_2428
 #                     3936:         state = StreamEnd
 H[t252+165](state) = H[t252+109](StreamEnd)
 goto endif_2429
:else_2428:
 #                     3938:         state = HeaderMetaBlockBegin
 H[t252+165](state) = H[t252+32](HeaderMetaBlockBegin)
:endif_2429:
 goto endif_2427
:else_2426:
 #                     3939:     elif state == StreamEnd:
 t1 = H[t252+165](state) == H[t252+109](StreamEnd)
 ifN t1 goto else_2431
 #                     3940:       if read_u8_from_byte_tail() != 0:
 
    H[t0+8]() = t0
   # saved bsp, return id:
   H[t0+9]() = 332
   # push arguments:
   t0 = t0 + 9
   goto read_u8_from_byte_tail
  :return_id_332:
 t2 = t1
 
 t1 = t2 != 0
 ifN t1 goto else_2434
 #                     3941:         error() # NonZeroTrailerBit
 error
 goto endif_2435
:else_2434:
:endif_2435:
 #                     3942:       if read_u8() == NONE: # i.e. BitReaderError
 
    H[t0+8]() = t0
   # saved bsp, return id:
   H[t0+9]() = 333
   # push arguments:
   t0 = t0 + 9
   goto read_u8
  :return_id_333:
 t2 = t1
 
 t1 = t2 == 4294967295
 ifN t1 goto else_2437
 #                     3943:         state = StreamBegin
 H[t252+165](state) = H[t252+27](StreamBegin)
 #                     3944:         distance_buf[0] = 16  # reversed!
 t1 = H[t252+120](distance_buf) + 0
 H[t1]() = 16
 #                     3945:         distance_buf[1] = 15
 t1 = t1 + 1
 H[t1]() = 15
 #                     3946:         distance_buf[2] = 11
 t1 = t1 + 1
 H[t1]() = 11
 #                     3947:         distance_buf[3] = 4
 t1 = t1 + 1
 H[t1]() = 4
 #                     3948:         distance_buf_pointer = 3
 H[t252+121](distance_buf_pointer) = 3
 #                     3949:         literal_buf[0] = 0
 t1 = H[t252+122](literal_buf) & 2147483647
 t1 = t1 + 0
 M[t1] = 0
 #                     3950:         literal_buf[1] = 0
 t1 = t1 + 1
 M[t1] = 0
 #                     3951:         literal_buf_pointer = 0
 H[t252+123](literal_buf_pointer) = 0
 #                     3952:         count_output = 0
 H[t252+119](count_output) = 0
 #                     3953:         bit_pos = 0
 H[t252+1](bit_pos) = 0
 #                     3954:         current_byte = NONE
 H[t252+2](current_byte) = 4294967295
 #                     3955:         global_bit_pos = 0
 H[t252+3](global_bit_pos) = 0
 #                     3956:         expect_next_seg = True
 H[t252+174](expect_next_seg) = 1
 #                     3957:         return
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 goto endif_2438
:else_2437:
:endif_2438:
 goto endif_2432
:else_2431:
:endif_2432:
:endif_2427:
:endif_2424:
:endif_2409:
:endif_2406:
:endif_2403:
:endif_2388:
:endif_2382:
:endif_2375:
:endif_2372:
:endif_2360:
:endif_2348:
:endif_2336:
:endif_2330:
:endif_2321:
:endif_2315:
:endif_2306:
:endif_2300:
:endif_2297:
:endif_2294:
:endif_2291:
:endif_2283:
:endif_2275:
:endif_2269:
:endif_2266:
:endif_2258:
:endif_2250:
:endif_2244:
:endif_2241:
:endif_2233:
:endif_2225:
:endif_2219:
:endif_2216:
:endif_2206:
:endif_2200:
:endif_2194:
:endif_2188:
:endif_2185:
:endif_2179:
:endif_2175:
:endif_2168:
:endif_2164:
:endif_2160:
:endif_2156:
:endif_2152:
:endif_2082:
:endif_2079:
:endif_2073:
:endif_2070:
:endif_2067:
:endif_2064:
 goto while_2059
:whileend_2061:
 # insert return as it might not be done by the function:
    t2 = H[t0]()
   t0 = t0 - 1
   t0 = H[t0]()
   goto find_label_ret_id
 MarkTempVarEnd
:pcomp_end~:
 #                     3959: pass
:call_next:
 t253 = 4294967294
    H[t0+175]() = t0
   # saved bsp, return id:
   H[t0+176]() = 334
   # push arguments:
   H[t0+177]() = t255
   t0 = t0 + 176
   goto pcomp
  :return_id_334:
    halt
  :find_label_ret_id:
   t4 = t0 > 68157240
   if t4 goto throw_error
   ifEq t2 0 goto return_id_0
   ifEq t2 1 goto return_id_1
   ifEq t2 2 goto return_id_2
   ifEq t2 3 goto return_id_3
   ifEq t2 4 goto return_id_4
   ifEq t2 5 goto return_id_5
   ifEq t2 6 goto return_id_6
   ifEq t2 7 goto return_id_7
   ifEq t2 8 goto return_id_8
   ifEq t2 18 goto return_id_18
   ifEq t2 19 goto return_id_19
   ifEq t2 20 goto return_id_20
   ifEq t2 21 goto return_id_21
   ifEq t2 22 goto return_id_22
   ifEq t2 23 goto return_id_23
   ifEq t2 30 goto return_id_30
   ifEq t2 31 goto return_id_31
   ifEq t2 32 goto return_id_32
   ifEq t2 33 goto return_id_33
   ifEq t2 34 goto return_id_34
   ifEq t2 35 goto return_id_35
   ifEq t2 36 goto return_id_36
   ifEq t2 37 goto return_id_37
   ifEq t2 38 goto return_id_38
   ifEq t2 39 goto return_id_39
   ifEq t2 40 goto return_id_40
   ifEq t2 41 goto return_id_41
   ifEq t2 42 goto return_id_42
   ifEq t2 43 goto return_id_43
   ifEq t2 44 goto return_id_44
   ifEq t2 45 goto return_id_45
   ifEq t2 46 goto return_id_46
   ifEq t2 47 goto return_id_47
   ifEq t2 48 goto return_id_48
   ifEq t2 49 goto return_id_49
   ifEq t2 50 goto return_id_50
   ifEq t2 51 goto return_id_51
   ifEq t2 52 goto return_id_52
   ifEq t2 53 goto return_id_53
   ifEq t2 54 goto return_id_54
   ifEq t2 55 goto return_id_55
   ifEq t2 56 goto return_id_56
   ifEq t2 57 goto return_id_57
   ifEq t2 58 goto return_id_58
   ifEq t2 59 goto return_id_59
   ifEq t2 60 goto return_id_60
   ifEq t2 61 goto return_id_61
   ifEq t2 62 goto return_id_62
   ifEq t2 63 goto return_id_63
   ifEq t2 64 goto return_id_64
   ifEq t2 65 goto return_id_65
   ifEq t2 66 goto return_id_66
   ifEq t2 67 goto return_id_67
   ifEq t2 68 goto return_id_68
   ifEq t2 69 goto return_id_69
   ifEq t2 70 goto return_id_70
   ifEq t2 71 goto return_id_71
   ifEq t2 72 goto return_id_72
   ifEq t2 73 goto return_id_73
   ifEq t2 74 goto return_id_74
   ifEq t2 75 goto return_id_75
   ifEq t2 76 goto return_id_76
   ifEq t2 77 goto return_id_77
   ifEq t2 78 goto return_id_78
   ifEq t2 79 goto return_id_79
   ifEq t2 80 goto return_id_80
   ifEq t2 81 goto return_id_81
   ifEq t2 82 goto return_id_82
   ifEq t2 83 goto return_id_83
   ifEq t2 84 goto return_id_84
   ifEq t2 85 goto return_id_85
   ifEq t2 86 goto return_id_86
   ifEq t2 87 goto return_id_87
   ifEq t2 88 goto return_id_88
   ifEq t2 89 goto return_id_89
   ifEq t2 90 goto return_id_90
   ifEq t2 91 goto return_id_91
   ifEq t2 92 goto return_id_92
   ifEq t2 93 goto return_id_93
   ifEq t2 94 goto return_id_94
   ifEq t2 95 goto return_id_95
   ifEq t2 96 goto return_id_96
   ifEq t2 97 goto return_id_97
   ifEq t2 98 goto return_id_98
   ifEq t2 99 goto return_id_99
   ifEq t2 100 goto return_id_100
   ifEq t2 101 goto return_id_101
   ifEq t2 102 goto return_id_102
   ifEq t2 103 goto return_id_103
   ifEq t2 104 goto return_id_104
   ifEq t2 105 goto return_id_105
   ifEq t2 106 goto return_id_106
   ifEq t2 107 goto return_id_107
   ifEq t2 108 goto return_id_108
   ifEq t2 109 goto return_id_109
   ifEq t2 110 goto return_id_110
   ifEq t2 111 goto return_id_111
   ifEq t2 112 goto return_id_112
   ifEq t2 113 goto return_id_113
   ifEq t2 114 goto return_id_114
   ifEq t2 115 goto return_id_115
   ifEq t2 116 goto return_id_116
   ifEq t2 117 goto return_id_117
   ifEq t2 118 goto return_id_118
   ifEq t2 119 goto return_id_119
   ifEq t2 120 goto return_id_120
   ifEq t2 121 goto return_id_121
   ifEq t2 122 goto return_id_122
   ifEq t2 123 goto return_id_123
   ifEq t2 124 goto return_id_124
   ifEq t2 125 goto return_id_125
   ifEq t2 126 goto return_id_126
   ifEq t2 127 goto return_id_127
   ifEq t2 128 goto return_id_128
   ifEq t2 129 goto return_id_129
   ifEq t2 130 goto return_id_130
   ifEq t2 131 goto return_id_131
   ifEq t2 132 goto return_id_132
   ifEq t2 133 goto return_id_133
   ifEq t2 134 goto return_id_134
   ifEq t2 135 goto return_id_135
   ifEq t2 136 goto return_id_136
   ifEq t2 137 goto return_id_137
   ifEq t2 138 goto return_id_138
   ifEq t2 139 goto return_id_139
   ifEq t2 140 goto return_id_140
   ifEq t2 141 goto return_id_141
   ifEq t2 142 goto return_id_142
   ifEq t2 143 goto return_id_143
   ifEq t2 144 goto return_id_144
   ifEq t2 145 goto return_id_145
   ifEq t2 146 goto return_id_146
   ifEq t2 147 goto return_id_147
   ifEq t2 148 goto return_id_148
   ifEq t2 149 goto return_id_149
   ifEq t2 150 goto return_id_150
   ifEq t2 151 goto return_id_151
   ifEq t2 152 goto return_id_152
   ifEq t2 153 goto return_id_153
   ifEq t2 154 goto return_id_154
   ifEq t2 155 goto return_id_155
   ifEq t2 156 goto return_id_156
   ifEq t2 157 goto return_id_157
   ifEq t2 158 goto return_id_158
   ifEq t2 159 goto return_id_159
   ifEq t2 160 goto return_id_160
   ifEq t2 161 goto return_id_161
   ifEq t2 162 goto return_id_162
   ifEq t2 163 goto return_id_163
   ifEq t2 164 goto return_id_164
   ifEq t2 165 goto return_id_165
   ifEq t2 166 goto return_id_166
   ifEq t2 167 goto return_id_167
   ifEq t2 168 goto return_id_168
   ifEq t2 169 goto return_id_169
   ifEq t2 170 goto return_id_170
   ifEq t2 171 goto return_id_171
   ifEq t2 172 goto return_id_172
   ifEq t2 173 goto return_id_173
   ifEq t2 174 goto return_id_174
   ifEq t2 175 goto return_id_175
   ifEq t2 176 goto return_id_176
   ifEq t2 177 goto return_id_177
   ifEq t2 178 goto return_id_178
   ifEq t2 179 goto return_id_179
   ifEq t2 180 goto return_id_180
   ifEq t2 181 goto return_id_181
   ifEq t2 182 goto return_id_182
   ifEq t2 183 goto return_id_183
   ifEq t2 184 goto return_id_184
   ifEq t2 185 goto return_id_185
   ifEq t2 186 goto return_id_186
   ifEq t2 187 goto return_id_187
   ifEq t2 188 goto return_id_188
   ifEq t2 189 goto return_id_189
   ifEq t2 190 goto return_id_190
   ifEq t2 191 goto return_id_191
   ifEq t2 192 goto return_id_192
   ifEq t2 193 goto return_id_193
   ifEq t2 194 goto return_id_194
   ifEq t2 195 goto return_id_195
   ifEq t2 196 goto return_id_196
   ifEq t2 197 goto return_id_197
   ifEq t2 198 goto return_id_198
   ifEq t2 199 goto return_id_199
   ifEq t2 200 goto return_id_200
   ifEq t2 201 goto return_id_201
   ifEq t2 202 goto return_id_202
   ifEq t2 203 goto return_id_203
   ifEq t2 204 goto return_id_204
   ifEq t2 205 goto return_id_205
   ifEq t2 206 goto return_id_206
   ifEq t2 207 goto return_id_207
   ifEq t2 208 goto return_id_208
   ifEq t2 209 goto return_id_209
   ifEq t2 210 goto return_id_210
   ifEq t2 211 goto return_id_211
   ifEq t2 212 goto return_id_212
   ifEq t2 213 goto return_id_213
   ifEq t2 214 goto return_id_214
   ifEq t2 215 goto return_id_215
   ifEq t2 216 goto return_id_216
   ifEq t2 217 goto return_id_217
   ifEq t2 218 goto return_id_218
   ifEq t2 219 goto return_id_219
   ifEq t2 220 goto return_id_220
   ifEq t2 221 goto return_id_221
   ifEq t2 222 goto return_id_222
   ifEq t2 223 goto return_id_223
   ifEq t2 224 goto return_id_224
   ifEq t2 225 goto return_id_225
   ifEq t2 226 goto return_id_226
   ifEq t2 227 goto return_id_227
   ifEq t2 228 goto return_id_228
   ifEq t2 229 goto return_id_229
   ifEq t2 230 goto return_id_230
   ifEq t2 231 goto return_id_231
   ifEq t2 232 goto return_id_232
   ifEq t2 233 goto return_id_233
   ifEq t2 234 goto return_id_234
   ifEq t2 235 goto return_id_235
   ifEq t2 236 goto return_id_236
   ifEq t2 237 goto return_id_237
   ifEq t2 238 goto return_id_238
   ifEq t2 239 goto return_id_239
   ifEq t2 240 goto return_id_240
   ifEq t2 241 goto return_id_241
   ifEq t2 242 goto return_id_242
   ifEq t2 243 goto return_id_243
   ifEq t2 244 goto return_id_244
   ifEq t2 245 goto return_id_245
   ifEq t2 246 goto return_id_246
   ifEq t2 247 goto return_id_247
   ifEq t2 248 goto return_id_248
   ifEq t2 249 goto return_id_249
   ifEq t2 250 goto return_id_250
   ifEq t2 251 goto return_id_251
   ifEq t2 252 goto return_id_252
   ifEq t2 253 goto return_id_253
   ifEq t2 254 goto return_id_254
   ifEq t2 255 goto return_id_255
   ifEq t2 256 goto return_id_256
   ifEq t2 257 goto return_id_257
   ifEq t2 258 goto return_id_258
   ifEq t2 259 goto return_id_259
   ifEq t2 260 goto return_id_260
   ifEq t2 261 goto return_id_261
   ifEq t2 262 goto return_id_262
   ifEq t2 263 goto return_id_263
   ifEq t2 264 goto return_id_264
   ifEq t2 265 goto return_id_265
   ifEq t2 266 goto return_id_266
   ifEq t2 267 goto return_id_267
   ifEq t2 268 goto return_id_268
   ifEq t2 269 goto return_id_269
   ifEq t2 270 goto return_id_270
   ifEq t2 271 goto return_id_271
   ifEq t2 272 goto return_id_272
   ifEq t2 273 goto return_id_273
   ifEq t2 274 goto return_id_274
   ifEq t2 275 goto return_id_275
   ifEq t2 276 goto return_id_276
   ifEq t2 277 goto return_id_277
   ifEq t2 278 goto return_id_278
   ifEq t2 279 goto return_id_279
   ifEq t2 280 goto return_id_280
   ifEq t2 281 goto return_id_281
   ifEq t2 282 goto return_id_282
   ifEq t2 283 goto return_id_283
   ifEq t2 284 goto return_id_284
   ifEq t2 285 goto return_id_285
   ifEq t2 286 goto return_id_286
   ifEq t2 287 goto return_id_287
   ifEq t2 288 goto return_id_288
   ifEq t2 289 goto return_id_289
   ifEq t2 290 goto return_id_290
   ifEq t2 291 goto return_id_291
   ifEq t2 292 goto return_id_292
   ifEq t2 293 goto return_id_293
   ifEq t2 294 goto return_id_294
   ifEq t2 295 goto return_id_295
   ifEq t2 296 goto return_id_296
   ifEq t2 297 goto return_id_297
   ifEq t2 298 goto return_id_298
   ifEq t2 299 goto return_id_299
   ifEq t2 300 goto return_id_300
   ifEq t2 301 goto return_id_301
   ifEq t2 302 goto return_id_302
   ifEq t2 303 goto return_id_303
   ifEq t2 304 goto return_id_304
   ifEq t2 305 goto return_id_305
   ifEq t2 306 goto return_id_306
   ifEq t2 307 goto return_id_307
   ifEq t2 308 goto return_id_308
   ifEq t2 309 goto return_id_309
   ifEq t2 310 goto return_id_310
   ifEq t2 311 goto return_id_311
   ifEq t2 312 goto return_id_312
   ifEq t2 313 goto return_id_313
   ifEq t2 314 goto return_id_314
   ifEq t2 315 goto return_id_315
   ifEq t2 316 goto return_id_316
   ifEq t2 317 goto return_id_317
   ifEq t2 318 goto return_id_318
   ifEq t2 319 goto return_id_319
   ifEq t2 320 goto return_id_320
   ifEq t2 321 goto return_id_321
   ifEq t2 322 goto return_id_322
   ifEq t2 323 goto return_id_323
   ifEq t2 324 goto return_id_324
   ifEq t2 325 goto return_id_325
   ifEq t2 326 goto return_id_326
   ifEq t2 327 goto return_id_327
   ifEq t2 328 goto return_id_328
   ifEq t2 329 goto return_id_329
   ifEq t2 330 goto return_id_330
   ifEq t2 331 goto return_id_331
   ifEq t2 332 goto return_id_332
   ifEq t2 333 goto return_id_333
   ifEq t2 334 goto return_id_334
  :throw_error:
   error
   halt
end
