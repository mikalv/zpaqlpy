(mixed_pi2.cfg
use the next expected digit as context for CM or a general text model of fast.cfg
a MIX2 will select between them
To compress: zpaqd c mixed_pi2.cfg text_pi.zpaq text_with_appearance_of_pi.txt
  Copyright 2016 Kai LÃ¼ke kailueke@riseup.net
  This program comes with ABSOLUTELY NO WARRANTY and is free software, you are welcome to redistribute it
  under certain conditions, see https://www.gnu.org/licenses/gpl-3.0.en.html
)

comp 2 14 0 0 4  (2^14 > 10000)
  0 cm 18 0   (order 1 or digits of pi)
  1 icm 16    (order 2, chained to isse)
  2 isse 19 1 (order 4)
  3 mix2 0 0 2 24 0 (moderate adapting mixer between CM and ISSE based on which predicts better)
hcomp
  r=a 2
  a=r 0
  a== 0 if (only first run)
    (Compute pi to 10000 digits using the formula:
       pi=4; for (d=r1*20/3;d>0;--d) pi=pi*d/(2*d+1)+2;
     where r1 is the number of base 100 digits.
     The precision is 1 bit per iteration so 20/3
     is slightly more than the log2(100) we need.)
    a= 100 a*=a r=a 1 (r1 = digits base 100)
    a*= 7 d=a (d = n iterations)
    *b= 4 (M=4)
    do

      (multiply M *= d, carry in c)
      b=r 1 c=0
      do
        b--
        a=*b a*=d a+=c c=a a%= 10 *b=a
        a=c a/= 10 c=a
      a=b a> 0 while

      (divide M /= (2d+1), remainder in c)
      a=d a+=d a++ d=a
      do
        a=c a*= 10 a+=*b c=a a/=d *b=a
        a=c a%=d c=a
      a=r 1 b++ a>b while
      a=d a>>= 1 d=a

      (add 2)
      b=0 a= 2 a+=*b *b=a
    d-- a=d a== 0 until
    c= 2 (point to 4 of 3.14)
    a= 1
    r=a 0
    a<<= 14 a-- (last element of ring buffer)
    b=a
    a-= 4 (first element of ring bufer, pointer in r3)
    r=a 3
    halt (input 0 came from pcomp, also to restart c=2 is enough)
  endif
  (CM part)
  d=0
  a=r 2  a-= 48
  c--
  a==*c
  c++
  if (pi: set context for expected digit)
    a=*c c++ a<<= 1 a++ a<<= 9 *d=a (distinguish between pi number context and character context by 1 bit for sure)
  else (other:)
    a=r 2 a<<= 10 *d=a c= 2 (set context to actual byte)
  endif
  
  (a in r2, lower border of ring buffer in r3)
  (ICM and ISSE part adapted from fast.cfg)
  a=r 2
  *b=a a=0 (save in rotating buffer M)
  hash b--
    d=a (save hash) a=r 3 a>b if b++ b++ b++ b++ endif a=d
  hash d= 1 *d=a
  b--
    d=a (save hash) a=r 3 a>b if b++ b++ b++ b++ endif a=d
  hash b--
    d=a (save hash) a=r 3 a>b if b++ b++ b++ b++ endif a=d
  hash d= 2 *d=a

  halt
end
